var documenterSearchIndex = {"docs":
[{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"Because all uncertainties are handled using a resampling approach, it is trivial to  combine or merge uncertain values of different types into a single uncertain value.","category":"page"},{"location":"uncertain_values/merging/#Nomenclature","page":"Nomenclature","title":"Nomenclature","text":"","category":"section"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"Depending on your data, you may want to choose of one the following ways of  representing multiple uncertain values as one:","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"Combining. An ensemble of uncertain    values is represented as a weighted population. This approach is nice if you want    to impose expert-opinion on the relative sampling probabilities of uncertain    values in the ensemble, but still sample from the entire supports of each of the   furnishing values. This introduces no additional approximations besides what    is already present at the moment you define your uncertain values.\nMerging. Multiple uncertain values are merged using    a kernel density estimate to the overall distribution. This approach introduces    approximations beyond what is present in the uncertain values when you define them.","category":"page"},{"location":"uncertain_values/merging/#uncertainvalue_combine","page":"Nomenclature","title":"Combining uncertain values: the population approach","text":"","category":"section"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"Combining uncertain values is done by representing them as a weighted population of uncertain values, which is illustrated in the following example:","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"# Assume we have done some analysis and have three points whose uncertainties \n# significantly overlap.\nv1 = UncertainValue(Normal(0.13, 0.52))\nv2 = UncertainValue(Normal(0.27, 0.42))\nv3 = UncertainValue(Normal(0.21, 0.61))\n\n# Give each value equal sampling probabilities and represent as a population\npop = UncertainValue([v1, v2, v3], [1, 1, 1])\n\n# Let the values v1, v2 and v3 be sampled with probability ratios 1-2-3\npop = UncertainValue([v1, v2, v3], [1, 2, 3])","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"(Image: )","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"This is not restricted to normal distributions! We can combine any type of  value in our population, even populations!","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"# Consider a population of normal distributions, and a gamma distribution\nv1 = UncertainValue(Normal(0.265, 0.52))\nv2 = UncertainValue(Normal(0.311, 0.15))\nv3 = UncertainValue([v1, v2], [2, 1])\nv4 = UncertainValue(Gamma(0.5, -1))\npts = [v1, v4]\nwts = [2, 1]\n\n# New population is a nested population with unequal weights\npop = UncertainValue(pts, wts)\n\nd1 = density(resample(pop, 20000), label = \"population\")\n\nd2 = plot()\ndensity!(d2, resample(pop[1], 20000), label = \"v1\")\ndensity!(d2, resample(pop[2], 20000), label = \"v2\")\n\nplot(d1, d2, layout = (2, 1), xlabel = \"Value\", ylabel = \"Density\", link = :x, xlims = (-2.5, 2.5))","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"(Image: )","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"This makes it possible treat an ensemble of uncertain values as a single uncertain value.","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"With equal weights, this introduces no bias beyond what is present in the data,  because resampling is done from the full supports of each of the furnishing values.  Additional information on relative sampling probabilities, however, be it informed by expert opinion or quantative estimates, is easily incorporated by adjusting  the sampling weights.","category":"page"},{"location":"uncertain_values/merging/#uncertainvalue_merge","page":"Nomenclature","title":"Merging uncertain values: the kernel density estimation (KDE) approach","text":"","category":"section"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"Merging multiple uncertain values could be done by fitting a model distribution to  the values. Using any specific theoretical distribution as a model for the combined  uncertainty, however, is in general not possible, because the values may have  different types of uncertainties.","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"Thus, in this package, kernel kernel density estimation is used to merge multiple uncertain values.  This has the advantage that you only have to deal with a single estimate to the combined  distribution, but introduces bias because the distribution is estimated and the  shape of the distribution depends on the parameters of the KDE procedure.","category":"page"},{"location":"uncertain_values/merging/#Without-weights","page":"Nomenclature","title":"Without weights","text":"","category":"section"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"When no weights are provided, the combined value is computed  by resampling each of the N uncertain values n/N times, then combining using kernel density estimation. ","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"combine(uvals::Vector{AbstractUncertainValue}; n = 1000*length(uvals), \n        bw::Union{Nothing, Real} = nothing)","category":"page"},{"location":"uncertain_values/merging/#UncertainData.combine-Tuple{Vector{AbstractUncertainValue}}","page":"Nomenclature","title":"UncertainData.combine","text":"combine(uvals::Vector{AbstractUncertainValue}; n = 10000*length(uvals), \n    bw::Union{Nothing, Real} = nothing)\n\nCombine multiple uncertain values into a single uncertain value. This is done by resampling each uncertain value in uvals, n times  each,  then pooling these draws together. Finally, a kernel density estimate to the final distribution is computed over those draws. \n\nThe KDE bandwidth is controlled by bw. By default, bw = nothing; in this case,  the bandwidth is determined using the KernelDensity.default_bandwidth function.\n\ntip: Tip\nFor very wide, close-to-normal distributions, the default bandwidth may work well.  If you're combining very peaked distributions or discrete populations, however,  you may want to lower the bandwidth significantly.\n\nExample\n\nv1 = UncertainValue(Normal, 1, 0.3)\nv2 = UncertainValue(Normal, 0.8, 0.4)\nv3 = UncertainValue([rand() for i = 1:3], [0.3, 0.3, 0.4])\nv4 = UncertainValue(Normal, 3.7, 0.8)\nuvals = [v1, v2, v3, v4];\n\ncombine(uvals)\ncombine(uvals, n = 20000) # adjust number of total draws\n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"Weights dictating the relative contribution of each  uncertain value into the combined value can also be provided. combine works  with ProbabilityWeights, AnalyticWeights,  FrequencyWeights and the generic Weights. ","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"Below shows an example of combining ","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"v1 = UncertainValue(rand(1000))\nv2 = UncertainValue(Normal, 0.8, 0.4)\nv3 = UncertainValue([rand() for i = 1:3], [0.3, 0.3, 0.4])\nv4 = UncertainValue(Normal, 3.7, 0.8)\nuvals = [v1, v2, v3, v4]\n\np = plot(title = L\"distributions \\,\\, with \\,\\, overlapping \\,\\, supports\")\nplot!(v1, label = L\"v_1\", ls = :dash)\nplot!(v2, label = L\"v_2\", ls = :dot)\nvline!(v3.values, label = L\"v_3\") # plot each possible state as vline\nplot!(v4, label = L\"v_4\")\n\npcombined = plot(combine(uvals), title = L\"merge(v_1, v_2, v_3, v_4)\", lc = :black, lw = 2)\n\nplot(p, pcombined, layout = (2, 1), link = :x, ylabel = \"Density\")","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"(Image: )","category":"page"},{"location":"uncertain_values/merging/#With-weights","page":"Nomenclature","title":"With weights","text":"","category":"section"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"Weights, ProbabilityWeights and  AnalyticWeights are functionally the same. Either  may be used depending on whether the weights are assigned subjectively or quantitatively.  With FrequencyWeights, it is possible to control the exact number of draws from each  uncertain value that goes into the draw pool before performing KDE.","category":"page"},{"location":"uncertain_values/merging/#ProbabilityWeights","page":"Nomenclature","title":"ProbabilityWeights","text":"","category":"section"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"combine(uvals::Vector{AbstractUncertainValue}, weights::ProbabilityWeights; \n    n = 1000*length(uvals))","category":"page"},{"location":"uncertain_values/merging/#UncertainData.combine-Tuple{Vector{AbstractUncertainValue}, ProbabilityWeights}","page":"Nomenclature","title":"UncertainData.combine","text":"combine(uvals::Vector{AbstractUncertainValue}, weights::ProbabilityWeights; \n    n = 10000*length(uvals), \n    bw::Union{Nothing, Real} = nothing)\n\nCombine multiple uncertain values into a single uncertain value. This is done by resampling each uncertain value in uvals proportionally to the provided  relative analytic weights indicating their relative importance (these are normalised by  default, so don't need to sum to 1), then pooling these draws together. Finally, a kernel  density estimate to the final distribution is computed over the n total draws.\n\nProviding ProbabilityWeights leads to the exact same behaviour as for AnalyticWeights,  but may be more appropriote when, for example, weights have been determined  quantitatively. \n\nThe KDE bandwidth is controlled by bw. By default, bw = nothing; in this case,  the bandwidth is determined using the KernelDensity.default_bandwidth function.\n\ntip: Tip\nFor very wide, close-to-normal distributions, the default bandwidth may work well.  If you're combining very peaked distributions or discrete populations, however,  you may want to lower the bandwidth significantly.\n\nExample\n\nv1 = UncertainValue(Normal, 1, 0.3)\nv2 = UncertainValue(Normal, 0.8, 0.4)\nv3 = UncertainValue([rand() for i = 1:3], [0.3, 0.3, 0.4])\nv4 = UncertainValue(Normal, 3.7, 0.8)\nuvals = [v1, v2, v3, v4];\n\n# Two difference syntax options\ncombine(uvals, ProbabilityWeights([0.2, 0.1, 0.3, 0.2]))\ncombine(uvals, pweights([0.2, 0.1, 0.3, 0.2]), n = 20000) # adjust number of total draws\n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"For example:","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"v1 = UncertainValue(UnivariateKDE, rand(4:0.25:6, 1000), bandwidth = 0.02)\nv2 = UncertainValue(Normal, 0.8, 0.4)\nv3 = UncertainValue([rand() for i = 1:3], [0.3, 0.3, 0.4])\nv4 = UncertainValue(Gamma, 8, 0.4)\nuvals = [v1, v2, v3, v4];\n\np = plot(title = L\"distributions \\,\\, with \\,\\, overlapping \\,\\, supports\")\nplot!(v1, label = L\"v_1: KDE \\, over \\, empirical \\, distribution\", ls = :dash)\nplot!(v2, label = L\"v_2: Normal(0.8, 0.4)\", ls = :dot)\n# plot each possible state as vline\nvline!(v3.values, \n    label = L\"v_3: \\, Discrete \\, population\\, [1,2,3], w/ \\, weights \\, [0.3, 0.4, 0.4]\") \nplot!(v4, label = L\"v_4: \\, Gamma(8, 0.4)\")\n\npcombined = plot(\n    combine(uvals, ProbabilityWeights([0.1, 0.3, 0.02, 0.5]), n = 100000, bw = 0.05), \n    title = L\"combine([v_1, v_2, v_3, v_4], ProbabilityWeights([0.1, 0.3, 0.02, 0.5])\", \n    lc = :black, lw = 2)\n\nplot(p, pcombined, layout = (2, 1), size = (800, 600), \n    link = :x, \n    ylabel = \"Density\",\n    tickfont = font(12),\n    legendfont = font(8), fg_legend = :transparent, bg_legend = :transparent)","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"(Image: )","category":"page"},{"location":"uncertain_values/merging/#AnalyticWeights","page":"Nomenclature","title":"AnalyticWeights","text":"","category":"section"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"combine(uvals::Vector{AbstractUncertainValue}, weights::AnalyticWeights; \n    n = 1000*length(uvals))","category":"page"},{"location":"uncertain_values/merging/#UncertainData.combine-Tuple{Vector{AbstractUncertainValue}, AnalyticWeights}","page":"Nomenclature","title":"UncertainData.combine","text":"combine(uvals::Vector{AbstractUncertainValue}, weights::AnalyticWeights; \n    n = 10000*length(uvals), \n    bw::Union{Nothing, Real} = nothing)\n\nCombine multiple uncertain values into a single uncertain value. This is done by resampling each uncertain value in uvals proportionally to the provided  relative probability weights (these are normalised by default, so don't need  to sum to 1), then pooling these draws together. Finally, a kernel density  estimate to the final distribution is computed over the n total draws.\n\nProviding AnalyticWeights leads to the exact same behaviour as for ProbabilityWeights, but may be more appropriote when relative importance weights are assigned subjectively,  and not based on quantitative evidence.\n\nThe KDE bandwidth is controlled by bw. By default, bw = nothing; in this case,  the bandwidth is determined using the KernelDensity.default_bandwidth function.\n\ntip: Tip\nFor very wide, close-to-normal distributions, the default bandwidth may work well.  If you're combining very peaked distributions or discrete populations, however,  you may want to lower the bandwidth significantly.\n\nExample\n\nv1 = UncertainValue(Normal, 1, 0.3)\nv2 = UncertainValue(Normal, 0.8, 0.4)\nv3 = UncertainValue([rand() for i = 1:3], [0.3, 0.3, 0.4])\nv4 = UncertainValue(Normal, 3.7, 0.8)\nuvals = [v1, v2, v3, v4];\n\n# Two difference syntax options\ncombine(uvals, AnalyticWeights([0.2, 0.1, 0.3, 0.2]))\ncombine(uvals, aweights([0.2, 0.1, 0.3, 0.2]), n = 20000) # adjust number of total draws\n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"For example:","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"v1 = UncertainValue(UnivariateKDE, rand(4:0.25:6, 1000), bandwidth = 0.02)\nv2 = UncertainValue(Normal, 0.8, 0.4)\nv3 = UncertainValue([rand() for i = 1:3], [0.3, 0.3, 0.4])\nv4 = UncertainValue(Gamma, 8, 0.4)\nuvals = [v1, v2, v3, v4];\n\np = plot(title = L\"distributions \\,\\, with \\,\\, overlapping \\,\\, supports\")\nplot!(v1, label = L\"v_1: KDE \\, over \\, empirical \\, distribution\", ls = :dash)\nplot!(v2, label = L\"v_2: Normal(0.8, 0.4)\", ls = :dot)\nvline!(v3.values, label = L\"v_3: \\, Discrete \\, population\\, [1,2,3], w/ \\, weights \\, [0.3, 0.4, 0.4]\") # plot each possible state as vline\nplot!(v4, label = L\"v_4: \\, Gamma(8, 0.4)\")\n\npcombined = plot(combine(uvals, AnalyticWeights([0.1, 0.3, 0.02, 0.5]), n = 100000, bw = 0.05), \n    title = L\"combine([v_1, v_2, v_3, v_4], AnalyticWeights([0.1, 0.3, 0.02, 0.5])\", lc = :black, lw = 2)\n\nplot(p, pcombined, layout = (2, 1), size = (800, 600), \n    link = :x, \n    ylabel = \"Density\",\n    tickfont = font(12),\n    legendfont = font(8), fg_legend = :transparent, bg_legend = :transparent)","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"(Image: )","category":"page"},{"location":"uncertain_values/merging/#Generic-Weights","page":"Nomenclature","title":"Generic Weights","text":"","category":"section"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"combine(uvals::Vector{AbstractUncertainValue}, weights::Weights; \n    n = 1000*length(uvals))","category":"page"},{"location":"uncertain_values/merging/#UncertainData.combine-Tuple{Vector{AbstractUncertainValue}, Weights}","page":"Nomenclature","title":"UncertainData.combine","text":"combine(uvals::Vector{AbstractUncertainValue}, weights::Weights; \n    n = 10000*length(uvals), \n    bw::Union{Nothing, Real} = nothing)\n\nCombine multiple uncertain values into a single uncertain value. This is done by resampling each uncertain value in uvals proportionally to the provided weights  (these are normalised by default, so don't need to sum to 1), then pooling these draws  together. Finally, a kernel density estimate to the final distribution is computed over  the n total draws.\n\nProviding Weights leads to the exact same behaviour as for ProbabilityWeights and  AnalyticalWeights.\n\nThe KDE bandwidth is controlled by bw. By default, bw = nothing; in this case,  the bandwidth is determined using the KernelDensity.default_bandwidth function.\n\ntip: Tip\nFor very wide, close-to-normal distributions, the default bandwidth may work well.  If you're combining very peaked distributions or discrete populations, however,  you may want to lower the bandwidth significantly.\n\nExample\n\nv1 = UncertainValue(Normal, 1, 0.3)\nv2 = UncertainValue(Normal, 0.8, 0.4)\nv3 = UncertainValue([rand() for i = 1:3], [0.3, 0.3, 0.4])\nv4 = UncertainValue(Normal, 3.7, 0.8)\nuvals = [v1, v2, v3, v4];\n\n# Two difference syntax options\ncombine(uvals, Weights([0.2, 0.1, 0.3, 0.2]))\ncombine(uvals, weights([0.2, 0.1, 0.3, 0.2]), n = 20000) # adjust number of total draws\n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"For example:","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"v1 = UncertainValue(UnivariateKDE, rand(4:0.25:6, 1000), bandwidth = 0.01)\nv2 = UncertainValue(Normal, 0.8, 0.4)\nv3 = UncertainValue([rand() for i = 1:3], [0.3, 0.3, 0.4])\nv4 = UncertainValue(Gamma, 8, 0.4)\nuvals = [v1, v2, v3, v4];\n\np = plot(title = L\"distributions \\,\\, with \\,\\, overlapping \\,\\, supports\")\nplot!(v1, label = L\"v_1: KDE \\, over \\, empirical \\, distribution\", ls = :dash)\nplot!(v2, label = L\"v_2: Normal(0.8, 0.4)\", ls = :dot)\n# plot each possible state as vline\nvline!(v3.values, \n    label = L\"v_3: \\, Discrete \\, population\\, [1,2,3], w/ \\, weights \\, [0.3, 0.4, 0.4]\") \nplot!(v4, label = L\"v_4: \\, Gamma(8, 0.4)\")\n\npcombined = plot(combine(uvals, Weights([0.1, 0.15, 0.1, 0.1]), n = 100000, bw = 0.02), \n    title = L\"combine([v_1, v_2, v_3, v_4],  Weights([0.1, 0.15, 0.1, 0.1]))\", \n    lc = :black, lw = 2)\n\nplot(p, pcombined, layout = (2, 1), size = (800, 600), \n    link = :x, \n    ylabel = \"Density\",\n    tickfont = font(12),\n    legendfont = font(8), fg_legend = :transparent, bg_legend = :transparent)","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"(Image: )","category":"page"},{"location":"uncertain_values/merging/#FrequencyWeights","page":"Nomenclature","title":"FrequencyWeights","text":"","category":"section"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"Using FrequencyWeights, one may specify the number of times each of the uncertain values  should be sampled to form the pooled resampled draws on which the final kernel density  estimate is performed.","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"combine(uvals::Vector{AbstractUncertainValue}, weights::FrequencyWeights; \n    n = 1000*length(uvals))","category":"page"},{"location":"uncertain_values/merging/#UncertainData.combine-Tuple{Vector{AbstractUncertainValue}, FrequencyWeights}","page":"Nomenclature","title":"UncertainData.combine","text":"combine(uvals::Vector{AbstractUncertainValue}, weights::FrequencyWeights;\n    bw::Union{Nothing, Real} = nothing)\n\nCombine multiple uncertain values into a single uncertain value. This is done by resampling each uncertain value in uvals according to their relative frequencies (the absolute number of draws provided by weights). Finally, a kernel density  estimate to the final distribution is computed over the sum(weights) total draws.\n\nThe KDE bandwidth is controlled by bw. By default, bw = nothing; in this case,  the bandwidth is determined using the KernelDensity.default_bandwidth function.\n\ntip: Tip\nFor very wide and close-to-normal distributions, the default bandwidth may work well.  If you're combining very peaked distributions or discrete populations, however,  you may want to lower the bandwidth significantly.\n\nExample\n\nv1 = UncertainValue(Normal, 1, 0.3)\nv2 = UncertainValue(Normal, 0.8, 0.4)\nv3 = UncertainValue([rand() for i = 1:3], [0.3, 0.3, 0.4])\nv4 = UncertainValue(Normal, 3.7, 0.8)\nuvals = [v1, v2, v3, v4];\n\n# Two difference syntax options\ncombine(uvals, FrequencyWeights([100, 500, 343, 7000]))\ncombine(uvals, pweights([1410, 550, 223, 801]))\n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"For example:","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"v1 = UncertainValue(UnivariateKDE, rand(4:0.25:6, 1000), bandwidth = 0.01)\nv2 = UncertainValue(Normal, 0.8, 0.4)\nv3 = UncertainValue([rand() for i = 1:3], [0.3, 0.3, 0.4])\nv4 = UncertainValue(Gamma, 8, 0.4)\nuvals = [v1, v2, v3, v4];\n\np = plot(title = L\"distributions \\,\\, with \\,\\, overlapping \\,\\, supports\")\nplot!(v1, label = L\"v_1: KDE \\, over \\, empirical \\, distribution\", ls = :dash)\nplot!(v2, label = L\"v_2: Normal(0.8, 0.4)\", ls = :dot)\n# plot each possible state as vline\nvline!(v3.values, \n    label = L\"v_3: \\, Discrete \\, population\\, [1,2,3], w/ \\, weights \\, [0.3, 0.4, 0.4]\") \nplot!(v4, label = L\"v_4: \\, Gamma(8, 0.4)\")\n\npcombined = plot(combine(uvals, FrequencyWeights([10000, 20000, 3000, 5000]), bw = 0.05), \n    title = L\"combine([v_1, v_2, v_3, v_4], FrequencyWeights([10000, 20000, 3000, 5000])\", \n    lc = :black, lw = 2)\n\nplot(p, pcombined, layout = (2, 1), size = (800, 600), \n    link = :x, \n    ylabel = \"Density\",\n    tickfont = font(12),\n    legendfont = font(8), fg_legend = :transparent, bg_legend = :transparent)","category":"page"},{"location":"uncertain_values/merging/","page":"Nomenclature","title":"Nomenclature","text":"(Image: )","category":"page"},{"location":"uncertain_statistics/hypothesistests/unequal_variance_t_test/#Unequal-variance-t-test","page":"Unequal variance t-test","title":"Unequal variance t-test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/unequal_variance_t_test/#Regular-test","page":"Unequal variance t-test","title":"Regular test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/unequal_variance_t_test/","page":"Unequal variance t-test","title":"Unequal variance t-test","text":"UnequalVarianceTTest(d1::AbstractUncertainValue, d2::AbstractUncertainValue, n::Int = 1000; μ0::Real = 0)","category":"page"},{"location":"uncertain_statistics/hypothesistests/unequal_variance_t_test/#HypothesisTests.UnequalVarianceTTest","page":"Unequal variance t-test","title":"HypothesisTests.UnequalVarianceTTest","text":"UnequalVarianceTTest(d1::AbstractUncertainValue, d2::AbstractUncertainValue,\n    n::Int = 1000; μ0::Real = 0) -> UnequalVarianceTTest\n\nConsider two samples s1 and s2, each consisting of n random draws from the distributions furnishing d1 and d2, respectively.\n\nPerform an unequal variance two-sample t-test of the null hypothesis that s1 and s2 come from distributions with equal means against the alternative hypothesis that the distributions have different means.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_statistics/hypothesistests/unequal_variance_t_test/#Pooled-test","page":"Unequal variance t-test","title":"Pooled test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/unequal_variance_t_test/","page":"Unequal variance t-test","title":"Unequal variance t-test","text":"UnequalVarianceTTestPooled(d1::UncertainDataset, d2::UncertainDataset, n::Int = 1000; μ0::Real = 0)","category":"page"},{"location":"uncertain_statistics/hypothesistests/unequal_variance_t_test/#UncertainData.UncertainStatistics.UnequalVarianceTTestPooled","page":"Unequal variance t-test","title":"UncertainData.UncertainStatistics.UnequalVarianceTTestPooled","text":"UnequalVarianceTTestPooled(d1::UncertainDataset, d2::UncertainDataset,\n    n::Int = 1000; μ0::Real = 0) -> UnequalVarianceTTest\n\nConsider two samples s1[i] and s2[i], each consisting of n random draws from the distributions furnishing the uncertain values d1[i] and d2[i], respectively. Gather all s1[i] in a pooled sample S1, and all s2[i] in a pooled sample S2.\n\nThis function performs an unequal variance two-sample t-test of the null hypothesis that S1 and S2 come from distributions with equal means against the alternative hypothesis that the distributions have different means.\n\n\n\n\n\n","category":"function"},{"location":"uncertain_statistics/hypothesistests/unequal_variance_t_test/#Element-wise-test","page":"Unequal variance t-test","title":"Element-wise test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/unequal_variance_t_test/","page":"Unequal variance t-test","title":"Unequal variance t-test","text":"UnequalVarianceTTestElementWise(d1::UncertainDataset, d2::UncertainDataset, n::Int = 1000; μ0::Real = 0)","category":"page"},{"location":"uncertain_statistics/hypothesistests/unequal_variance_t_test/#UncertainData.UncertainStatistics.UnequalVarianceTTestElementWise","page":"Unequal variance t-test","title":"UncertainData.UncertainStatistics.UnequalVarianceTTestElementWise","text":"UnequalVarianceTTestElementWise(d1::UncertainDataset, d2::UncertainDataset,\n    n::Int = 1000; μ0::Real = 0) -> Vector{UnequalVarianceTTest}\n\nConsider two samples s1[i] and s2[i], each consisting of n random draws from the distributions furnishing the uncertain values d1[i] and d2[i], respectively. This function performs an elementwise EqualVarianceTTest on the pairs (s1[i], s2[i]). Specifically:\n\nPerforms an pairwise unequal variance two-sample t-test of the null hypothesis that s1[i] and s2[i] come from distributions with equal means against the alternative hypothesis that the distributions have different means.\n\nThis test is sometimes known as Welch's t-test. It differs from the equal variance t-test in that it computes the number of degrees of freedom of the test using the Welch-Satterthwaite equation:\n\n    ν_χ  fracleft(sum_i=1^n k_i s_i^2right)^2sum_i=1^n\n        frac(k_i s_i^2)^2ν_i\n\n\n\n\n\n","category":"function"},{"location":"resampling/resampling_uncertain_values/#Resampling-uncertain-values","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"","category":"section"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"Uncertain values may be resampled by drawing random number from the distributions furnishing them.","category":"page"},{"location":"resampling/resampling_uncertain_values/#Documentation","page":"Resampling uncertain values","title":"Documentation","text":"","category":"section"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"resample(uv::AbstractUncertainValue)","category":"page"},{"location":"resampling/resampling_uncertain_values/#UncertainData.Resampling.resample-Tuple{AbstractUncertainValue}","page":"Resampling uncertain values","title":"UncertainData.Resampling.resample","text":"resample(uv::AbstractUncertainValue)\n\nSample the uncertain value once, drawing values from the entire support of the probability  distribution furnishing it.\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"resample(uv::AbstractUncertainValue, n::Int)","category":"page"},{"location":"resampling/resampling_uncertain_values/#UncertainData.Resampling.resample-Tuple{AbstractUncertainValue, Int64}","page":"Resampling uncertain values","title":"UncertainData.Resampling.resample","text":"resample(uv::AbstractUncertainValue, n::Int)\n\nSample the uncertain value n times, drawing values from the entire support of the  probability distribution furnishing it.\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_uncertain_values/#Examples","page":"Resampling uncertain values","title":"Examples","text":"","category":"section"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"using Distributions, UncertainData\n\n# Generate some uncertain values\nuv_theoretical = UncertainValue(Normal, 4, 0.2)\nuv_theoretical_fitted = UncertainValue(Normal, rand(Normal(1, 0.2), 1000))\nuv_kde = UncertainValue(rand(Gamma(4, 5), 1000))\n\nresample(uv_theoretical)\nresample(uv_theoretical_fitted)\nresample(uv_kde)","category":"page"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"using Distributions, UncertainData\n\n# Generate some uncertain values\nuv_theoretical = UncertainValue(Normal, 4, 0.2)\nuv_theoretical_fitted = UncertainValue(Normal, rand(Normal(1, 0.2), 1000))\nuv_kde = UncertainValue(rand(Gamma(4, 5), 1000))\n\nn = 500\nresample(uv_theoretical, n)\nresample(uv_theoretical_fitted, n)\nresample(uv_kde, n)","category":"page"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"Resampling can also be performed with constraints.","category":"page"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"resample(uv::AbstractUncertainValue, constraint::SamplingConstraint)   samples the uncertain value once, drawing from a restricted   range of the support of the the probability distribution furnishing it.\nresample(uv::AbstractUncertainValue, constraint::SamplingConstraint, n::Int)   samples the uncertain value n times, drawing values from a restricted   range of the support of the the probability distribution furnishing it.","category":"page"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"Available sampling constraints are:","category":"page"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"TruncateStd(nσ::Int)\nTruncateMinimum(min::Number)\nTruncateMaximum(max::Number)\nTruncateRange(min::Number, max::Number)\nTruncateLowerQuantile(lower_quantile::Float64)\nTruncateUpperQuantile(upper_quantile::Float64)\nTruncateQuantiles(lower_quantile::Float64, upper_quantile::Float64)","category":"page"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"For full documentation of the constraints, see the  available constraints in the menu.","category":"page"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"using Distributions, UncertainData\n\n# Generate some uncertain values\nuv_theoretical = UncertainValue(Normal, 4, 0.2)\nuv_theoretical_fitted = UncertainValue(Normal, rand(Normal(1, 0.2), 1000))\nuv_kde = UncertainValue(rand(Gamma(4, 5), 1000))\n\n# Resample the uncertain value with the restriction that the sampled\n# values must be higher than the 0.2-th quantile of the distribution\n# furnishing the value.\nresample(uv_theoretical, TruncateLowerQuantile(0.2))\nresample(uv_theoretical_fitted, TruncateLowerQuantile(0.2))\nresample(uv_kde, TruncateLowerQuantile(0.2))\n\nn = 100\nresample(uv_theoretical, TruncateLowerQuantile(0.2), n)\nresample(uv_theoretical_fitted, TruncateLowerQuantile(0.2), n)\nresample(uv_kde, TruncateLowerQuantile(0.2))","category":"page"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"using Distributions, UncertainData\n\n# Generate some uncertain values\nuv_theoretical = UncertainValue(Normal, 4, 0.2)\nuv_theoretical_fitted = UncertainValue(Normal, rand(Normal(1, 0.2), 1000))\nuv_kde = UncertainValue(rand(Gamma(4, 5), 1000))\n\n# Resample the uncertain value  with the restriction that the sampled\n# values must be lower than the 0.95-th quantile of the distribution\n# furnishing the value.\nresample(uv_theoretical, TruncateUpperQuantile(0.95))\nresample(uv_theoretical_fitted, TruncateUpperQuantile(0.95))\nresample(uv_kde, TruncateUpperQuantile(0.95))\n\nn = 100\nresample(uv_theoretical, TruncateUpperQuantile(0.95), n)\nresample(uv_theoretical_fitted, TruncateUpperQuantile(0.95), n)\nresample(uv_kde, TruncateUpperQuantile(0.95))","category":"page"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"using Distributions, UncertainData\n\n# Generate some uncertain values\nuv_theoretical = UncertainValue(Normal, 4, 0.2)\nuv_theoretical_fitted = UncertainValue(Normal, rand(Normal(1, 0.2), 1000))\nuv_kde = UncertainValue(rand(Gamma(4, 5), 1000))\n\n# Resample the uncertain value with the restriction that the sampled\n# values must be within the (0.025, 0.975) quantile range.\nresample(uv_theoretical, TruncateQuantiles(0.025, 0.975))\nresample(uv_theoretical_fitted, TruncateQuantiles(0.025, 0.975))\nresample(uv_kde, TruncateQuantiles(0.025, 0.975))\n\nn = 100\nresample(uv_theoretical, TruncateQuantiles(0.025, 0.975), n)\nresample(uv_theoretical_fitted, TruncateQuantiles(0.025, 0.975), n)\nresample(uv_kde, TruncateQuantiles(0.025, 0.975))","category":"page"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"using Distributions, UncertainData\n\n# Generate some uncertain values\nuv_theoretical = UncertainValue(Normal, 4, 0.2)\nuv_theoretical_fitted = UncertainValue(Normal, rand(Normal(1, 0.2), 1000))\nuv_kde = UncertainValue(rand(Gamma(4, 5), 1000))\n\n# Resample the uncertain value with the restriction that the sampled\n# values have -2 as a lower bound.\nresample(uv_theoretical, TruncateMinimum(-2))\nresample(uv_theoretical_fitted, TruncateMinimum(-2))\nresample(uv_kde, TruncateMinimum(-2))\n\nn = 100\nresample(uv_theoretical, TruncateMinimum(-2), n)\nresample(uv_theoretical_fitted, TruncateMinimum(-2), n)\nresample(uv_kde, TruncateMinimum(-2))","category":"page"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"using Distributions, UncertainData\n\n# Generate some uncertain values\nuv_theoretical = UncertainValue(Normal, 4, 0.2)\nuv_theoretical_fitted = UncertainValue(Normal, rand(Normal(1, 0.2), 1000))\nuv_kde = UncertainValue(rand(Gamma(4, 5), 1000))\n\n# Resample the uncertain value with the restriction that the sampled\n# values have 3 as an upper bound.\nresample(uv_theoretical, TruncateMaximum(3))\nresample(uv_theoretical_fitted, TruncateMaximum(3))\nresample(uv_kde, TruncateMaximum(3))\n\nn = 100\nresample(uv_theoretical, TruncateMaximum(3), n)\nresample(uv_theoretical_fitted, TruncateMaximum(3), n)\nresample(uv_kde, TruncateMaximum(3))","category":"page"},{"location":"resampling/resampling_uncertain_values/","page":"Resampling uncertain values","title":"Resampling uncertain values","text":"using Distributions, UncertainData\n\n# Generate some uncertain values\nuv_theoretical = UncertainValue(Normal, 4, 0.2)\nuv_theoretical_fitted = UncertainValue(Normal, rand(Normal(1, 0.2), 1000))\nuv_kde = UncertainValue(rand(Gamma(4, 5), 1000))\n\n# Resample the uncertain value with the restriction that the sampled\n# values must have values on the interval [-1, 1]. We first sample once,\n# then 50 times.\nresample(uv_theoretical, TruncateRange(-1, 1))\nresample(uv_theoretical_fitted, TruncateRange(-1, 1))\nresample(uv_kde, TruncateRange(-1, 1))\n\nn = 100\nresample(uv_theoretical, TruncateRange(-1, 1), n)\nresample(uv_theoretical_fitted, TruncateRange(-1, 1), n)\nresample(uv_kde, TruncateRange(-1, 1))","category":"page"},{"location":"sampling_constraints/sequential_constraints/#Increasing/decreasing","page":"Increasing/decreasing","title":"Increasing/decreasing","text":"","category":"section"},{"location":"sampling_constraints/sequential_constraints/","page":"Increasing/decreasing","title":"Increasing/decreasing","text":"The following constraints may be used to impose sequential constraints when sampling a  collection of uncertain values element-wise.","category":"page"},{"location":"sampling_constraints/sequential_constraints/#StrictlyIncreasing","page":"Increasing/decreasing","title":"StrictlyIncreasing","text":"","category":"section"},{"location":"sampling_constraints/sequential_constraints/","page":"Increasing/decreasing","title":"Increasing/decreasing","text":"StrictlyIncreasing","category":"page"},{"location":"sampling_constraints/sequential_constraints/#UncertainData.SamplingConstraints.StrictlyIncreasing","page":"Increasing/decreasing","title":"UncertainData.SamplingConstraints.StrictlyIncreasing","text":"StrictlyIncreasing(algorithm::OrderedSamplingAlgorithm; \n    n::Int = 50000, lq = 0.05, uq = 0.95)\n\nSampling scheme indicating element-wise sampling such that the resulting values  are strictly increasing in magnitude. \n\nIncreasing sequential sampling is only guaranteed when distributions have finite support. Therefore, distributions are element-wise truncated to the lower and upper quantiles  lq and uq. For each distribution, this is done by drawing n values from it, then  finding the quantiles for that sample, and finally truncating the distribution to the empirical quantile range.\n\nalgorithm is an instance of some OrderedSamplingAlgorithm (e.g. StartToEnd). n is the number of samples to draw when computing quantiles. \n\nTypically used when there are known, physical constraints on the measurements. For example, geochemical measurements of sediments at different depths of a sediment core  are taken at physically separate depths in the core. Thus, the order of the indices cannot be flipped, and must be strictly decreasing/increasing.\n\nSee also: StartToEnd\n\n\n\n\n\n","category":"type"},{"location":"sampling_constraints/sequential_constraints/#StrictlyDecreasing","page":"Increasing/decreasing","title":"StrictlyDecreasing","text":"","category":"section"},{"location":"sampling_constraints/sequential_constraints/","page":"Increasing/decreasing","title":"Increasing/decreasing","text":"StrictlyDecreasing","category":"page"},{"location":"sampling_constraints/sequential_constraints/#UncertainData.SamplingConstraints.StrictlyDecreasing","page":"Increasing/decreasing","title":"UncertainData.SamplingConstraints.StrictlyDecreasing","text":"StrictlyIncreasing(algorithm::OrderedSamplingAlgorithm; n::Int = 50000)\n\nSampling scheme indicating element-wise sampling such that the resulting values  are strictly decreasing in magnitude. \n\nDecreasing sequential sampling is only guaranteed when distributions have finite support. Therefore, distributions are element-wise truncated to the lower and upper quantiles  lq and uq. For each distribution, this is done by drawing n values from it, then  finding the quantiles for that sample, and finally truncating the distribution to the empirical quantile range.\n\nalgorithm is an instance of some OrderedSamplingAlgorithm (e.g. StartToEnd). n is the number of samples to draw when computing quantiles. \n\nTypically used when there are known, physical constraints on the measurements. For example, geochemical measurements of sediments at different depths of a sediment core  are taken at physically separate depths in the core. Thus, the order of the indices cannot be flipped, and must be strictly decreasing/increasing.\n\nSee also: StartToEnd\n\n\n\n\n\n","category":"type"},{"location":"sampling_constraints/sequential_constraints/#Existence-of-sequences","page":"Increasing/decreasing","title":"Existence of sequences","text":"","category":"section"},{"location":"sampling_constraints/sequential_constraints/","page":"Increasing/decreasing","title":"Increasing/decreasing","text":"sequence_exists will check whether a valid sequence through your collection of  uncertain values exists, so that you can know beforehand whether a particular  sequential sampling constraint is possible to apply to your data.","category":"page"},{"location":"sampling_constraints/sequential_constraints/","page":"Increasing/decreasing","title":"Increasing/decreasing","text":"sequence_exists","category":"page"},{"location":"sampling_constraints/sequential_constraints/#UncertainData.SamplingConstraints.sequence_exists","page":"Increasing/decreasing","title":"UncertainData.SamplingConstraints.sequence_exists","text":"sequence_exists(x, c::SequentialSamplingConstraint)\n\nDoes a point-by-point sequence through the uncertain dataset x exist that satisfies the criteria c?\n\nIf x is an UncertainIndexValueDataset, then check for a sequence through the indices only.\n\nBefore the check is performed, the distributions in x are truncated to the quantiles provided  by c to ensure they have finite supports.\n\nExample\n\n# Create a set of time indices \n# We construct this is such a way that we *know* an increasing sequence exists. \nt = [UncertainValue(Normal, i, 2) for i in 1:N];\nsequence_exists(t, StrictlyIncreasing(StartToEnd()))\n\n\n\n\n\n","category":"function"},{"location":"resampling/sequential/strictly_decreasing/#Strictly-decreasing","page":"Strictly decreasing","title":"Strictly decreasing","text":"","category":"section"},{"location":"resampling/sequential/strictly_decreasing/","page":"Strictly decreasing","title":"Strictly decreasing","text":"The default constructor for a strictly decreasing sequential sampling constraint is  StrictlyDecreasing. To specify how the sequence is sampled, provide an  OrderedSamplingAlgorithm as an argument to the constructor.","category":"page"},{"location":"resampling/sequential/strictly_decreasing/#Documentation","page":"Strictly decreasing","title":"Documentation","text":"","category":"section"},{"location":"resampling/sequential/strictly_decreasing/","page":"Strictly decreasing","title":"Strictly decreasing","text":"resample(udata::AbstractUncertainValueDataset, \n        constraint::Union{SamplingConstraint, Vector{SamplingConstraint}},\n        sequential_constraint::StrictlyDecreasing{OrderedSamplingAlgorithm};\n        quantiles = [0.0001, 0.9999])","category":"page"},{"location":"resampling/sequential/strictly_decreasing/","page":"Strictly decreasing","title":"Strictly decreasing","text":"resample(udata::DT, sequential_constraint::StrictlyDecreasing{T};\n        quantiles = [0.0001, 0.9999]) where {DT <: AbstractUncertainValueDataset, T <: StartToEnd}","category":"page"},{"location":"resampling/sequential/strictly_decreasing/#Compatible-ordering-algorithms","page":"Strictly decreasing","title":"Compatible ordering algorithms","text":"","category":"section"},{"location":"resampling/sequential/strictly_decreasing/","page":"Strictly decreasing","title":"Strictly decreasing","text":"StrictlyDecreasing(StartToEnd()) (the default)","category":"page"},{"location":"resampling/sequential/strictly_decreasing/#Examples","page":"Strictly decreasing","title":"Examples","text":"","category":"section"},{"location":"resampling/sequential/strictly_decreasing/#Example:-Strictly-decreasing-sequences-regular-constraints","page":"Strictly decreasing","title":"Example: Strictly decreasing sequences + regular constraints","text":"","category":"section"},{"location":"resampling/sequential/strictly_decreasing/","page":"Strictly decreasing","title":"Strictly decreasing","text":"We'll start by creating some uncertain data with decreasing magnitude and just minor  overlap between values, so we're reasonably sure we can create strictly decreasing sequences.","category":"page"},{"location":"resampling/sequential/strictly_decreasing/","page":"Strictly decreasing","title":"Strictly decreasing","text":"using UncertainData, Plots \nN = 20\nu_timeindices = [UncertainValue(Normal, i, rand(Uniform(0.1, ))) for i = N:-1:1]\nu = UncertainDataset(u_timeindices)","category":"page"},{"location":"resampling/sequential/strictly_decreasing/","page":"Strictly decreasing","title":"Strictly decreasing","text":"Now, we'll create three different plots. In all plots, we plot the 0.00001th to 0.99999th  (black) and 33rd to 67th (red) percentile range error bars. For the first plot, we'll  resample the data without any constraints. For the second plot, we'll resample without  imposing any constraints on the furnishing distirbution, but enforcing strictly decreasing sequences when drawing realizations. For the third plot, we'll first truncate all  furnishing distributions to their 33rd to 67th percentile range, then draw realizations  whose consecutively value are strictly decreasing in magnitude.","category":"page"},{"location":"resampling/sequential/strictly_decreasing/","page":"Strictly decreasing","title":"Strictly decreasing","text":"# Plot the data with 0.00001th to 0.99999th error bars in both directions\nqs = [0.0001, 0.9999]\np_noconstraint = plot(u, qs, legend = false, xaxis = false,\n    title = \"NoConstraint()\") \np_decreasing = plot(u, qs, legend = false, xaxis = false, \n    title = \"StrictlyDecreasing()\")\np_decreasing_constraint = plot(u, qs, legend = false, xaxis = false,\n    title = \"TruncateQuantiles(0.33, 0.67) + StriclyDecreasing()\")\n\n# Add 33rd to 67th percentile range error bars to all plots. \nplot!(p_noconstraint, u, [0.33, 0.67], msc = :red)\nplot!(p_decreasing, u, [0.33, 0.67], msc = :red)\nplot!(p_decreasing_constraint, u, [0.33, 0.67], msc = :red)\n\nfor i = 1:300\n    plot!(p_noconstraint, resample(u, NoConstraint()), lw = 0.2, lc = :black, lα = 0.2)\n    plot!(p_decreasing, resample(u, StrictlyDecreasing()), lw = 0.2, lc = :black, lα = 0.1)\n    plot!(p_decreasing_constraint, resample(u, TruncateQuantiles(0.33, 0.67), StrictlyDecreasing()), lw = 0.2, lc = :black, lα = 0.1)\nend \n\nplot(p_noconstraint, p_decreasing, p_decreasing_constraint, link = :x,\n    layout = (3, 1), size = (300, 600), titlefont = font(8))","category":"page"},{"location":"resampling/sequential/strictly_decreasing/","page":"Strictly decreasing","title":"Strictly decreasing","text":"(Image: )","category":"page"},{"location":"changelog/#Changelog","page":"Changelog","title":"Changelog","text":"","category":"section"},{"location":"changelog/#UncertainData.jl-v.0.14","page":"Changelog","title":"UncertainData.jl v.0.14","text":"","category":"section"},{"location":"changelog/#Breaking-changes","page":"Changelog","title":"Breaking changes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"sequence_exists replaces strictly_increasing_sequence_exists/strictly_decreasing_sequence_exists.","category":"page"},{"location":"changelog/#Bug-fixes","page":"Changelog","title":"Bug fixes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Fixed bug that could occasionally occur for certain types of data when performing resampling with the StrictlyIncreasing/StrictlyDecreasing sequential constraints.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.10.4","page":"Changelog","title":"UncertainData.jl v0.10.4","text":"","category":"section"},{"location":"changelog/#Documentation","page":"Changelog","title":"Documentation","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Changed to regular documentation template.","category":"page"},{"location":"changelog/#Bug-fixes-2","page":"Changelog","title":"Bug fixes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Fixed type error for test.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.10.3","page":"Changelog","title":"UncertainData.jl v0.10.3","text":"","category":"section"},{"location":"changelog/#Improvements","page":"Changelog","title":"Improvements","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"The user can now control how each bin is represented when using BinnedWeightedResampling.    One can now provide BinnedWeightedResampling{UncertainScalarKDE},    BinnedWeightedResampling{UncertainScalarPopulaton} or    BinnedWeightedResampling{RawValues}. Corresponding bin methods are also implemented.","category":"page"},{"location":"changelog/#Documentation-2","page":"Changelog","title":"Documentation","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Fixed missing doc string for bin!.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.10.2","page":"Changelog","title":"UncertainData.jl v0.10.2","text":"","category":"section"},{"location":"changelog/#Improvements-2","page":"Changelog","title":"Improvements","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"The user can now control how each bin is represented when using BinnedResampling. One can now    provide BinnedResampling{UncertainScalarKDE}, BinnedResampling{UncertainScalarPopulaton} or    BinnedResampling{RawValues}.\nExplicit bin methods for binning both scalar valued data and uncertain data.","category":"page"},{"location":"changelog/#Documentation-3","page":"Changelog","title":"Documentation","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Added documentation for binning methods.\nImproved documentation for UncertainScalarKDE.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.10.0","page":"Changelog","title":"UncertainData.jl v0.10.0","text":"","category":"section"},{"location":"changelog/#Improvements-3","page":"Changelog","title":"Improvements","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"The resample family of methods for vectors now dispatches on AbstractVectors, which allows more    flexibility. Now, for example LArrays from LabelledArrays.jl also can be resampled.\nRelax resample(x::Real) to resample(x::Number).","category":"page"},{"location":"changelog/#UncertainData.jl-v0.9.3","page":"Changelog","title":"UncertainData.jl v0.9.3","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"dimension is no longer exported.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.9.2","page":"Changelog","title":"UncertainData.jl v0.9.2","text":"","category":"section"},{"location":"changelog/#New-features","page":"Changelog","title":"New features","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Added SensitivityTests module defining the abstract type SensitivityTest.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.9.1","page":"Changelog","title":"UncertainData.jl v0.9.1","text":"","category":"section"},{"location":"changelog/#Bug-fixes-3","page":"Changelog","title":"Bug fixes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Missing import of interpolate_and_bin between sub-packages fixed.","category":"page"},{"location":"changelog/#Uncertaindata.jl-v0.9.0","page":"Changelog","title":"Uncertaindata.jl v0.9.0","text":"","category":"section"},{"location":"changelog/#New-features-2","page":"Changelog","title":"New features","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Added interpolate_and_bin function.\nAdded InterpolateAndBin type.\nAdded resample(inds, vals, resampling::InterpolateAndBin{Linear}) method, which interpolates and bins inds and vals onto an interpolation grid, then bins and summarises the bins. Returns the binned values.\nAdded resample(x::AbstractUncertainIndexValueDataset, resampling::InterpolateAndBin{Linear}) method.    Draws a single realisation of both the indices and values of x and orders them sequentially according   to the indices (assuming independent points). Then, interpolate, bin and summarise bins.\nAdded bin and bin! functions.\nAdded bin_mean function.\nAdded fill_nans, fill_nans! and interpolate_nans functions for dealing with data containing NaNs.\nAdded findall_nan_chunks function for identifying consecutive NaNs in a dataset.\nAdded RandomSequences resampling scheme.","category":"page"},{"location":"changelog/#Uncertaindata.jl-v0.8.2","page":"Changelog","title":"Uncertaindata.jl v0.8.2","text":"","category":"section"},{"location":"changelog/#New-features-3","page":"Changelog","title":"New features","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Added resample method for BinnedWeightedResampling scheme.\nAdded AbstractBinnedResampling for binned resamplings.\nAdded AbstractBinnedUncertainValueResampling abstract type for binnings where    the values in each bin is represented by an uncertain value. BinnedResampling    and BinnedWeightedResampling are subtypes AbstractBinnedUncertainValueResampling.\nAdded AbstractBinnedSummarisedResampling abstract type for binnings where the values    in each bin are summarised to a single value. BinnedMeanResampling and    BinnedMeanWeightedResampling are subtypes AbstractBinnedResampling.","category":"page"},{"location":"changelog/#Improvements-4","page":"Changelog","title":"Improvements","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Added more tests for binned resampling schemes.","category":"page"},{"location":"changelog/#Uncertaindata.jl-v0.8.1","page":"Changelog","title":"Uncertaindata.jl v0.8.1","text":"","category":"section"},{"location":"changelog/#New-features-4","page":"Changelog","title":"New features","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Added UncertainValueDataset, UncertainIndexDataset, and UncertainIndexValueDataset constructors for vectors of numbers (they get converted to CertainValues). ","category":"page"},{"location":"changelog/#Bug-fixes-4","page":"Changelog","title":"Bug fixes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"rand(x::CertainValue, n::Int) now returns a length-n array with x repeated n times.","category":"page"},{"location":"changelog/#Uncertaindata.jl-v0.8.0","page":"Changelog","title":"Uncertaindata.jl v0.8.0","text":"","category":"section"},{"location":"changelog/#New-functionality","page":"Changelog","title":"New functionality","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Added binned resampling methods that uses BinnedResampling and BinnedMeanResampling schemes.\nresample(::AbstractUncertainIndexValueDataset, ::BinnedResampling\nresample(::AbstractUncertainIndexValueDataset, ::BinnedMeanResampling","category":"page"},{"location":"changelog/#Bug-fixes-5","page":"Changelog","title":"Bug fixes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Fixed bug where resample! method for vectors and tuples of uncertain values didn't return the    expected result.","category":"page"},{"location":"changelog/#Improvements-5","page":"Changelog","title":"Improvements","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Improved resample! docs.","category":"page"},{"location":"changelog/#Uncertaindata.jl-v0.7.0","page":"Changelog","title":"Uncertaindata.jl v0.7.0","text":"","category":"section"},{"location":"changelog/#New-functionality-2","page":"Changelog","title":"New functionality","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Added resample! for in-place resampling into pre-allocated containers.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.5.1","page":"Changelog","title":"UncertainData.jl v0.5.1","text":"","category":"section"},{"location":"changelog/#Bug-fixes-6","page":"Changelog","title":"Bug fixes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Strictly increasing or decreasing sequences were not always possible to construct    when using CertainValues, because TruncateRange instances with equal    minimum and maximum was constructed (not possible). It is now possible to    resample with sequential constraints even with the StrictlyIncreasing    and StrictlyDecreasing constraints.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.5.0","page":"Changelog","title":"UncertainData.jl v0.5.0","text":"","category":"section"},{"location":"changelog/#Breaking-changes-2","page":"Changelog","title":"Breaking changes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"To allow easier multiple dispatch, the indices field of a UncertainIndexValueDataset is   now always an instance of a subtype of AbstractUncertainIndexDataset. The values field    of a UncertainIndexValueDataset is now always an instance of a subtype of    AbstractUncertainValueDataset.","category":"page"},{"location":"changelog/#New-functionality-3","page":"Changelog","title":"New functionality","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Experimental support for nested populations.\nAdded point-estimators for single uncertain values:\nharmmean(x::AbstractUncertainValue, n::Int)\ngeomean(x::AbstractUncertainValue, n::Int)\nkurtosis(x::AbstractUncertainValue, n::Int; m = mean(x))\nmoment(x::AbstractUncertainValue, k, n::Int, m = mean(x))\npercentile(x::AbstractUncertainValue, p, n::Int)\nrenyientropy(x::AbstractUncertainValue, α, n::Int)\nrle(x::AbstractUncertainValue, n::Int)\nsem(x::AbstractUncertainValue, n::Int)\nskewness(x::AbstractUncertainValue, n::Int; m = mean(x))\nspan(x::AbstractUncertainValue, n::Int)\nsummarystats(x::AbstractUncertainValue, n::Int)\ntotalvar(x::AbstractUncertainValue, n::Int)\nAdded statistical estimators for pairs of uncertain values:\ncov(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int; corrected::Bool = true)\ncor(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\ncountne(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\ncounteq(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\ncorkendall(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\ncorspearman(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\nmaxad(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\nmeanad(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\nmsd(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\npsnr(x::AbstractUncertainValue, y::AbstractUncertainValue, maxv, n::Int)\nrmsd(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int; normalize = false)\nsqL2dist(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\ncrosscor(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int; demean = true)\ncrosscov(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int; demean = true)\ngkldiv(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\nkldivergence(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\nAdded UncertainValue constructor for distribution instances.\nAdded UncertainValue constructor for (potentially nested) truncated distribution instances.\nImplemented resample methods for NTuples of uncertain values.\nAdded resample(f::Function, n::Int, x::AbstractUncertainValue, args...; kwargs...)method for    easy evaluation of point-estimates for single uncertain values.\nAdded support for Measurement instances from    Measurements.jl.   These are treated as uncertain values represented by normal distibutions.    Hence, they are given no extra treatment and error propagation is done by    resampling, not by exact methods.\nThe uncertain value type UncertainScalarPopulation may now not only have real-valued scalars    as elements of the population. It can now have uncertain values as members of the population!\nResampling implemented for UncertainScalarPopulation so that we can also sample population    members that are uncertain values.\nImplemented iteration for UncertainScalarPopulation.","category":"page"},{"location":"changelog/#Improvements-6","page":"Changelog","title":"Improvements","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Improved subtyping for theoretical distributions.\nRemoved redundant resample methods for the UncertainDataset type. UncertainDataset    is a subtype of AbstractUncertainValueDataset and has no special behaviour beyond    that implemented for the abstract type, so now we just rely on multiple dispatch here.","category":"page"},{"location":"changelog/#Documentation-4","page":"Changelog","title":"Documentation","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Improved documentation statistical methods.\nOther minor documentation improvements.\nImproved documentation for TruncateStd.","category":"page"},{"location":"changelog/#Bug-fixes-7","page":"Changelog","title":"Bug fixes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Fixed error in show method for AbstractUncertainValue. Not subtypes of AbstractUncertainValue has the distributions field, so that is now removed from the show method.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.4.0","page":"Changelog","title":"UncertainData.jl v0.4.0","text":"","category":"section"},{"location":"changelog/#New-functionality-4","page":"Changelog","title":"New functionality","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Introduce an abstract resampling type AbstractUncertainDataResampling for this    package pending the implementation of AbstractResampling in StatsBase.jl.\nAdded ConstrainedResampling resampling scheme.\nResample vectors of uncertain values without constraints. Syntax:\nresample(::Vector{<:AbstractUncertainValue} for single draws.\nresample(::Vector{<:AbstractUncertainValue}, ::Int} for multiple draws.\nResample vectors of uncertain values with constraint(s) multiple times. Syntax:\nresample(::Vector{<:AbstractUncertainValue}, ::Union{SamplingConstraint, Vector{<:SamplingConstraint}} for single draws.\nresample(::Vector{<:AbstractUncertainValue}, ::Union{SamplingConstraint, Vector{<:SamplingConstraint}}, ::Int for multiple draws.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.3.0","page":"Changelog","title":"UncertainData.jl v0.3.0","text":"","category":"section"},{"location":"changelog/#New-functionality-5","page":"Changelog","title":"New functionality","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Added additional resampling methods for uncertain index and uncertain value datasets,    allowing passing vectors of constraints that are mapped to each value in the dataset. The    syntax is resample(::AbstractUncertainValueDataset, ::Vector{<:SamplingConstraint} for a    single draw, and resample(::AbstractUncertainValueDataset, ::Vector{<:SamplingConstraint}, n::Int   for n draws.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.2.3","page":"Changelog","title":"UncertainData.jl v0.2.3","text":"","category":"section"},{"location":"changelog/#Improvements-7","page":"Changelog","title":"Improvements","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Added input validation when initialising TruncateQuantiles, TruncateRange and    TruncateStd.\nSeparate parameters types for TruncateQuantiles and TruncateRange, so one can do for    example TruncateRange(1, 8.0), instead of having to promote to Float64.\nAdded validation for distribution truncation when resampling.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.2.2","page":"Changelog","title":"UncertainData.jl v0.2.2","text":"","category":"section"},{"location":"changelog/#New-functionality-and-syntax-changes","page":"Changelog","title":"New functionality and syntax changes","text":"","category":"section"},{"location":"changelog/#Resampling-vectors-consisting-of-uncertain-values-(done-in-#61)","page":"Changelog","title":"Resampling vectors consisting of uncertain values (done in #61)","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"resample(uvals::Vector{AbstractUncertainValue}, n::Int) is now interpreted as \"treat    uvals as a dataset and sample it n times\". Thus, it now behaves as    resample(AbstractUncertainDataset, n::Int), returning n vectors of length    length(uvals), where the i-th element is a unique draw of uvals[i].\nresample_elwise(uvals::Vector{AbstractUncertainValue}, n::Int) takes over the role as    \"sample uvals element-wise and n times for each element\". Returns a vector of    length length(uvals), where the i-th element is a n-element vector of unique draws    of uvals[i].","category":"page"},{"location":"changelog/#Resampling-with-subtypes-of-AbstractUncertainValueDataset","page":"Changelog","title":"Resampling with subtypes of AbstractUncertainValueDataset","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Currently, this affects the generic UncertainDatasets, as well as the specialized  UncertainIndexDatasets and UncertainValueDatasets.","category":"page"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"resample_elwise(uvd::AbstractUncertainValueDataset, n::Int) is now interpreted as    \"draw n realisations of each value in uvd\". Returns a vector of length length(uvals)    where the i-th element is a n-element vector of unique draws of uvals[i]. This works    for UncertainDatasets, UncertainIndexDatasets, and UncertainValueDatasets. \nresample_elwise(uvd::AbstractUncertainValueDataset, constraint::Union{SamplingConstraint, Vector{SamplingConstraint}}, n::Int)    is now interpreted as \"draw n realisations of each value in uvd, subjecting each value    in uvd to some sampling constraint(s) during resampling\". Returns a vector of    length length(uvals) where the i-th element is a n-element vector of unique draws    of uvals[i], where the support of uvals[i] has been truncated by the provided    constraint(s).","category":"page"},{"location":"changelog/#Bug-fixes-8","page":"Changelog","title":"Bug fixes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Removed extra blank line from print method for AbstractUncertainPopulation.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.2.1","page":"Changelog","title":"UncertainData.jl v0.2.1","text":"","category":"section"},{"location":"changelog/#New-functionality-6","page":"Changelog","title":"New functionality","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"merge(uvals::Vector{<:AbstractUncertainValue}; n = 1000) now makes it possible to    combine many uncertain values of different into one uncertain value represented by a    kernel density estimate. This is achieved by resampling each of the values n times,    then pooling the draws and estimating a total distribution using KDE.\nmerge(uvals::Vector{<:AbstractUncertainValue}; weights::Weights n = 1000),    merge(uvals::Vector{<:AbstractUncertainValue}; weights::AnalyticalWeights n = 1000)    and    merge(uvals::Vector{<:AbstractUncertainValue}; weights::ProbabilityWeights n = 1000)   merges uncertain values by resampling them proportionally to weights, then pooling    the draws and performing KDE. These are all functionally equivalent, but implementations   for different weights are provided for compatibility with StatsBase.\nmerge(uvals::Vector{<:AbstractUncertainValue}; weights::FrequencyWeights n = 1000)    merges uncertain values by sampling them according to the number of samples provided    with weights.","category":"page"},{"location":"changelog/#Bug-fixes-9","page":"Changelog","title":"Bug fixes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"resample didn't work for UncertainIndexDatasets due to the data being stored in the    indices field, not the values field as for other subtypes of    AbstractUncertainValueDataset. This is now fixed.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.2.0","page":"Changelog","title":"UncertainData.jl v0.2.0","text":"","category":"section"},{"location":"changelog/#Notes","page":"Changelog","title":"Notes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Julia 1.1 is required for version > v.0.2.0.","category":"page"},{"location":"changelog/#New-functionality-7","page":"Changelog","title":"New functionality","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Spline interpolation on a regular grid. \nLinear interpolation on an irregular grid. ","category":"page"},{"location":"changelog/#Improvements-8","page":"Changelog","title":"Improvements","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"support_overlap now returns an interval (from IntervalArithmetic), in line with    what support returns.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.1.8","page":"Changelog","title":"UncertainData.jl v0.1.8","text":"","category":"section"},{"location":"changelog/#Bug-fixes-10","page":"Changelog","title":"Bug fixes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Added missing package dependencies which were not caught by CI.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.1.7","page":"Changelog","title":"UncertainData.jl v0.1.7","text":"","category":"section"},{"location":"changelog/#New-functionality-8","page":"Changelog","title":"New functionality","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"UncertainIndexValueDatasets can now be constructed from vectors of uncertain values.    To do so, provide a vector of uncertain values for the indices, and the same for the    values, e.g. UncertainIndexValueDataset([idx1, idx2], [val1, val2]).\nIndex-value dataset realizations can now be    interpolated on a regular grid. ","category":"page"},{"location":"changelog/#Bug-fixes-11","page":"Changelog","title":"Bug fixes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"minima and maxima now returns the global minimum for a dataset instead of a vector    of elementwise minima and maxima.\nImplemented the option to linearly interpolate index-value dataset realizations.    To do so, provide resample with a RegularGrid instance. \nMerged redundant methods for assigning some distributions.\nFixed non-critical indexing bug for uncertain index-value datasets.\nRemoved redudant method definitions and multiple imports of the same files causing    definitions to be overwritten and printing warnings statements when loading the package.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.1.6","page":"Changelog","title":"UncertainData.jl v0.1.6","text":"","category":"section"},{"location":"changelog/#New-functionality-9","page":"Changelog","title":"New functionality","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Implemented sequential sampling constraints StrictlyIncreasing and StrictlyDecreasing   for UncertainIndexValueDatasets. \nAdded UncertainScalarPopulation type, representing    vectors of values that should be sampled according to a vector of probabilities. ","category":"page"},{"location":"changelog/#Improvements-9","page":"Changelog","title":"Improvements","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Improved documentation for CertainValues.\nAdded documentation for UncertainScalarPopulation.\nAdded UncertainScalarPopulation to uncertain value overview list in the documentation.\nFixed duplicate docs for cot, cotd, coth and added missing acot, acotd, acoth   docs.\nShortened and updated main documentation page with more links.","category":"page"},{"location":"changelog/#Bug-fixes-12","page":"Changelog","title":"Bug fixes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Import Base functions properly when defining CertainValue, so that no unexpected    behaviour is introduced.\nFixed links in documentation that pointed to the wrong locations.\nRemove model resampling docs which was not supposed to be published until the    functionality is properly implemented.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.1.5","page":"Changelog","title":"UncertainData.jl v0.1.5","text":"","category":"section"},{"location":"changelog/#New-functionality-10","page":"Changelog","title":"New functionality","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Added CertainValue type to represent scalars without   any uncertainty. Even though a scalar is not uncertain, we'll define it as subtype of    AbstractUncertainValue to treat certain values alongside uncertain values in datasets. \nAdded plot recipe for CertainValues. They are just plotted as regular points.\nAdded method resample(Vector{AbstractUncertainValue}) for resampling vectors of    uncertain values. Operates element-wise, just as for an uncertain dataset. \nAdded an abstract type SequentialSamplingConstraint to separate sequential constraints    from general constraints that might be applied before resampling according to    the sequential constraints.\nAdded abstract type (OrderedSamplingAlgorithm) and composite types    (StartToEnd, EndToStart, MidpointOutwards, ChunksForwards, ChunksBackwards)    which indicates how to sample sequential realizations when resampling an uncertain    dataset. Only StartToEnd is used at the moment.\nAdded abstract type SequentialSamplingConstraint which is the supertype for all    sequential constraints.\nAdded function to check if strictly increasing sequences through an uncertain dataset    exist: strictly_increasing_sequence_exists(udata::AbstractUncertainValueDataset.\nAdded function to check if strictly decreasing sequences through an uncertain dataset    exist: strictly_increasing_sequence_exists(udata::AbstractUncertainValueDataset.\nAdded the StrictlyIncreasing{T} where {T<:OrderedSamplingAlgorithm} sequential    constraint for resampling uncertain datasets. \nAdded the StrictlyDecreasing{T} where {T<:OrderedSamplingAlgorithm} sequential    constraint for resampling uncertain datasets. \nAdded resampling methods\nresample(udata, sequential_constraint::StrictlyIncreasing{T} where {T <: StartToEnd}\nresample(udata, sequential_constraint::StrictlyDecreasing{T} where {T <: StartToEnd}\nresample(udata, constraint::SamplingConstraint, sequential_constraint::StrictlyIncreasing{T} where {T <: StartToEnd}\nresample(udata, constraint::SamplingConstraint, sequential_constraint::StrictlyDecreasing{T} where {T <: StartToEnd}\nresample(udata, constraint::Vector{SamplingConstraint}, sequential_constraint::StrictlyIncreasing{T} where {T <: StartToEnd}\nresample(udata, constraint::Vector{SamplingConstraint}, sequential_constraint::StrictlyDecreasing{T} where {T <: StartToEnd}","category":"page"},{"location":"changelog/#Improvements-10","page":"Changelog","title":"Improvements","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Added documentation on sequential constraints, clearly separating it from the general constraints. ","category":"page"},{"location":"changelog/#UncertainData.jl-v0.1.4","page":"Changelog","title":"UncertainData.jl v0.1.4","text":"","category":"section"},{"location":"changelog/#Breaking-changes-3","page":"Changelog","title":"Breaking changes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Elementary operations for (scalar, uncertain_value), (uncertain_value, scalar) and    (uncertain_value, uncertain_value) pairs now returns an uncertain value instead of    a vector of resampled realizations. The default behaviour is to perform a kernel    density estimate over the vector of results of the element-wise operations (which    was previously returned without representing it as an uncertain value).","category":"page"},{"location":"changelog/#New-functionality-11","page":"Changelog","title":"New functionality","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Implemented constraints for datasets that have already been constrained.    constrain(udata::ConstrainedDataset, s::SamplingConstraint) will now return another    ConstrainedDataset. The same applies for ConstrainedIndexDataset and    ConstrainedValueDataset.\nAdded maximum(Vector{AbstractUncertainValue}) and    minimum(Vector{AbstractUncertainValue}) methods.\nAdded plot recipe for Vector{AbstractUncertainValue}s. Behaves just as plotting an   uncertain dataset, assuming an implicit indices 1:length(v). Error bars may be    tuned by providing a second argument of quantiles to plot, e.g. plot(v, [0.2, 0.8]   gives error bars covering the 20th to 80th percentile range of the data.","category":"page"},{"location":"changelog/#Improvements-11","page":"Changelog","title":"Improvements","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Added documentation for StrictlyIncreasing and StrictlyDecreasing sampling    constraints.\nAdded show function for AbstractUncertainIndexDataset. show errored previously,    because it assumed the default behaviour of AbstractUncertainValueDataset, which    does not have the indices field.","category":"page"},{"location":"changelog/#Bug-fixes-13","page":"Changelog","title":"Bug fixes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Fixed bug when resampling an uncertain dataset using the NoConstraint constraint,    which did not work to due to a reference to a non-existing variable.\nFixed test bug where when resampling an uncertain value with the TruncateStd sampling   constraint, the test compared the result to a fixed scalar, not the standar deviation    of the value. This sometimes made the travis build fail.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.1.3","page":"Changelog","title":"UncertainData.jl v0.1.3","text":"","category":"section"},{"location":"changelog/#New-functionality-12","page":"Changelog","title":"New functionality","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Allow both the indices and values fields of UncertainIndexValueDataset to be any    subtype of AbstractUncertainValueDataset. This way, you don't have to use an    index dataset type for the indices if not necessary.","category":"page"},{"location":"changelog/#Improvements-12","page":"Changelog","title":"Improvements","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Improved documentation for UncertainIndexDataset, UncertainValueDataset,    UncertainDataset and UncertainIndexValueDataset types and added an    overview page in the documentation    to explain the difference between these types.\nAdded an overview section for the resampling    documentation.\nCleaned and improved documentation for uncertain values. \nAdded separate documentation for the uncertain index dataset type.\nAdded separate documentation for the uncertain value dataset type.\nImproved documentation for the generic uncertain dataset type \nMerged documentation for sampling constraints and resampling.\nAdded missing documentation for the sinc, sincos, sinpi, cosc and cospi trig    functions.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.1.2","page":"Changelog","title":"UncertainData.jl v0.1.2","text":"","category":"section"},{"location":"changelog/#New-functionality-13","page":"Changelog","title":"New functionality","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Support elementary mathematical operations    (+, -, * and /) between arbitrary    uncertain values of different types. Also works with the combination of scalars and    uncertain values. Because elementary operations should work on arbitrary uncertain    values, a resampling approach is used to perform the mathematical operations. This    means that all mathematical operations return a vector containing the results of    repeated element-wise operations (where each element is a resampled draw from the    furnishing distribution(s) of the uncertain value(s)). The default number of    realizations is set to 10000. This allows calling uval1 + uval2 for two uncertain    values uval1 and uval2. If you need to tune the number of resample draws to n,    you need to use the +(uval1, uval2, n) syntax (similar for the operators). In the    future, elementary operations might be improved for certain combinations of uncertain   values where exact expressions for error propagation are now, for example using the    machinery in Measurements.jl for normally distributed values.\nSupport for trigonometric functions added (sin, sind, sinh, cos,   cosd, cosh, tan, tand, tanh, csc, cscd, csch, csc, cscd, csch,    sec, secd, sech, cot, cotd, coth, sincos, sinc, sinpi, cosc,    cospi). Inverses are also defined (asin, asind, asinh, acos,   acosd, acosh, atan, atand, atanh, acsc, acscd, acsch, acsc, acscd,    acsch, asec, asecd, asech, acot, acotd, acoth).   Beware: if the support of the funishing distribution for an uncertain value lies partly    outside the domain of the function, you risk encountering errors.   These also use a resampling approach, using 10000 realizations by default.    Use either the sin(uval) syntax for the default, and sin(uval, n::Int) to tune the    number of samples.\nSupport non-integer multiples of the standard deviation in the TruncateStd sampling    constraint.","category":"page"},{"location":"changelog/#Fixes","page":"Changelog","title":"Fixes","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Fixed bug in resampling of index-value datasets, where the n arguments wasn't used. \nBugfix: due to StatsBase.std not being defined for FittedDistribution instances,    uncertain values represented by UncertainScalarTheoreticalFit instances were not    compatible with the TruncateStd sampling constraint. Now fixed!\nAdded missing resample(uv::AbstractUncertainValue, constraint::TruncateRange, n::Int)    method.","category":"page"},{"location":"changelog/#Improvements-13","page":"Changelog","title":"Improvements","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Improved resampling documentation for UncertainIndexValueDatasets. Now shows    the documentation for the main methods, as well as examples of how to use different    sampling constraints for each individual index and data value.\nImproved resampling documentation for UncertainDatasets. Now shows    the documentation for the main methods.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.1.1","page":"Changelog","title":"UncertainData.jl v0.1.1","text":"","category":"section"},{"location":"changelog/#New-functionality-14","page":"Changelog","title":"New functionality","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Indexing implemented for UncertainIndexValueDataset. \nResampling implemented for UncertainIndexValueDataset.\nUncertain values and uncertain datasets now support minimum and maximum.\nsupport(uv::AbstractUncertainValue) now always returns an interval from    IntervalArithmetic.jl\nsupport_overlap now computes overlaps also for fitted theoretical distributions.\nAdded more plotting recipes. \nAll implemented uncertain data types now support resampling. ","category":"page"},{"location":"changelog/#Improvements-14","page":"Changelog","title":"Improvements","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Improved general documentation. Added a reference to    Measurements.jl and an explanation    for the differences between the packages.\nImproved resampling documentation with detailed explanation and plots.","category":"page"},{"location":"changelog/#UncertainData.jl-v0.1.0","page":"Changelog","title":"UncertainData.jl v0.1.0","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Basic functionality in place.","category":"page"},{"location":"resampling/sequential/resampling_uncertaindatasets_sequential/","page":"Is a particular constraint applicable?","title":"Is a particular constraint applicable?","text":"In addition to the  generic sampling constraints,  you may impose sequential sampling constraints when resampling an uncertain dataset. ","category":"page"},{"location":"resampling/sequential/resampling_uncertaindatasets_sequential/#Is-a-particular-constraint-applicable?","page":"Is a particular constraint applicable?","title":"Is a particular constraint applicable?","text":"","category":"section"},{"location":"resampling/sequential/resampling_uncertaindatasets_sequential/","page":"Is a particular constraint applicable?","title":"Is a particular constraint applicable?","text":"Not all sequential sampling constraints  may be applicable to your dataset. Use  these functions to check whether a  particular constraint is possible to apply to your dataset. ","category":"page"},{"location":"resampling/sequential/resampling_uncertaindatasets_sequential/#Syntax","page":"Is a particular constraint applicable?","title":"Syntax","text":"","category":"section"},{"location":"resampling/sequential/resampling_uncertaindatasets_sequential/#Sequential-constraint-only","page":"Is a particular constraint applicable?","title":"Sequential constraint only","text":"","category":"section"},{"location":"resampling/sequential/resampling_uncertaindatasets_sequential/","page":"Is a particular constraint applicable?","title":"Is a particular constraint applicable?","text":"A dataset may be sampling imposing a sequential sampling constraint, but leaving the  furnishing distributions untouched otherwise.","category":"page"},{"location":"resampling/sequential/resampling_uncertaindatasets_sequential/","page":"Is a particular constraint applicable?","title":"Is a particular constraint applicable?","text":"resample(udata::AbstractUncertainValueDataset, \n    sequential_constraint::SequentialSamplingConstraint;\n    quantiles = [0.0001, 0.9999])","category":"page"},{"location":"resampling/sequential/resampling_uncertaindatasets_sequential/#Regular-constraint(s)-sequential-constraint","page":"Is a particular constraint applicable?","title":"Regular constraint(s) + sequential constraint","text":"","category":"section"},{"location":"resampling/sequential/resampling_uncertaindatasets_sequential/","page":"Is a particular constraint applicable?","title":"Is a particular constraint applicable?","text":"Another option is to first impose constraints on the furnishing distributions, then  applying the sequential sampling constraint.","category":"page"},{"location":"resampling/sequential/resampling_uncertaindatasets_sequential/","page":"Is a particular constraint applicable?","title":"Is a particular constraint applicable?","text":"resample(udata::AbstractUncertainValueDataset, \n    constraint::Union{SamplingConstraint, Vector{SamplingConstraint}}, \n    sequential_constraint::SequentialSamplingConstraint;\n    quantiles = [0.0001, 0.9999])","category":"page"},{"location":"resampling/sequential/resampling_uncertaindatasets_sequential/#List-of-sequential-resampling-schemes","page":"Is a particular constraint applicable?","title":"List of sequential resampling schemes","text":"","category":"section"},{"location":"resampling/sequential/resampling_uncertaindatasets_sequential/","page":"Is a particular constraint applicable?","title":"Is a particular constraint applicable?","text":"StrictlyIncreasing sequences.\nStrictlyDecreasing sequences. ","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#single_dataset_estimate_statistics","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"These estimators operate on collections of uncertain values. Each element of such a collection can be an uncertain value of any type, such as populations,  theoretical distributions,  KDE distributions or  fitted distributions.","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"The methods compute the statistic in question by drawing a length-k realisation of the k-element collection. Realisations are drawn by sampling each uncertain point in the collection independently. The statistic is then computed on either a single such realisation (yielding a single value for the statistic) or  over multiple realisations (yielding a distribution of the statistic).","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#syntax_statistics_collection_single","page":"Statistics on single collections of uncertain data","title":"Syntax","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"The syntax for computing a statistic f for single instances of an uncertain value collections is","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"f(x::UVAL_COLLECTION_TYPES), which resamples x once, assuming no element-wise dependence    between the elements of x.\nf(x::UVAL_COLLECTION_TYPES, n::Int, args...; kwargs...), which resamples x n times,    assuming no element-wise dependence between the elements of x, then computes the statistic    on each of those n independent draws. Returns a distributions of estimates of the statistic.","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Methods","page":"Statistics on single collections of uncertain data","title":"Methods","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Mean","page":"Statistics on single collections of uncertain data","title":"Mean","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"mean(x::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Statistics.mean-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"Statistics.mean","text":"mean(x::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution for the mean of a collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the mean is computed for each of those length-L realisations, yielding a distribution of mean estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the mean for the realisation.\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the mean of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Mode","page":"Statistics on single collections of uncertain data","title":"Mode","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"mode(x::UVAL_COLLECTION_TYPES, n::Int)\n","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.mode-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.mode","text":"mode(x::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution for the mode of a collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the mode is computed for each of those length-L realisations, yielding a distribution of mode estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the mode for the realisation, which is a vector of length L\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the mode of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Quantile","page":"Statistics on single collections of uncertain data","title":"Quantile","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"quantile(x::UVAL_COLLECTION_TYPES, q, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Statistics.quantile-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Any, Int64}","page":"Statistics on single collections of uncertain data","title":"Statistics.quantile","text":"quantile(x::UVAL_COLLECTION_TYPES, q, n::Int)\n\nObtain a distribution for the quantile(s) q of a collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the quantile is computed for each of those length-L realisations, yielding a distribution of quantile estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the quantile for the realisation, which is a vector of length L\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the quantile of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#IQR","page":"Statistics on single collections of uncertain data","title":"IQR","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"iqr(uv::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.iqr-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.iqr","text":"iqr(x::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution for the interquartile range (IQR), i.e. the 75th  percentile minus the 25th percentile, of a collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the IQR is computed for each of those length-L realisations, yielding a distribution of IQR estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the IQR for the realisation, which is a vector of length L\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the IQR of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Median","page":"Statistics on single collections of uncertain data","title":"Median","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"median(x::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Statistics.median-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"Statistics.median","text":"median(x::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution for the median of a collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the median is computed for each of those length-L realisations, yielding a distribution of median estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the median for the realisation.\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the median of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Middle","page":"Statistics on single collections of uncertain data","title":"Middle","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"middle(x::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Statistics.middle-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"Statistics.middle","text":"middle(x::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution for the middle of a collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the middle is computed for each of those length-L realisations, yielding a distribution of middle estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the middle for the realisation, which is a vector of length L\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the middle of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Standard-deviation","page":"Statistics on single collections of uncertain data","title":"Standard deviation","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"std(x::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Statistics.std-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"Statistics.std","text":"std(x::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution for the standard deviation of a collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the standard deviation is computed for each of those length-L realisations, yielding a distribution of standard deviation estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the std for the realisation, which is a vector of length L\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the standard deviation of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Variance","page":"Statistics on single collections of uncertain data","title":"Variance","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"var(x::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Statistics.var-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"Statistics.var","text":"var(x::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution for the variance of a collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the variance is computed for each of those length-L realisations, yielding a distribution of variance estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the variance for the realisation, which is a vector of length L\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the variance of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Generalized/power-mean","page":"Statistics on single collections of uncertain data","title":"Generalized/power mean","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"genmean(x::UVAL_COLLECTION_TYPES, p, n::Int)\n","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.genmean-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Any, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.genmean","text":"genmean(x::UVAL_COLLECTION_TYPES, p, n::Int)\n\nObtain a distribution for the generalized/power mean with exponent p of a  collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the generalized mean is computed for each of those length-L realisations, yielding a distribution of generalized mean estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the generalized mean for the realisation, which is a vector of length L\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the generalized mean of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Generalized-variance","page":"Statistics on single collections of uncertain data","title":"Generalized variance","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"genvar(x::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.genvar-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.genvar","text":"genvar(x::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution for the generalized sample variance of a collection of  uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the generalized sample variance is computed for each of  those length-L realisations, yielding a distribution of generalized sample variance estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the generalized sample variance for the realisation, which is a   vector of length L.\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the generalized sample variance of x,   which is returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Harmonic-mean","page":"Statistics on single collections of uncertain data","title":"Harmonic mean","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"harmmean(x::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.harmmean-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.harmmean","text":"harmmean(x::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution for the harmonic mean of a collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the harmonic mean is computed for each of those length-L realisations, yielding a distribution of harmonic mean estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the harmonic mean for the realisation.\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the harmonic mean of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Geometric-mean","page":"Statistics on single collections of uncertain data","title":"Geometric mean","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"geomean(x::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.geomean-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.geomean","text":"geomean(x::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution for the geometric mean of a collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the geometric mean is computed for each of those length-L realisations, yielding a distribution of geometric mean estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the geometric mean for the realisation.\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the geometric mean of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Kurtosis","page":"Statistics on single collections of uncertain data","title":"Kurtosis","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"kurtosis(x::UVAL_COLLECTION_TYPES, n::Int; m = mean(x))","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.kurtosis-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.kurtosis","text":"kurtosis(x::UVAL_COLLECTION_TYPES, n::Int, f = StatsBase.mean)\n\nObtain a distribution for the kurtosis of a collection of uncertain values.\n\nThis is done by first drawing n length-L realisations of x, where  L = length(x). Then, the kurtosis is computed for each of those length-L realisations, yielding a distribution of kurtosis estimates. \n\nOptionally, a center function f can be specified. This function is used  to compute the center of each draw, i.e. for the i-th draw, call StatsBase.kurtosis(draw_i, f(draw_i)).\n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the kurtosis for the realisation.\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the kurtosis of x, which is returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#k-th-order-moment","page":"Statistics on single collections of uncertain data","title":"k-th order moment","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"moment(x::UVAL_COLLECTION_TYPES, k, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.moment-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Any, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.moment","text":"moment(x::UVAL_COLLECTION_TYPES, k, n::Int)\n\nObtain a distribution for the k-th order central moment of a collection  of uncertain values.\n\nThis is done by first drawing n length-L realisations of x, where  L = length(x). Then, the k-th order central moment is computed for each  of those length-Lrealisations, yielding a distribution of k-th  order central moment estimates. \n\nThe procedure is as follows. \n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the k-th order central moment for the realisation.\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the k-th order central moment of x,   which is returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Percentile","page":"Statistics on single collections of uncertain data","title":"Percentile","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"percentile(x::UVAL_COLLECTION_TYPES, p, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.percentile-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Any, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.percentile","text":"percentile(x::UVAL_COLLECTION_TYPES, p, n::Int)\n\nObtain a distribution for the percentile(s) p of a collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the percentile is computed for each of those length-L realisations, yielding a distribution of percentile estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the percentile for the realisation, which is a vector of length L\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the percentile of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Renyi-entropy","page":"Statistics on single collections of uncertain data","title":"Renyi entropy","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"renyientropy(x::UVAL_COLLECTION_TYPES, α, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.renyientropy-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Any, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.renyientropy","text":"renyientropy(x::UVAL_COLLECTION_TYPES, α, n::Int)\n\nObtain a distribution for the Rényi (generalized) entropy of  order α of a collection of uncertain values.\n\nThis is done by first drawing n length-L realisations of x, where  L = length(x). Then, the generalized entropy is computed for each  of those length-Lrealisations, yielding a distribution of  generalized entropy estimates. \n\nThe procedure is as follows. \n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the Rényi (generalized) entropy of order α for the realisation.\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the Rényi (generalized) entropy of   order α of x, which is returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Run-length-encoding","page":"Statistics on single collections of uncertain data","title":"Run-length encoding","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"rle(x::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.rle-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.rle","text":"rle(x::UVAL_COLLECTION_TYPES, α, n::Int)\n\nObtain a distribution for the run-length encoding of a  collection of uncertain values.\n\nThis is done by first drawing n length-L realisations of x, where  L = length(x). Then, the run-length encoding is computed for each  of those length-Lrealisations, yielding a distribution of  run-length encoding estimates. \n\nReturns a vector of tuples of run-length encodings.\n\nThe procedure is as follows. \n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the run-length encoding for the realisation. This gives a   tuple, where the first element of the tuple is a vector of   values of the input and the second is the number of consecutive occurrences of  each element.\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the run-length encoding of x,   which is returned as a vector of the run-length encoding tuples.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Standard-error-of-the-mean","page":"Statistics on single collections of uncertain data","title":"Standard error of the mean","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"sem(x::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.sem-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.sem","text":"sem(x::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution for the standard error of the mean of a  collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the standard error of the mean is computed for  each of those length-L realisations, yielding a distribution of standard error of the  mean estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the standard error of the mean for the realisation, which is   a vector of length L.\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the standard error of the mean of x,   which is returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Skewness","page":"Statistics on single collections of uncertain data","title":"Skewness","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"skewness(x::UVAL_COLLECTION_TYPES, n::Int; m = mean(x))","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.skewness-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.skewness","text":"skewness(x::UVAL_COLLECTION_TYPES, n::Int, f = StatsBase.mean)\n\nObtain a distribution for the skewness of a collection of uncertain values.\n\nThis is done by first drawing n length-L realisations of x, where  L = length(x). Then, the skewness is computed for each of those length-L realisations, yielding a distribution of skewness estimates. \n\nOptionally, a center function f can be specified. This function is used  to compute the center of each draw, i.e. for the i-th draw, call StatsBase.skewness(draw_i, f(draw_i)).\n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the skewness for the realisation.\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the skewness of x,   which is returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Span","page":"Statistics on single collections of uncertain data","title":"Span","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"span(x::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.span-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.span","text":"span(x::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution for the span of a collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the span is computed for each of those length-L realisations, yielding a distribution of span estimates. \n\nReturns a length-L vector of spans, where the i-th span is the range minimum(draw_x_i):maximum(draw_x_i).\n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the span for the realisation, which is a vector of length L\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the span of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Summary-statistics","page":"Statistics on single collections of uncertain data","title":"Summary statistics","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"summarystats(x::UVAL_COLLECTION_TYPES, n::Int)\n","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.summarystats-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.summarystats","text":"summarystats(x::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution for the summary statistics of a collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the summary statistics is computed for each of those length-L realisations, yielding a distribution of summary statistics estimates. \n\nReturns a length-L vector of SummaryStats objects containing the mean, minimum,  25th percentile, median, 75th percentile, and maximum for each draw of x.\n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the summary statistics for the realisation, which is a vector of length L\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the summary statistics of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#Total-variance","page":"Statistics on single collections of uncertain data","title":"Total variance","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/","page":"Statistics on single collections of uncertain data","title":"Statistics on single collections of uncertain data","text":"totalvar(x::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_single_dataset_estimates/#StatsBase.totalvar-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Statistics on single collections of uncertain data","title":"StatsBase.totalvar","text":"totalvar(x::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution for the total variance of a collection of uncertain values. This is done by first drawing n length-L realisations of x, where  L = length(x). Then, the total variance is computed for each of those length-L realisations, yielding a distribution of total variance estimates. \n\nDetailed steps:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nCompute the total variance for the realisation, which is a vector of length L\nRepeat the procedure n times, drawing n independent realisations of x.  This yields n estimates of the total variance of x, which is returned as   a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/#Exact-two-sample-Kolmogorov-Smirnov-test","page":"Exact two-sample Kolmogorov-Smirnov test","title":"Exact two-sample Kolmogorov-Smirnov test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/#Regular-test","page":"Exact two-sample Kolmogorov-Smirnov test","title":"Regular test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/","page":"Exact two-sample Kolmogorov-Smirnov test","title":"Exact two-sample Kolmogorov-Smirnov test","text":"ExactOneSampleKSTest(uv::AbstractUncertainValue, d::UnivariateDistribution, n::Int = 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/#HypothesisTests.ExactOneSampleKSTest","page":"Exact two-sample Kolmogorov-Smirnov test","title":"HypothesisTests.ExactOneSampleKSTest","text":"ExactOneSampleKSTest(uv::AbstractUncertainValue,\n    d::UnivariateDistribution, n::Int = 1000) -> ExactOneSampleKSTest\n\nPerform a one-sample exact Kolmogorov–Smirnov test of the null hypothesis that a draw of n realisations of the uncertain value uv comes from the distribution d against the alternative hypothesis that the sample is not drawn from d.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/#Example","page":"Exact two-sample Kolmogorov-Smirnov test","title":"Example","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/","page":"Exact two-sample Kolmogorov-Smirnov test","title":"Exact two-sample Kolmogorov-Smirnov test","text":"We'll test whether the uncertain value uv = UncertainValue(Gamma, 2, 4) comes from the theoretical distribution Gamma(2, 4). Of course, we expect the test to confirm this, because we're using the exact same distribution.","category":"page"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/","page":"Exact two-sample Kolmogorov-Smirnov test","title":"Exact two-sample Kolmogorov-Smirnov test","text":"uv = UncertainValue(Gamma, 2, 4)\n\n# Perform the Kolgomorov-Smirnov test by drawing 1000 samples from the\n# uncertain value.\nExactOneSampleKSTest(uv, Gamma(2, 4), 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/","page":"Exact two-sample Kolmogorov-Smirnov test","title":"Exact two-sample Kolmogorov-Smirnov test","text":"That gives the following output:","category":"page"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/","page":"Exact two-sample Kolmogorov-Smirnov test","title":"Exact two-sample Kolmogorov-Smirnov test","text":"Exact one sample Kolmogorov-Smirnov test\n----------------------------------------\nPopulation details:\n    parameter of interest:   Supremum of CDF differences\n    value under h_0:         0.0\n    point estimate:          0.0228345021301449\n\nTest summary:\n    outcome with 95% confidence: fail to reject h_0\n    two-sided p-value:           0.6655\n\nDetails:\n    number of observations:   1000","category":"page"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/","page":"Exact two-sample Kolmogorov-Smirnov test","title":"Exact two-sample Kolmogorov-Smirnov test","text":"As expected, the test can't reject the hypothesis that the uncertain value uv comes from the theoretical distribution Gamma(2, 4), precisely because it does.","category":"page"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/#Pooled-test","page":"Exact two-sample Kolmogorov-Smirnov test","title":"Pooled test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/","page":"Exact two-sample Kolmogorov-Smirnov test","title":"Exact two-sample Kolmogorov-Smirnov test","text":"ExactOneSampleKSTestPooled(ud::UncertainDataset, d::UnivariateDistribution, n::Int = 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/#UncertainData.UncertainStatistics.ExactOneSampleKSTestPooled","page":"Exact two-sample Kolmogorov-Smirnov test","title":"UncertainData.UncertainStatistics.ExactOneSampleKSTestPooled","text":"ExactOneSampleKSTestPooled(ud::UncertainDataset,\n    d::UnivariateDistribution, n::Int = 1000) -> ExactOneSampleKSTest\n\nFirst, draw n realisations of each uncertain value in ud and pool them together. Then perform a one-sample exact Kolmogorov–Smirnov test of the null hypothesis that the pooled values comes from the distribution d against the alternative hypothesis that the sample is not drawn from d.\n\n\n\n\n\n","category":"function"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/#Element-wise-test","page":"Exact two-sample Kolmogorov-Smirnov test","title":"Element-wise test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/","page":"Exact two-sample Kolmogorov-Smirnov test","title":"Exact two-sample Kolmogorov-Smirnov test","text":"ExactOneSampleKSTestElementWise(ud::UncertainDataset, d::UnivariateDistribution, n::Int = 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/exact_kolmogorov_smirnov_test/#UncertainData.UncertainStatistics.ExactOneSampleKSTestElementWise","page":"Exact two-sample Kolmogorov-Smirnov test","title":"UncertainData.UncertainStatistics.ExactOneSampleKSTestElementWise","text":"ExactOneSampleKSTestElementWise(ud::UncertainDataset,\n    d::UnivariateDistribution, n::Int = 1000) -> Vector{ExactOneSampleKSTest}\n\nFirst, draw n realisations of each uncertain value in ud, keeping one pool of values for each uncertain value.\n\nThen, perform an element-wise (pool-wise) one-sample exact Kolmogorov–Smirnov test of the null hypothesis that each value pool comes from the distribution d against the alternative hypothesis that the sample is not drawn from d.\n\n\n\n\n\n","category":"function"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/#Equal-variance-t-test","page":"Equal variance t-test","title":"Equal variance t-test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/#Regular-test","page":"Equal variance t-test","title":"Regular test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/","page":"Equal variance t-test","title":"Equal variance t-test","text":"EqualVarianceTTest(d1::AbstractUncertainValue, d2::AbstractUncertainValue, n::Int = 1000; μ0::Real = 0)","category":"page"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/#HypothesisTests.EqualVarianceTTest","page":"Equal variance t-test","title":"HypothesisTests.EqualVarianceTTest","text":"EqualVarianceTTest(d1::AbstractUncertainValue, d2::AbstractUncertainValue,\n    n::Int = 1000; μ0::Real = 0) -> EqualVarianceTTest\n\nConsider two samples s1 and s2, each consisting of n random draws from the distributions furnishing d1 and d2, respectively.\n\nThis function performs a two-sample t-test of the null hypothesis that s1 and s2 come from distributions with equal means and variances against the alternative hypothesis that the distributions have different means but equal variances.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/#Example","page":"Equal variance t-test","title":"Example","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/","page":"Equal variance t-test","title":"Equal variance t-test","text":"Let's create two uncertain values furnished by distributions of different types. We'll perform the equal variance t-test to check if there is support for the null-hypothesis that the distributions furnishing the uncertain values come from distributions with equal means and variances.","category":"page"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/","page":"Equal variance t-test","title":"Equal variance t-test","text":"We expect the test to reject this null-hypothesis, because we've created two very different distributions.","category":"page"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/","page":"Equal variance t-test","title":"Equal variance t-test","text":"uv1 = UncertainValue(Normal, 1.2, 0.3)\nuv2 = UncertainValue(Gamma, 2, 3)\n\n# EqualVarianceTTest on 1000 draws for each variable\nEqualVarianceTTest(uv1, uv2, 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/","page":"Equal variance t-test","title":"Equal variance t-test","text":"The output is:","category":"page"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/","page":"Equal variance t-test","title":"Equal variance t-test","text":"Two sample t-test (equal variance)\n----------------------------------\nPopulation details:\n    parameter of interest:   Mean difference\n    value under h_0:         0\n    point estimate:          -4.782470406651697\n    95% confidence interval: (-5.0428, -4.5222)\n\nTest summary:\n    outcome with 95% confidence: reject h_0\n    two-sided p-value:           <1e-99\n\nDetails:\n    number of observations:   [1000,1000]\n    t-statistic:              -36.03293014520585\n    degrees of freedom:       1998\n    empirical standard error: 0.1327249931487462","category":"page"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/","page":"Equal variance t-test","title":"Equal variance t-test","text":"The test rejects the null-hypothesis, so we accept the alternative hypothesis that the samples come from distributions with different means and variances.","category":"page"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/#Pooled-test","page":"Equal variance t-test","title":"Pooled test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/","page":"Equal variance t-test","title":"Equal variance t-test","text":"EqualVarianceTTestPooled(d1::UncertainDataset, d2::UncertainDataset, n::Int = 1000; μ0::Real = 0)","category":"page"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/#UncertainData.UncertainStatistics.EqualVarianceTTestPooled","page":"Equal variance t-test","title":"UncertainData.UncertainStatistics.EqualVarianceTTestPooled","text":"EqualVarianceTTestPooled(d1::UncertainDataset, d2::UncertainDataset,\n    n::Int = 1000; μ0::Real = 0) -> EqualVarianceTTest\n\nConsider two samples s1[i] and s2[i], each consisting of n random draws from the distributions furnishing the uncertain values d1[i] and d2[i], respectively. Gather all s1[i] in a pooled sample S1, and all s2[i] in a pooled sample S2.\n\nPerform a two-sample t-test of the null hypothesis that S1 and S2 come from distributions with equal means and variances against the alternative hypothesis that the distributions have different means but equal variances.\n\n\n\n\n\n","category":"function"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/#Element-wise-test","page":"Equal variance t-test","title":"Element-wise test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/","page":"Equal variance t-test","title":"Equal variance t-test","text":"EqualVarianceTTestElementWise(d1::UncertainDataset, d2::UncertainDataset, n::Int = 1000; μ0::Real = 0)","category":"page"},{"location":"uncertain_statistics/hypothesistests/equal_variance_t_test/#UncertainData.UncertainStatistics.EqualVarianceTTestElementWise","page":"Equal variance t-test","title":"UncertainData.UncertainStatistics.EqualVarianceTTestElementWise","text":"EqualVarianceTTestElementWise(d1::UncertainDataset, d2::UncertainDataset,\n    n::Int = 1000; μ0::Real = 0) -> Vector{EqualVarianceTTest}\n\nConsider two samples s1[i] and s2[i], each consisting of n random draws from the distributions furnishing the uncertain values d1[i] and d2[i], respectively. This function performs an elementwise EqualVarianceTTest on the pairs (s1[i], s2[i]). Specifically:\n\nPerforms an pairwise two-sample t-test of the null hypothesis that s1[i] and s2[i] come from distributions with equal means and variances against the alternative hypothesis that the distributions have different means but equal variances.\n\n\n\n\n\n","category":"function"},{"location":"mathematics/elementary_operations/#Elementary-mathematical-operations","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"","category":"section"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Elementary mathematical operations (+, -, *, and /) between arbitrary  uncertain values of different types and scalars are supported. ","category":"page"},{"location":"mathematics/elementary_operations/#Syntax","page":"Elementary mathematical operations","title":"Syntax","text":"","category":"section"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Resampling is used to perform the mathematical operations. All mathematical  operations return a vector containing the results of repeated element-wise operations  (where each element is a resampled draw from the furnishing distribution(s) of the  uncertain value(s)).","category":"page"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"The default number of realizations is set to 10000. This allows calling uval1 + uval2  for two uncertain values uval1 and uval2. If you need to tune the number of resample  draws to n, use the +(uval1, uval2, n) syntax. ","category":"page"},{"location":"mathematics/elementary_operations/#Future-improvements","page":"Elementary mathematical operations","title":"Future improvements","text":"","category":"section"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"In the future, elementary operations might be improved for certain combinations of uncertain  values where exact expressions for error propagation are now, for example using the  machinery in Measurements.jl for normally distributed values.","category":"page"},{"location":"mathematics/elementary_operations/#Supported-operations","page":"Elementary mathematical operations","title":"Supported operations","text":"","category":"section"},{"location":"mathematics/elementary_operations/#Addition","page":"Elementary mathematical operations","title":"Addition","text":"","category":"section"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Base.:+(a::AbstractUncertainValue, b::AbstractUncertainValue)\nBase.:+(a::AbstractUncertainValue, b::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/elementary_operations/#Base.:+-Tuple{AbstractUncertainValue, AbstractUncertainValue}","page":"Elementary mathematical operations","title":"Base.:+","text":"Base.:+(a::AbstractUncertainValue, b::AbstractUncertainValue) -> UncertainValue\n\nAddition operator for pairs of uncertain values. \n\nComputes the element-wise sum between for a default of n = 10000 realizations of a and  b, then returns an uncertain value based on a kernel density estimate to the distribution  of the element-wise sums.\n\nUse the +(a, b, n) syntax to tune the number (n) of draws.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Base.:+-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Elementary mathematical operations","title":"Base.:+","text":"Base.:+(a::AbstractUncertainValue, b::AbstractUncertainValue, n::Int) -> UncertainValue\n\nAddition operator for pairs of uncertain values. \n\nComputes the element-wise sum between a and b for n realizations of a and b, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise sums.\n\nCall this function using the +(a, b, n) syntax.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Base.:+(a::Real, b::AbstractUncertainValue)\nBase.:+(a::Real, b::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/elementary_operations/#Base.:+-Tuple{Real, AbstractUncertainValue}","page":"Elementary mathematical operations","title":"Base.:+","text":"Base.:+(a::Real, b::AbstractUncertainValue) -> UncertainValue\n\nAddition operator for between scalars and uncertain values. \n\nComputes the element-wise sum between a and b for a default of n = 10000 realizations of b, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise sums.\n\nUse the +(a, b, n) syntax to tune the number (n) of draws.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Base.:+-Tuple{Real, AbstractUncertainValue, Int64}","page":"Elementary mathematical operations","title":"Base.:+","text":"Base.:+(a::Real, b::AbstractUncertainValue, n::Int) -> UncertainValue\n\nAddition operator for scalar-uncertain value pairs. \n\nComputes the element-wise sum between a and b for n realizations of b, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise sums.\n\nCall this function using the +(a, b, n) syntax.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Base.:+(a::AbstractUncertainValue, b::Real)\nBase.:+(a::AbstractUncertainValue, b::Real, n::Int)","category":"page"},{"location":"mathematics/elementary_operations/#Base.:+-Tuple{AbstractUncertainValue, Real}","page":"Elementary mathematical operations","title":"Base.:+","text":"Base.:+(a::AbstractUncertainValue, b::Real) -> UncertainValue\n\nAddition operator for between uncertain values and scalars. \n\nComputes the element-wise sum between a and b for a default of n = 10000 realizations of a, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise sums.\n\nUse the +(a, b, n) syntax to tune the number (n) of draws.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Base.:+-Tuple{AbstractUncertainValue, Real, Int64}","page":"Elementary mathematical operations","title":"Base.:+","text":"Base.:+(a::AbstractUncertainValue, b::Real, n::Int) -> UncertainValue\n\nAddition operator for scalar-uncertain value pairs. \n\nComputes the element-wise sum between a and b for n realizations of a, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise sums.\n\nCall this function using the +(a, b, n) syntax.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Subtraction","page":"Elementary mathematical operations","title":"Subtraction","text":"","category":"section"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Base.:-(a::AbstractUncertainValue, b::AbstractUncertainValue)\nBase.:-(a::AbstractUncertainValue, b::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/elementary_operations/#Base.:--Tuple{AbstractUncertainValue, AbstractUncertainValue}","page":"Elementary mathematical operations","title":"Base.:-","text":"Base.:-(a::AbstractUncertainValue, b::AbstractUncertainValue) -> UncertainValue\n\nSubtraction operator for pairs of uncertain values. \n\nComputes the element-wise differences between for a default of n = 30000 realizations of a and  b, then returns an uncertain value based on a kernel density estimate to the distribution  of the element-wise differences.\n\nUse the -(a, b, n) syntax to tune the number (n) of draws.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Base.:--Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Elementary mathematical operations","title":"Base.:-","text":"Base.:-(a::AbstractUncertainValue, b::AbstractUncertainValue, n::Int) -> UncertainValue\n\nSubtraction operator for pairs of uncertain values. \n\nComputes the element-wise differences between a and b for n realizations of a and b, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise differences.\n\nCall this function using the -(a, b, n) syntax.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Base.:-(a::Real, b::AbstractUncertainValue)\nBase.:-(a::Real, b::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/elementary_operations/#Base.:--Tuple{Real, AbstractUncertainValue}","page":"Elementary mathematical operations","title":"Base.:-","text":"Base.:-(a::Real, b::AbstractUncertainValue) -> UncertainValue\n\nSubtraction operator for between scalars and uncertain values. \n\nComputes the element-wise differences between a and b for a default of n = 30000 realizations of b, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise differences.\n\nUse the -(a, b, n) syntax to tune the number (n) of draws.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Base.:--Tuple{Real, AbstractUncertainValue, Int64}","page":"Elementary mathematical operations","title":"Base.:-","text":"Base.:-(a::Real, b::AbstractUncertainValue, n::Int) -> UncertainValue\n\nSubtraction operator for scalar-uncertain value pairs. \n\nComputes the element-wise differences between a and b for n realizations of b, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise differences.\n\nCall this function using the -(a, b, n) syntax.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Base.:-(a::AbstractUncertainValue, b::Real)\nBase.:-(a::AbstractUncertainValue, b::Real, n::Int)","category":"page"},{"location":"mathematics/elementary_operations/#Base.:--Tuple{AbstractUncertainValue, Real}","page":"Elementary mathematical operations","title":"Base.:-","text":"Base.:-(a::AbstractUncertainValue, b::Real) -> UncertainValue\n\nSubtraction operator for between uncertain values and scalars. \n\nComputes the element-wise differences between a and b for a default of n = 30000 realizations of a, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise differences.\n\nUse the -(a, b, n) syntax to tune the number (n) of draws.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Base.:--Tuple{AbstractUncertainValue, Real, Int64}","page":"Elementary mathematical operations","title":"Base.:-","text":"Base.:-(a::AbstractUncertainValue, b::Real, n::Int) -> UncertainValue\n\nSubtraction operator for scalar-uncertain value pairs. \n\nComputes the element-wise differences between a and b for n realizations of a, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise differences.\n\nCall this function using the -(a, b, n) syntax.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Multiplication","page":"Elementary mathematical operations","title":"Multiplication","text":"","category":"section"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Base.:*(a::AbstractUncertainValue, b::AbstractUncertainValue)\nBase.:*(a::AbstractUncertainValue, b::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/elementary_operations/#Base.:*-Tuple{AbstractUncertainValue, AbstractUncertainValue}","page":"Elementary mathematical operations","title":"Base.:*","text":"Base.:*(a::AbstractUncertainValue, b::AbstractUncertainValue) -> UncertainValue\n\nMultiplication operator for pairs of uncertain values. \n\nComputes the element-wise products between for a default of n = 10000 realizations of a and  b, then returns an uncertain value based on a kernel density estimate to the distribution  of the element-wise products.\n\nUse the *(a, b, n) syntax to tune the number (n) of draws.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Base.:*-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Elementary mathematical operations","title":"Base.:*","text":"Base.:*(a::AbstractUncertainValue, b::AbstractUncertainValue, n::Int) -> UncertainValue\n\nMultiplication operator for pairs of uncertain values. \n\nComputes the element-wise products between a and b for n realizations of a and b, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise products.\n\nCall this function using the *(a, b, n) syntax.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Base.:*(a::Real, b::AbstractUncertainValue)\nBase.:*(a::Real, b::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/elementary_operations/#Base.:*-Tuple{Real, AbstractUncertainValue}","page":"Elementary mathematical operations","title":"Base.:*","text":"Base.:*(a::Real, b::AbstractUncertainValue) -> UncertainValue\n\nMultiplication operator for between scalars and uncertain values. \n\nComputes the element-wise products between a and b for a default of n = 10000 realizations of b, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise products.\n\nUse the *(a, b, n) syntax to tune the number (n) of draws.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Base.:*-Tuple{Real, AbstractUncertainValue, Int64}","page":"Elementary mathematical operations","title":"Base.:*","text":"Base.:*(a::Real, b::AbstractUncertainValue, n::Int) -> UncertainValue\n\nMultiplication operator for scalar-uncertain value pairs. \n\nComputes the element-wise products between a and b for n realizations of b, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise products.\n\nCall this function using the *(a, b, n) syntax.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Base.:*(a::AbstractUncertainValue, b::Real)\nBase.:*(a::AbstractUncertainValue, b::Real, n::Int)","category":"page"},{"location":"mathematics/elementary_operations/#Base.:*-Tuple{AbstractUncertainValue, Real}","page":"Elementary mathematical operations","title":"Base.:*","text":"Base.:*(a::AbstractUncertainValue, b::Real) -> UncertainValue\n\nMultiplication operator for between uncertain values and scalars. \n\nComputes the element-wise products between a and b for a default of n = 10000 realizations of a, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise products.\n\nUse the *(a, b, n) syntax to tune the number (n) of draws.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Base.:*-Tuple{AbstractUncertainValue, Real, Int64}","page":"Elementary mathematical operations","title":"Base.:*","text":"Base.:*(a::AbstractUncertainValue, b::Real, n::Int) -> UncertainValue\n\nMultiplication operator for scalar-uncertain value pairs. \n\nComputes the element-wise products between a and b for n realizations of a, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise products.\n\nCall this function using the *(a, b, n) syntax.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Division","page":"Elementary mathematical operations","title":"Division","text":"","category":"section"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Base.:/(a::AbstractUncertainValue, b::AbstractUncertainValue)\nBase.:/(a::AbstractUncertainValue, b::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/elementary_operations/#Base.:/-Tuple{AbstractUncertainValue, AbstractUncertainValue}","page":"Elementary mathematical operations","title":"Base.:/","text":"Base.:/(a::AbstractUncertainValue, b::AbstractUncertainValue) -> UncertainValue\n\nDivision operator for pairs of uncertain values. \n\nComputes the element-wise quotients between for a default of n = 10000 realizations of a and  b, then returns an uncertain value based on a kernel density estimate to the distribution  of the element-wise quotients.\n\nUse the /(a, b, n) syntax to tune the number (n) of draws.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Base.:/-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Elementary mathematical operations","title":"Base.:/","text":"Base.:/(a::AbstractUncertainValue, b::AbstractUncertainValue, n::Int) -> UncertainValue\n\nDivision operator for pairs of uncertain values. \n\nComputes the element-wise quotients between a and b for n realizations of a and b, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise quotients.\n\nCall this function using the /(a, b, n) syntax.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Base.:/(a::Real, b::AbstractUncertainValue)\nBase.:/(a::Real, b::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/elementary_operations/#Base.:/-Tuple{Real, AbstractUncertainValue}","page":"Elementary mathematical operations","title":"Base.:/","text":"Base.:/(a::Real, b::AbstractUncertainValue) -> UncertainValue\n\nDivision operator for between scalars and uncertain values. \n\nComputes the element-wise quotients between a and b for a default of n = 10000 realizations of b, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise quotients.\n\nUse the /(a, b, n) syntax to tune the number (n) of draws.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Base.:/-Tuple{Real, AbstractUncertainValue, Int64}","page":"Elementary mathematical operations","title":"Base.:/","text":"Base.:/(a::Real, b::AbstractUncertainValue, n::Int) -> UncertainValue\n\nDivision operator for scalar-uncertain value pairs. \n\nComputes the element-wise quotients between a and b for n realizations of b, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise quotients.\n\nCall this function using the /(a, b, n) syntax.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Base.:/(a::AbstractUncertainValue, b::Real)\nBase.:/(a::AbstractUncertainValue, b::Real, n::Int)","category":"page"},{"location":"mathematics/elementary_operations/#Base.:/-Tuple{AbstractUncertainValue, Real}","page":"Elementary mathematical operations","title":"Base.:/","text":"Base.:/(a::AbstractUncertainValue, b::Real) -> UncertainValue\n\nDivision operator for between uncertain values and scalars. \n\nComputes the element-wise quotients between a and b for a default of n = 10000 realizations of a, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise quotients.\n\nUse the /(a, b, n) syntax to tune the number (n) of draws.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Base.:/-Tuple{AbstractUncertainValue, Real, Int64}","page":"Elementary mathematical operations","title":"Base.:/","text":"Base.:/(a::AbstractUncertainValue, b::Real, n::Int) -> UncertainValue\n\nDivision operator for scalar-uncertain value pairs. \n\nComputes the element-wise quotients between a and b for n realizations of a, then returns an uncertain value based on a kernel density estimate to the  distribution of the element-wise quotients.\n\nCall this function using the /(a, b, n) syntax.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/elementary_operations/#Special-cases","page":"Elementary mathematical operations","title":"Special cases","text":"","category":"section"},{"location":"mathematics/elementary_operations/#CertainValues","page":"Elementary mathematical operations","title":"CertainValues","text":"","category":"section"},{"location":"mathematics/elementary_operations/","page":"Elementary mathematical operations","title":"Elementary mathematical operations","text":"Performing elementary operations with CertainValues behaves as for scalars.","category":"page"},{"location":"resampling/models/resampling_with_models/","page":"-","title":"-","text":"Uncertain datasets can be sampled using various models. ","category":"page"},{"location":"resampling/models/resampling_with_models/","page":"-","title":"-","text":"The idea behind the model resampling approach is to first resample your dataset, given  some constraints on the furnishing distributions of each uncertain value in the dataset.  Then, instead of returning the actual realization, a model fit to the raw realization is returned.","category":"page"},{"location":"resampling/models/resampling_with_models/","page":"-","title":"-","text":"For example, say we have the following uncertain values.","category":"page"},{"location":"resampling/models/resampling_with_models/","page":"-","title":"-","text":"uvals = [UncertainValue(Normal, rand(), rand()) for i = 1:20]\nudata = UncertainValueDataset(uvals)","category":"page"},{"location":"resampling/models/resampling_with_models/","page":"-","title":"-","text":"A realization of that dataset, where the i-th realized value is drawn from within the  support of the distribution furnishing the i-th uncertain value, is created as follows:","category":"page"},{"location":"resampling/models/resampling_with_models/","page":"-","title":"-","text":"r = resample(udata) #resample(udata, NoConstraint()) is equivalent","category":"page"},{"location":"resampling/models/resampling_with_models/","page":"-","title":"-","text":"Let's say that instead of getting back the raw realization, we wanted to fit a spline onto  it and return that. To do that, just supply a SplineModel() instance to resample. ","category":"page"},{"location":"resampling/models/resampling_with_models/","page":"-","title":"-","text":"r = resample(udata, SplineModel())","category":"page"},{"location":"uncertain_statistics/hypothesistests/mann_whitney_u_test/#Mann-Whitney-U-test","page":"Mann-Whitney U-test","title":"Mann-Whitney U-test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/mann_whitney_u_test/#Regular-test","page":"Mann-Whitney U-test","title":"Regular test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/mann_whitney_u_test/","page":"Mann-Whitney U-test","title":"Mann-Whitney U-test","text":"MannWhitneyUTest(d1::AbstractUncertainValue, d2::AbstractUncertainValue, n::Int = 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/mann_whitney_u_test/#HypothesisTests.MannWhitneyUTest","page":"Mann-Whitney U-test","title":"HypothesisTests.MannWhitneyUTest","text":"MannWhitneyUTest(d1::AbstractUncertainValue, d2::AbstractUncertainValue,\n    n::Int = 1000) -> MannWhitneyUTest\n\nLet s1 and s2 be samples of n realisations from the distributions furnishing the uncertain values d1 and d2.\n\nPerform a Mann-Whitney U test of the null hypothesis that the probability that an observation drawn from the same population as s1 is greater than an observation drawn from the same population as s2 is equal to the probability that an observation drawn from the same population as s2 is greater than an observation drawn from the same population as s1 against the alternative hypothesis that these probabilities are not equal.\n\nThe Mann-Whitney U test is sometimes known as the Wilcoxon rank-sum test. When there are no tied ranks and ≤50 samples, or tied ranks and ≤10 samples, MannWhitneyUTest performs an exact Mann-Whitney U test. In all other cases, MannWhitneyUTest performs an approximate Mann-Whitney U test.\n\n\n\n\n\n","category":"function"},{"location":"uncertain_statistics/hypothesistests/mann_whitney_u_test/#Pooled-test","page":"Mann-Whitney U-test","title":"Pooled test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/mann_whitney_u_test/","page":"Mann-Whitney U-test","title":"Mann-Whitney U-test","text":"MannWhitneyUTestPooled(d1::UncertainDataset, d2::UncertainDataset, n::Int = 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/mann_whitney_u_test/#UncertainData.UncertainStatistics.MannWhitneyUTestPooled","page":"Mann-Whitney U-test","title":"UncertainData.UncertainStatistics.MannWhitneyUTestPooled","text":"MannWhitneyUTest(d1::UncertainDataset, d2::UncertainDataset,\n    n::Int = 1000) -> MannWhitneyUTest\n\nLet s_1_i be a sample of n realisations of the distribution furnishing the uncertain value d1[i], where i in 1 2 ldots N and N is the number of uncertain values in d1.  Next, gather the samples for all s_1_i in a pooled sample S_1.  Do the same for the second uncertain dataset d2, yielding the pooled sample  S_2.\n\nPerform a Mann-Whitney U test of the null hypothesis that the probability that an observation drawn from the same population as S_1 is greater than an observation drawn from the same population as S_2 is equal to the probability that an observation drawn from the same population as S_2 is greater than an observation drawn from the same population as S_1 against the alternative hypothesis that these probabilities are not equal.\n\nThe Mann-Whitney U test is sometimes known as the Wilcoxon rank-sum test. When there are no tied ranks and ≤50 samples, or tied ranks and ≤10 samples, MannWhitneyUTest performs an exact Mann-Whitney U test. In all other cases, MannWhitneyUTest performs an approximate Mann-Whitney U test.\n\n\n\n\n\n","category":"function"},{"location":"uncertain_statistics/hypothesistests/mann_whitney_u_test/#Element-wise-test","page":"Mann-Whitney U-test","title":"Element-wise test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/mann_whitney_u_test/","page":"Mann-Whitney U-test","title":"Mann-Whitney U-test","text":"MannWhitneyUTestElementWise(d1::UncertainDataset, d2::UncertainDataset, n::Int = 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/mann_whitney_u_test/#UncertainData.UncertainStatistics.MannWhitneyUTestElementWise","page":"Mann-Whitney U-test","title":"UncertainData.UncertainStatistics.MannWhitneyUTestElementWise","text":"MannWhitneyUTest(d1::UncertainDataset, d2::UncertainDataset,\n    n::Int = 1000) -> Vector{MannWhitneyUTest}\n\nAssume d1 and d2 consist of the same number of uncertain values. Let s_1_i be a sample of n realisations of the distribution furnishing the uncertain value d1[i], where i in 1 2 ldots N and N is the number of uncertain values in d1. Let s_2_i be the corresponding sample for d2[i]. This function\n\nPerform an element-wise Mann-Whitney U test of the null hypothesis that the probability that an observation drawn from the same population as s_1_i is greater than an observation drawn from the same population as s_2_i is equal to the probability that an observation drawn from the same population as s_2_i is greater than an observation drawn from the same population as s_1_i against the alternative hypothesis that these probabilities are not equal.\n\nThe Mann-Whitney U test is sometimes known as the Wilcoxon rank-sum test. When there are no tied ranks and ≤50 samples, or tied ranks and ≤10 samples, MannWhitneyUTest performs an exact Mann-Whitney U test. In all other cases, MannWhitneyUTest performs an approximate Mann-Whitney U test.\n\n\n\n\n\n","category":"function"},{"location":"resampling/sequential/resampling_indexvalue_sequential/#Resampling-syntax","page":"Resampling syntax","title":"Resampling syntax","text":"","category":"section"},{"location":"resampling/sequential/resampling_indexvalue_sequential/#Manually-resampling","page":"Resampling syntax","title":"Manually resampling","text":"","category":"section"},{"location":"resampling/sequential/resampling_indexvalue_sequential/","page":"Resampling syntax","title":"Resampling syntax","text":"Because both the indices and the values of UncertainIndexValueDatasets are  datasets themselves, you could manually resample them by accessing the indices and  values fields. This gives you full control of the resampling. ","category":"page"},{"location":"resampling/sequential/resampling_indexvalue_sequential/","page":"Resampling syntax","title":"Resampling syntax","text":"There are some built-in sampling routines you could use instead if you use cases are simple.","category":"page"},{"location":"resampling/sequential/resampling_indexvalue_sequential/#Built-in-resampling-methods","page":"Resampling syntax","title":"Built-in resampling methods","text":"","category":"section"},{"location":"resampling/sequential/resampling_indexvalue_sequential/","page":"Resampling syntax","title":"Resampling syntax","text":"Sequential constraints are always interpreted as belonging to the indices of an  uncertain index-value dataset.  Therefore, when using the built-in function to resample an index-value dataset, you can use  the same syntax as for any other  uncertain value dataset, but provide an additional sequential constraint after the regular constraints. The  order of arguments is always 1) regular constraints, then 2) the sequential constraint.","category":"page"},{"location":"resampling/sequential/resampling_indexvalue_sequential/","page":"Resampling syntax","title":"Resampling syntax","text":"The following examples illustrates the syntax. Assume udata is an  UncertainIndexValueDataset instance. Then","category":"page"},{"location":"resampling/sequential/resampling_indexvalue_sequential/","page":"Resampling syntax","title":"Resampling syntax","text":"resample(udata, StrictlyIncreasing()) enforces the sequential constraint only to the    indices, applying no constraint(s) on the furnishing distributions of either the    indices nor the values of the dataset.\nresample(udata, StrictlyIncreasing(), TruncateQuantile(0.1, 0.9)) applies the truncating    constraint both the indices and the values, then enforces the sequential constraint    on the indices. \nresample(udata, StrictlyIncreasing(), TruncateStd(2), TruncateQuantile(0.1, 0.9))    applies separate truncating constraints to the indices and to the values, then    enforces the sequential constraint on the indices. \nresample(udata, StrictlyIncreasing(), NoConstraint(), TruncateQuantile(0.1, 0.9)) does    the same as above, but NoConstraint() indicates that no constraints are applied to    the indices prior to drawing the sequential realization of the indices. ","category":"page"},{"location":"resampling/sequential/resampling_indexvalue_sequential/","page":"Resampling syntax","title":"Resampling syntax","text":"Of course, like for uncertain value datasets, you can also apply individual constraints to  each index and each value in the dataset, by providing a vector of constraints instead  of a single constraint.","category":"page"},{"location":"resampling/sequential/resampling_indexvalue_sequential/","page":"Resampling syntax","title":"Resampling syntax","text":"Currently implemented sequential constraints: ","category":"page"},{"location":"resampling/sequential/resampling_indexvalue_sequential/","page":"Resampling syntax","title":"Resampling syntax","text":"StrictlyIncreasing \nStrictlyDecreasing","category":"page"},{"location":"uncertain_statistics/hypothesistests/approximate_twosample_kolmogorov_smirnov_test/#Approximate-two-sample-Kolmogorov-Smirnov-test","page":"Approximate two-sample Kolmogorov-Smirnov test","title":"Approximate two-sample Kolmogorov-Smirnov test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/approximate_twosample_kolmogorov_smirnov_test/#Pooled-test","page":"Approximate two-sample Kolmogorov-Smirnov test","title":"Pooled test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/approximate_twosample_kolmogorov_smirnov_test/","page":"Approximate two-sample Kolmogorov-Smirnov test","title":"Approximate two-sample Kolmogorov-Smirnov test","text":"ApproximateTwoSampleKSTestPooled(d1::UncertainDataset, d2::UncertainDataset, n::Int = 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/approximate_twosample_kolmogorov_smirnov_test/#UncertainData.UncertainStatistics.ApproximateTwoSampleKSTestPooled","page":"Approximate two-sample Kolmogorov-Smirnov test","title":"UncertainData.UncertainStatistics.ApproximateTwoSampleKSTestPooled","text":"ApproximateTwoSampleKSTestPooled(d1::UncertainDataset,\n    d2::UncertainDataset, n::Int = 1000) -> ApproximateTwoSampleKSTest\n\nFirst, draw n realisations of each uncertain value in d1, then separately draw n realisations of each uncertain value in d2. Then, pool all realisations for d1 together and all realisations of d2 together.\n\nOn the pooled realisations, perform an asymptotic two-sample Kolmogorov–Smirnov-test of the null hypothesis that the distribution furnishing the d1 value pool represents the same distribution as the distribution furnishing the d2 value pool, against the alternative hypothesis that the furnishing distributions are different.\n\n\n\n\n\n","category":"function"},{"location":"uncertain_statistics/hypothesistests/approximate_twosample_kolmogorov_smirnov_test/#Element-wise-test","page":"Approximate two-sample Kolmogorov-Smirnov test","title":"Element-wise test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/approximate_twosample_kolmogorov_smirnov_test/","page":"Approximate two-sample Kolmogorov-Smirnov test","title":"Approximate two-sample Kolmogorov-Smirnov test","text":"ApproximateTwoSampleKSTestElementWise(d1::UncertainDataset, d2::UncertainDataset, n::Int = 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/approximate_twosample_kolmogorov_smirnov_test/#UncertainData.UncertainStatistics.ApproximateTwoSampleKSTestElementWise","page":"Approximate two-sample Kolmogorov-Smirnov test","title":"UncertainData.UncertainStatistics.ApproximateTwoSampleKSTestElementWise","text":"ApproximateTwoSampleKSTestElementWise(d1::UncertainDataset,\n    d2::UncertainDataset, n::Int = 1000) -> Vector{ApproximateTwoSampleKSTest}\n\nAssuming d1 and d2 contain the same number of uncertain observations, draw n realisations of each uncertain value in d1, then separately and separately draw n realisations of each uncertain value in d2.\n\nThen, perform an asymptotic two-sample Kolmogorov–Smirnov-test of the null hypothesis that the uncertain values in d1 and d2 come from the same distribution against the alternative hypothesis that the (element-wise) values in  d1 and d2 come from different distributions.\n\nThe test is performed pairwise, i.e. ApproximateTwoSampleKSTest(d1[i], d2[i]) with n draws for the i-ith pair of uncertain values.\n\n\n\n\n\n","category":"function"},{"location":"implementing_algorithms_for_uncertaindata/#Extending-existing-algorithms-for-uncertain-data-types","page":"Extending existing algorithms for uncertain data types","title":"Extending existing algorithms for uncertain data types","text":"","category":"section"},{"location":"implementing_algorithms_for_uncertaindata/","page":"Extending existing algorithms for uncertain data types","title":"Extending existing algorithms for uncertain data types","text":"Do you already have an algorithm computing some statistic that you want to obtain uncertainty estimates for? Simply use Julia's multiple dispatch and create a version of the algorithm function that accepts the AbstractUncertainValue and AbstractUncertainDataset types, along with a SamplingConstraints specifying how the uncertain values are should be resampled.","category":"page"},{"location":"implementing_algorithms_for_uncertaindata/","page":"Extending existing algorithms for uncertain data types","title":"Extending existing algorithms for uncertain data types","text":"A basic function skeleton could be","category":"page"},{"location":"implementing_algorithms_for_uncertaindata/","page":"Extending existing algorithms for uncertain data types","title":"Extending existing algorithms for uncertain data types","text":"# Some algorithm computing a statistic for a scalar-valued vector\nfunction myalgorithm(dataset::Vector{T}; kwargs...) where T\n    # some algorithm returning a single-valued statistic\nend\n\n# Applying the algorithm to an ensemble of realisations from\n# an uncertain dataset, given a sampling constraint.\nfunction myalgorithm(d::UncertainDataset, constraint::C;\n        n_ensemble_realisations = 100, kwargs...)\n        where {C <: SamplingConstraint}\n\n    ensemble_stats = zeros(n_ensemble_realisations)\n\n    for i in 1:n_ensemble_realisations\n        ensemble_stats[i] = myalgorithm(resample(d, constraint); kwargs...)\n    end\n\n    return ensemble_stats\nend","category":"page"},{"location":"publications/#Publications/software","page":"Publications/software","title":"Publications/software","text":"","category":"section"},{"location":"publications/#Scientific-papers","page":"Publications/software","title":"Scientific papers","text":"","category":"section"},{"location":"publications/","page":"Publications/software","title":"Publications/software","text":"Vasskog, Kristian, John‐Inge Svendsen, Jan Mangerud, Kristian Agasøster Haaga,    Arve Svean, and Eva Maria Lunnan. \"Evidence of early deglaciation (18 000 cal a bp)    and a postglacial relative sea‐level curve from southern Karmøy, south‐west Norway.\"    Journal of Quaternary Science    (2019).","category":"page"},{"location":"publications/#Software","page":"Publications/software","title":"Software","text":"","category":"section"},{"location":"publications/","page":"Publications/software","title":"Publications/software","text":"CausalityTools.jl version >= 0.3.0   uses UncertainData.jl to detect causal relationships between time series with    uncertainties.","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/#uncertain_value_types","page":"Uncertain value types","title":"Uncertain value types","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"The core concept of UncertainData is to replace an uncertain data value with a  probability distribution describing the point's uncertainty.","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"The following types of uncertain values are currently implemented:","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"Theoretical distributions with known parameters.\nTheoretical distributions with parameters fitted to empirical data.\nKernel density estimated distributions estimated from empirical data.\nWeighted (nested) populations where the probability of    drawing values are already known, so you can skip kernel density estimation. Populations can be    nested, and may contain numerical values, uncertain values or both.\nValues without uncertainty have their own dedicated    CertainValue type, so that you can uncertain values with certain values.\nMeasurement instances from Measurements.jl are treated as normal distributions with known mean and standard devation.","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/#Some-quick-examples","page":"Uncertain value types","title":"Some quick examples","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"See also the extended examples!","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/#Kernel-density-estimation-(KDE)","page":"Uncertain value types","title":"Kernel density estimation (KDE)","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"If the data doesn't follow an obvious theoretical distribution, the recommended course of action is to represent the uncertain value with a kernel density estimate of the distribution.","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"using Distributions, UncertainData, KernelDensity\n\n# Generate some random data from a normal distribution, so that we get a\n# histogram resembling a normal distribution.\nsome_sample = rand(Normal(), 1000)\n\n# Uncertain value represented by a kernel density estimate (it is inferred\n# that KDE is wanted when no distribution is provided to the constructor).\nuv = UncertainValue(some_sample)","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"using Distributions, UncertainData\n\n# Generate some random data from a normal distribution, so that we get a\n# histogram resembling a normal distribution.\nsome_sample = rand(Normal(), 1000)\n\n\n# Specify that we want a kernel density estimate representation\nuv = UncertainValue(UnivariateKDE, some_sample)","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/#Populations","page":"Uncertain value types","title":"Populations","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"If you have a population of values where each value has a probability assigned to it,  you can construct an uncertain value by providing the values and uncertainties as  two equal-length vectors to the constructor. Weights are normalized by default.","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"vals = rand(100)\nweights = rand(100)\np = UncertainValue(vals, weights)","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/#Fitting-a-theoretical-distribution","page":"Uncertain value types","title":"Fitting a theoretical distribution","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"If your data has a histogram closely resembling some theoretical distribution, the uncertain value may be represented by fitting such a distribution to the data.","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"using Distributions, UncertainData\n\n# Generate some random data from a normal distribution, so that we get a\n# histogram resembling a normal distribution.\nsome_sample = rand(Normal(), 1000)\n\n# Uncertain value represented by a theoretical normal distribution with\n# parameters fitted to the data.\nuv = UncertainValue(Normal, some_sample)","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"using Distributions, UncertainData\n\n# Generate some random data from a gamma distribution, so that we get a\n# histogram resembling a gamma distribution.\nsome_sample = rand(Gamma(), 1000)\n\n# Uncertain value represented by a theoretical gamma distribution with\n# parameters fitted to the data.\nuv = UncertainValue(Gamma, some_sample)","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/#Theoretical-distribution-with-known-parameters","page":"Uncertain value types","title":"Theoretical distribution with known parameters","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"It is common when working with uncertain data found in the scientific literature that data value are stated to follow a distribution with given parameters. For example, a data value may be given as normal distribution with a given mean μ = 2.2 and standard deviation σ = 0.3.","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"# Uncertain value represented by a theoretical normal distribution with\n# known parameters μ = 2.2 and σ = 0.3\nuv = UncertainValue(Normal, 2.2, 0.3)","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"# Uncertain value represented by a theoretical gamma distribution with\n# known parameters α = 2.1 and θ = 3.1\nuv = UncertainValue(Gamma, 2.1, 3.1)","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"# Uncertain value represented by a theoretical binomial distribution with\n# known parameters p = 32 and p = 0.13\nuv = UncertainValue(Binomial, 32, 0.13)","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/#Values-with-no-uncertainty","page":"Uncertain value types","title":"Values with no uncertainty","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"Scalars with no uncertainty can also be represented. ","category":"page"},{"location":"uncertain_values/uncertainvalues_overview/","page":"Uncertain value types","title":"Uncertain value types","text":"c1, c2 = UncertainValue(2), UncertainValue(2.2)","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/#Generic-uncertain-datasets","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"UncertainDatasets is a generic uncertain dataset type that has no explicit index  associated with its uncertain values.","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"It inherits all the behaviour of AbstractUncertainValueDataset, but may lack some  functionality that an UncertainValueDataset has.","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"If you don't care about distinguishing between  indices and data values, constructing instances of this data type requires five less key  presses than UncertainValueDataset.","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/#Documentation","page":"Generic uncertain datasets","title":"Documentation","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"UncertainDataset","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/#UncertainData.UncertainDatasets.UncertainDataset","page":"Generic uncertain datasets","title":"UncertainData.UncertainDatasets.UncertainDataset","text":"UncertainDataset\n\nGeneric dataset containing uncertain values.\n\nFields\n\nvalues::AbstractVector{<:AbstractUncertainValue}: The uncertain values.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_datasets/uncertain_dataset/#Defining-an-UncertainDataset-from-a-collection-of-uncertain-values","page":"Generic uncertain datasets","title":"Defining an UncertainDataset from a collection of uncertain values","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"Let's create a random walk and pretend it represents fluctuations in the mean of an observed dataset. Assume that each data point is normally distributed, and that the i-th observation has standard deviation sigma_i in 03 05.","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"Representing these data as an UncertainDataset is done as follows:","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"using UncertainData, Plots\n\n# Create a random walk of 55 steps\nn = 55\nrw = cumsum(rand(Normal(), n))\n\n# Represent each value of the random walk as an uncertain value and\n# collect them in an UncertainDataset\ndist = Uniform(0.3, 0.5)\nuncertainvals = [UncertainValue(Normal, rw[i], rand(dist)) for i = 1:n]\nD = UncertainDataset(uncertainvals)","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"By default, plotting the dataset will plot the median values (only for scatter plots) along with the 33rd to 67th percentile range error bars.","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"plot(D)","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"(Image: )","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"You can customize the error bars by explicitly providing the quantiles:","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"plot(D, [0.05, 0.95])","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"(Image: )","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/#Example-2:-mixing-different-types-of-uncertain-values","page":"Generic uncertain datasets","title":"Example 2: mixing different types of uncertain values","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"Mixing different types of uncertain values also works. Let's create a dataset of uncertain values constructed in different ways.","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"using UncertainData, Distributions, Plots\n\n# Theoretical distributions\no1 = UncertainValue(Normal, 0, 0.5)\no2 = UncertainValue(Normal, 2, 0.3)\no3 = UncertainValue(Uniform, 0, 4)\n\n# Theoretical distributions fitted to data\no4 = UncertainValue(Uniform, rand(Uniform(), 100))\no5 = UncertainValue(Gamma, rand(Gamma(2, 3), 5000))\n\n# Kernel density estimated distributions for some more complex data.\nM1 = MixtureModel([Normal(-5, 0.5), Gamma(2, 5), Normal(12, 0.2)])\nM2 = MixtureModel([Normal(-2, 0.1), Normal(1, 0.2)])\no6 = UncertainValue(rand(M1, 1000))\no7 = UncertainValue(rand(M2, 1000))\n\nD = UncertainDataset([o1, o2, o3, o4, o5, o6, o7])","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"Now, plot the uncertain dataset.","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"using Plots\n# Initialise the plot\np = plot(legend = false, xlabel = \"time step\", ylabel = \"value\")\n\n# Plot the mean of the dataset\nplot!([median(D[i]) for i = 1:length(D)], label = \"mean\", lc = :blue, lw = 3)\n\nfor i = 1:200\n    plot!(p, resample(D), lw = 0.4, lα = 0.1, lc = :black)\nend\n\np","category":"page"},{"location":"uncertain_datasets/uncertain_dataset/","page":"Generic uncertain datasets","title":"Generic uncertain datasets","text":"(Image: )","category":"page"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_value_collections/#applying_resampling_scheme_uncertain_value_collections","page":"Resampling with schemes","title":"Resampling with schemes","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_value_collections/","page":"Resampling with schemes","title":"Resampling with schemes","text":"For some uncertain collections and datasets, special resampling types are available to make resampling easier.","category":"page"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_value_collections/#Constrained-resampling","page":"Resampling with schemes","title":"Constrained resampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_value_collections/","page":"Resampling with schemes","title":"Resampling with schemes","text":"resample(::AbstractUncertainValueDataset, ::ConstrainedValueResampling{1})","category":"page"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_value_collections/#UncertainData.Resampling.resample-Tuple{AbstractUncertainValueDataset, ConstrainedValueResampling{1}}","page":"Resampling with schemes","title":"UncertainData.Resampling.resample","text":"resample(x::AbstractUncertainValueDataset, resampling::ConstrainedValueResampling)\n\nResample x by first constraining the supports of the distributions/populations  furnishing the uncertain values, then drawing samples from the limited supports.\n\nSampling is done without assuming any sequential dependence between the  elements of x, such no that no dependence is introduced in the draws beyond what  is potentially already present in the collection of values.\n\nExample\n\n# Some example data \nN = 50\nx_uncertain = [UncertainValue(Normal, x, rand(Uniform(0.1, 0.8))) for x in rand(N)]\ny_uncertain = [UncertainValue(Normal, y, rand(Uniform(0.1, 0.8))) for y in rand(N)]\nx = UncertainValueDataset(x_uncertain)\ny = UncertainValueDataset(y_uncertain)\n\n# Resample with different constraints\nresample(x, ConstrainedValueResampling(TruncateStd(1.5))\nresample(y, ConstrainedValueResampling(TruncateStd(0.5))\nresample(y, ConstrainedValueResampling(TruncateQuantiles(0.2, 0.8))\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/hypothesistests/jarque_bera_test/#Jarque-Bera-test","page":"Jarque-Bera test","title":"Jarque-Bera test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/jarque_bera_test/#Regular-test","page":"Jarque-Bera test","title":"Regular test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/jarque_bera_test/","page":"Jarque-Bera test","title":"Jarque-Bera test","text":"JarqueBeraTest(d::AbstractUncertainValue, n::Int = 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/jarque_bera_test/#HypothesisTests.JarqueBeraTest","page":"Jarque-Bera test","title":"HypothesisTests.JarqueBeraTest","text":"JarqueBeraTest(d::AbstractUncertainValue, n::Int = 1000) -> JarqueBeraTest\n\nCompute the Jarque-Bera statistic to test the null hypothesis that an uncertain value is normally distributed.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_statistics/hypothesistests/jarque_bera_test/#Pooled-test","page":"Jarque-Bera test","title":"Pooled test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/jarque_bera_test/","page":"Jarque-Bera test","title":"Jarque-Bera test","text":"JarqueBeraTestPooled(ud::UncertainDataset, n::Int = 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/jarque_bera_test/#UncertainData.UncertainStatistics.JarqueBeraTestPooled","page":"Jarque-Bera test","title":"UncertainData.UncertainStatistics.JarqueBeraTestPooled","text":"JarqueBeraTestPooled(ud::UncertainDataset, n::Int = 1000) -> JarqueBeraTest\n\nFirst, draw n realisations of each uncertain value in ud and pool them together. Then, compute the Jarque-Bera statistic to test the null hypothesis that the values of the pool are normally distributed.\n\n\n\n\n\n","category":"function"},{"location":"uncertain_statistics/hypothesistests/jarque_bera_test/#Element-wise-test","page":"Jarque-Bera test","title":"Element-wise test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/jarque_bera_test/","page":"Jarque-Bera test","title":"Jarque-Bera test","text":"JarqueBeraTestElementWise(ud::UncertainDataset, n::Int = 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/jarque_bera_test/#UncertainData.UncertainStatistics.JarqueBeraTestElementWise","page":"Jarque-Bera test","title":"UncertainData.UncertainStatistics.JarqueBeraTestElementWise","text":"OneSampleADTestElementWise(ud::UncertainDataset,\n    n::Int = 1000) -> Vector{JarqueBeraTest}\n\nFirst, draw n realisations of each uncertain value in ud, keeping one pool of values for each uncertain value.\n\nThen, compute the Jarque-Bera statistic to test the null hypothesis that each value pool is normally distributed.\n\n\n\n\n\n","category":"function"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#uncertain_value_theoretical_distribution","page":"Theoretical distributions","title":"Theoretical distributions","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"It is common in the scientific literature to encounter uncertain data values which are reported as following a specific distribution. For example, an author report the mean and standard deviation of a value stated to follow a normal distribution. UncertainData makes it easy to represent such values!","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#Generic-constructors","page":"Theoretical distributions","title":"Generic constructors","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#From-instances-of-distributions","page":"Theoretical distributions","title":"From instances of distributions","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"UncertainValue(d::Distributions.Distribution)","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#UncertainData.UncertainValues.UncertainValue-Tuple{Distribution}","page":"Theoretical distributions","title":"UncertainData.UncertainValues.UncertainValue","text":"UncertainValue(d::Distributions.Distribution)\n\nConstruct an uncertain value from an instance of a distribution. If a specific uncertain value type has not been implemented, the number of parameters is  determined from the distribution and an instance of one of the following types is returned: \n\nUncertainScalarTheoreticalOneParameter\nUncertainScalarTheoreticalTwoParameter\nUncertainScalarTheoreticalThreeParameter\n\nExamples\n\nUncertainValue(Normal(0, 1))\nUncertainValue(Gamma(4, 5.1))\nUncertainValue(Binomial, 8, 0.2)\n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#Defined-from-scratch","page":"Theoretical distributions","title":"Defined from scratch","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"Uncertain values represented by theoretical distributions may be constructed using the two-parameter or three-parameter constructors UncertainValue(d::Type{D}, a<:Number, b<:Number) or UncertainValue(d::Type{D}, a<:Number, b<:Number, c<:Number) (see below). Parameters are provided to the constructor in the same order as for constructing  the equivalent distributions in Distributions.jl.","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#Two-parameter-distributions","page":"Theoretical distributions","title":"Two-parameter distributions","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"UncertainValue(distribution::Type{D}, a::T1, b::T2; kwargs...) where {T1<:Number, T2 <: Number, D<:Distribution}","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#UncertainData.UncertainValues.UncertainValue-Union{Tuple{D}, Tuple{T2}, Tuple{T1}, Tuple{Type{D}, T1, T2}} where {T1<:Number, T2<:Number, D<:Distribution}","page":"Theoretical distributions","title":"UncertainData.UncertainValues.UncertainValue","text":"UncertainValue(distribution::Type{D}, a::T1, b::T2;\n    kwargs...) where {T1<:Number, T2 <: Number, D<:Distribution}\n\nConstructor for two-parameter distributions\n\nUncertainValues are currently implemented for the following two-parameter distributions: Uniform, Normal, Binomial, Beta, BetaPrime, Gamma, and Frechet.\n\nArguments\n\na, b: Generic parameters whose meaning varies depending   on what distribution is provided. See the list below.\ndistribution: A valid univariate distribution from Distributions.jl.\n\nPrecisely what  a and b are depends on which distribution is provided.\n\nUncertainValue(Normal, μ, σ) returns an UncertainScalarNormallyDistributed instance.\nUncertainValue(Uniform, lower, upper) returns an UncertainScalarUniformlyDistributed instance.\nUncertainValue(Beta, α, β) returns an UncertainScalarBetaDistributed instance.\nUncertainValue(BetaPrime, α, β) returns an UncertainScalarBetaPrimeDistributed instance.\nUncertainValue(Gamma, α, θ) returns an UncertainScalarGammaDistributed instance.\nUncertainValue(Frechet, α, θ) returns an UncertainScalarFrechetDistributed instance.\nUncertainValue(Binomial, n, p) returns an UncertainScalarBinomialDistributed instance.\n\nKeyword arguments\n\nnσ: If distribution <: Distributions.Normal, then how many standard   deviations away from μ does lower and upper (i.e. both, because   they are the same distance away from μ) represent?\ntolerance: A threshold determining how symmetric the uncertainties   must be in order to allow the construction of  Normal distribution   (upper - lower > threshold is required).\ntrunc_lower: Lower truncation bound for distributions with infinite   support. Defaults to -Inf.\ntrunc_upper: Upper truncation bound for distributions with infinite   support. Defaults to Inf.\n\nExamples\n\nNormal distribution\n\nNormal distributions are formed by using the constructor UncertainValue(μ, σ, Normal; kwargs...). This gives a normal distribution with mean μ and standard deviation σ/nσ (nσ must be given as a keyword argument).\n\n# A normal distribution with mean = 2.3 and standard deviation 0.3.\nUncertainValue(2.3, 0.3, Normal)\n\n# A normal distribution with mean 2.3 and standard deviation 0.3/2.\nUncertainValue(2.3, 0.3, Normal, nσ = 2)\n\n# A normal distribution with mean 2.3 and standard deviation = 0.3,\ntruncated to the interval `[1, 3]`.\nUncertainValue(2.3, 0.3, Normal, trunc_lower = 1.0, trunc_upper = 3.0)\n\nUniform distribution\n\nUniform distributions are formed using the UncertainValue(lower, upper, Uniform) constructor.\n\n#  A uniform distribution on `[2, 3]`\nUncertainValue(-2, 3, Uniform)\n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#Three-parameter-distributions","page":"Theoretical distributions","title":"Three-parameter distributions","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"UncertainValue(distribution::Type{D}, a::T1, b::T2, c::T3; kwargs...) where {T1<:Number, T2<:Number, T3<:Number, D<:Distribution}","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#UncertainData.UncertainValues.UncertainValue-Union{Tuple{D}, Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{Type{D}, T1, T2, T3}} where {T1<:Number, T2<:Number, T3<:Number, D<:Distribution}","page":"Theoretical distributions","title":"UncertainData.UncertainValues.UncertainValue","text":"UncertainValue(distribution::Type{D}, a::T1, b::T2, c::T3;\n    kwargs...) where {T1<:Number, T2<:Number, T3<:Number, D<:Distribution}\n\nConstructor for three-parameter distributions\n\nCurrently implemented distributions are BetaBinomial.\n\nArguments\n\na, b, c: Generic parameters whose meaning varies depending   on what distribution is provided. See the list below.\ndistribution: A valid univariate distribution from Distributions.jl.\n\nPrecisely what a, b and c are depends on which distribution is provided.\n\nUncertainValue(BetaBinomial, n, α, β) returns an UncertainScalarBetaBinomialDistributed instance.\n\nKeyword arguments\n\nnσ: If distribution <: Distributions.Normal, then how many standard   deviations away from μ does lower and upper (i.e. both, because   they are the same distance away from μ) represent?\ntolerance: A threshold determining how symmetric the uncertainties   must be in order to allow the construction of  Normal distribution   (upper - lower > threshold is required).\ntrunc_lower: Lower truncation bound for distributions with infinite   support. Defaults to -Inf.\ntrunc_upper: Upper truncation bound for distributions with infinite   support. Defaults to Inf.\n\nExamples\n\nBetaBinomial distribution\n\nNormal distributions are formed by using the constructor UncertainValue(μ, σ, Normal; kwargs...). This gives a normal distribution with mean μ and standard deviation σ/nσ (nσ must be given as a keyword argument).\n\n# A beta binomial distribution with n = 100 trials and parameters α = 2.3 and\n# β = 5\nUncertainValue(100, 2.3, 5, BetaBinomial)\n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#Type-documentation","page":"Theoretical distributions","title":"Type documentation","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"UncertainScalarBetaBinomialDistributed\nUncertainScalarBetaDistributed\nUncertainScalarBetaPrimeDistributed\nUncertainScalarBinomialDistributed\nUncertainScalarFrechetDistributed\nUncertainScalarGammaDistributed\nUncertainScalarNormallyDistributed\nUncertainScalarUniformlyDistributed","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#UncertainData.UncertainValues.UncertainScalarBetaBinomialDistributed","page":"Theoretical distributions","title":"UncertainData.UncertainValues.UncertainScalarBetaBinomialDistributed","text":"Uncertain value represented by a beta binomial distribution.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#UncertainData.UncertainValues.UncertainScalarBetaDistributed","page":"Theoretical distributions","title":"UncertainData.UncertainValues.UncertainScalarBetaDistributed","text":"Uncertain value represented by a beta distribution.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#UncertainData.UncertainValues.UncertainScalarBetaPrimeDistributed","page":"Theoretical distributions","title":"UncertainData.UncertainValues.UncertainScalarBetaPrimeDistributed","text":"Uncertain value represented by a beta prime distribution.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#UncertainData.UncertainValues.UncertainScalarBinomialDistributed","page":"Theoretical distributions","title":"UncertainData.UncertainValues.UncertainScalarBinomialDistributed","text":"Uncertain value represented by a binomial distribution.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#UncertainData.UncertainValues.UncertainScalarFrechetDistributed","page":"Theoretical distributions","title":"UncertainData.UncertainValues.UncertainScalarFrechetDistributed","text":"Uncertain value represented by a Fréchet distribution.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#UncertainData.UncertainValues.UncertainScalarGammaDistributed","page":"Theoretical distributions","title":"UncertainData.UncertainValues.UncertainScalarGammaDistributed","text":"Uncertain value represented by a gamma distribution.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#UncertainData.UncertainValues.UncertainScalarNormallyDistributed","page":"Theoretical distributions","title":"UncertainData.UncertainValues.UncertainScalarNormallyDistributed","text":"Uncertain value represented by a normal distribution.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#UncertainData.UncertainValues.UncertainScalarUniformlyDistributed","page":"Theoretical distributions","title":"UncertainData.UncertainValues.UncertainScalarUniformlyDistributed","text":"Uncertain value represented by a uniform distribution.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#List-of-supported-distributions","page":"Theoretical distributions","title":"List of supported distributions","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"Supported distributions are:","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"Uniform\nNormal\nGamma\nBeta\nBetaPrime\nFrechet\nBinomial\nBetaBinomial","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"More distributions will be added in the future!.","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/#Examples","page":"Theoretical distributions","title":"Examples","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"# Uncertain value generated by a uniform distribution on [-5.0, 5.1].\nuv = UncertainValue(Uniform, -5.0, 5.1)","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"# Uncertain value generated by a normal distribution with parameters μ = -2 and\n# σ = 0.5.\nuv = UncertainValue(Normal, -2, 0.5)","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"# Uncertain value generated by a gamma distribution with parameters α = 2.2\n# and θ = 3.\nuv = UncertainValue(Gamma, 2.2, 3)","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"# Uncertain value generated by a beta distribution with parameters α = 1.5\n# and β = 3.5\nuv = UncertainValue(Beta, 1.5, 3.5)","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"# Uncertain value generated by a beta prime distribution with parameters α = 1.7\n# and β = 3.2\nuv = UncertainValue(Beta, 1.7, 3.2)","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"# Uncertain value generated by a Fréchet distribution with parameters α = 2.1\n# and θ = 4\nuv = UncertainValue(Beta, 2.1, 4)","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"# Uncertain value generated by binomial distribution with n = 28 trials and\n# probability p = 0.2 of success in individual trials.\nuv = UncertainValue(Binomial, 28, 0.2)","category":"page"},{"location":"uncertain_values/uncertainvalues_theoreticaldistributions/","page":"Theoretical distributions","title":"Theoretical distributions","text":"# Creates an uncertain value generated by a beta-binomial distribution with\n# n = 28 trials, and parameters α = 1.5 and β = 3.5.\nuv = UncertainValue(BetaBinomial, 28, 3.3, 4.4)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#pairs_dataset_estimate_statistics","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"These estimators operate on pairs of uncertain value collections.  Each element of such a collection can be an uncertain value of any type, such as populations,  theoretical distributions,  KDE distributions or  fitted distributions.","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"The methods compute the statistic in question by drawing a length-k realisation of each of the k-element collections. Realisations are drawn by sampling each uncertain point in the collections independently. The statistic is then computed on either a single pair of such realisations (yielding a single value for the statistic) or over multiple pairs of realisations (yielding a distribution of the statistic).","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"Within each collection, point are always sampled independently according to their  furnishing distributions, unless sampling constraints are provided (not yet implemented).","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#syntax_statistics_collection_pairs","page":"Pairwise statistics on uncertain data collections","title":"Syntax","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"The syntax for estimating of a statistic f on uncertain value collections x and y is","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"f(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, args..., n::Int; kwargs...), which draws independent length-n draws of x and y, then estimates the statistic f for those draws.","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Methods","page":"Pairwise statistics on uncertain data collections","title":"Methods","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Covariance","page":"Pairwise statistics on uncertain data collections","title":"Covariance","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"cov(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int; corrected::Bool = true)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Statistics.cov-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"Statistics.cov","text":"cov(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int; corrected::Bool = true)\n\nObtain a distribution on the covariance between two collections of  uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute the covariance between the two length-L draws.\n\nThis yields n estimates of the covariance between n independent pairs  of realisations of x and y. The n-member distribution of covariance  estimates is returned as a vector.\n\nIf corrected is true (the default) then the sum is scaled with n - 1 for  each pair of draws, whereas the sum is scaled with n if corrected is false  where n = length(x).\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Correlation-(Pearson)","page":"Pairwise statistics on uncertain data collections","title":"Correlation (Pearson)","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"cor(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Statistics.cor-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"Statistics.cor","text":"cor(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)\n\nEstimate a distribution on Pearson's rank correlation coefficient between  two collections of uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute Pearson's rank correlation coefficient between the two length-L  draws.\n\nThis yields n estimates of Pearson's rank correlation coefficient  between n independent pairs of realisations of x and y. The  n-member distribution of correlation estimates is returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Correlation-(Kendall)","page":"Pairwise statistics on uncertain data collections","title":"Correlation (Kendall)","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"corkendall(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#StatsBase.corkendall-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"StatsBase.corkendall","text":"corkendall(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)\n\nEstimate a n-member distribution on Kendalls's rank correlation  coefficient between two collections of uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute Kendall's rank correlation coefficient between the two length-L  draws.\n\nThis yields n computations of Kendall's rank correlation coefficient  between n independent pairs of realisations of x and y. The  n-member distribution of correlation estimates is returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Correlation-(Spearman)","page":"Pairwise statistics on uncertain data collections","title":"Correlation (Spearman)","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"corspearman(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#StatsBase.corspearman-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"StatsBase.corspearman","text":"corspearman(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)\n\nEstimate a n-member distribution on Spearman's rank correlation  coefficient between two collections of uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute Spearman's rank correlation coefficient between the two length-L  draws.\n\nThis yields n estimates of Spearman's rank correlation coefficient  between n independent pairs of realisations of x and y. The  n-member distribution of correlation estimates is returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Count-non-equal","page":"Pairwise statistics on uncertain data collections","title":"Count non-equal","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"countne(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#StatsBase.countne-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"StatsBase.countne","text":"countne(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)\n\nEstimate a n-member distribution on the number of indices at which the elements of  two collections of uncertain values are not equal. \n\nThis is done by repeating the following procedure n times:\n\nDraw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nDraw a length-L realisation of y in the same manner.\nCount the number of indices at which the elements of the two length-L  draws are not equal.\n\nThis yields n counts of non-equal values between n pairs of independent  realisations of x and y. The n-member distribution of nonequal-value counts  is returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Count-equal","page":"Pairwise statistics on uncertain data collections","title":"Count equal","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"counteq(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#StatsBase.counteq-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"StatsBase.counteq","text":"counteq(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)\n\nEstimate a n-member distribution on the number of indices at which the elements of  two collections of uncertain values are equal.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCount the number of indices at which the elements of the two length-L  draws are equal.\n\nThis yields n counts of non-equal values between n pairs of independent  realisations of x and y. The n-member distribution of equal-value counts  is returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Maximum-absolute-deviation","page":"Pairwise statistics on uncertain data collections","title":"Maximum absolute deviation","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"maxad(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#StatsBase.maxad-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"StatsBase.maxad","text":"maxad(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution over the maximum absolute deviation between two  collections of uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute the maximum absolute deviation between the two   length-L draws.\n\nThis yields n estimates of the maximum absolute deviation between n independent pairs of realisations of x and y. The n-member  distribution of maximum absolute deviation estimates is  returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Mean-absolute-deviation","page":"Pairwise statistics on uncertain data collections","title":"Mean absolute deviation","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"meanad(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#StatsBase.meanad-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"StatsBase.meanad","text":"meanad(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution over the mean absolute deviation between two  collections of uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute the mean absolute deviation between the two   length-L draws.\n\nThis yields n estimates of the mean absolute deviation between n independent pairs of realisations of x and y. The n-member  distribution of mean absolute deviation estimates is  returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Mean-squared-deviation","page":"Pairwise statistics on uncertain data collections","title":"Mean squared deviation","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"msd(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#StatsBase.msd-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"StatsBase.msd","text":"msd(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution over the mean squared deviation between two  collections of uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute the mean squared deviation between the two   length-L draws.\n\nThis yields n estimates of the mean squared deviation between n independent pairs of realisations of x and y. The n-member  distribution of mean squared deviation estimates is  returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Peak-signal-to-noise-ratio","page":"Pairwise statistics on uncertain data collections","title":"Peak signal-to-noise ratio","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"psnr(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, maxv, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#StatsBase.psnr-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Any, Int64}","page":"Pairwise statistics on uncertain data collections","title":"StatsBase.psnr","text":"psnr(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, maxv, n::Int)\n\nObtain a distribution over the peak signal-to-noise ratio (PSNR) between two  collections of uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute the PSNR between the two length-L draws.\n\nThis yields n estimates of the peak signal-to-noise ratio between n independent pairs of realisations of x and y. The n-member  distribution of PSNR estimates is returned as a vector.\n\nThe PSNR is computed as 10 * log10(maxv^2 / msd(x_draw, y_draw)), where maxv is  the maximum possible value x or y can take\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Root-mean-squared-deviation","page":"Pairwise statistics on uncertain data collections","title":"Root mean squared deviation","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"rmsd(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int; normalize = false)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#StatsBase.rmsd-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"StatsBase.rmsd","text":"rmsd(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int, normalize = false)\n\nObtain a distribution over the root mean squared deviation between two  collections of uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute the root mean squared deviation between the two   length-L draws.\n\nThis yields n estimates of the root mean squared deviation between n independent pairs of realisations of x and y. The n-member  distribution of root mean squared deviation estimates is  returned as a vector.\n\nThe root mean squared deviation is computed as sqrt(msd(x_draw, y_draw))  at each iteration. Optionally, x_draw and y_draw may be normalised.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Squared-L2-distance","page":"Pairwise statistics on uncertain data collections","title":"Squared L2 distance","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"sqL2dist(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#StatsBase.sqL2dist-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"StatsBase.sqL2dist","text":"sqL2dist(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution over the squared L2 distance between two  collections of uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute the squared L2 distance between the two   length-L draws.\n\nThis yields n estimates of the squared L2 distance between n independent pairs of realisations of x and y. The n-member  distribution of squared L2 distance estimates is returned as a vector.\n\nThe squared L2 distance is computed as sum_i=1^n x_i - y_i^2.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Cross-correlation","page":"Pairwise statistics on uncertain data collections","title":"Cross correlation","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"crosscor(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int; demean = true)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#StatsBase.crosscor-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"StatsBase.crosscor","text":"crosscor(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, [lags], n::Int; demean = true)\n\nObtain a distribution over the cross correlation between two collections of  uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute the cross correlation between the two length-L draws.\n\nThis yields n estimates of the cross correlation between n independent pairs  of realisations of x and y. The n-member distribution of cross correlation estimates is returned as a vector.\n\ndemean specifies whether, at each iteration, the respective means of the draws  should be subtracted from them before computing their cross correlation.\n\nWhen left unspecified, the lags used are -min(n-1, 10*log10(n)) to min(n, 10*log10(n)).\n\nThe output is normalized by sqrt(var(x_draw)*var(y_draw)). See crosscov for the unnormalized form.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Cross-covariance","page":"Pairwise statistics on uncertain data collections","title":"Cross covariance","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"crosscov(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int; demean = true)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#StatsBase.crosscov-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"StatsBase.crosscov","text":"crosscov(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, [lags], n::Int; demean = true)\n\nObtain a distribution over the cross covariance function (CCF) between two  collections of uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute the CCF between the two length-L draws.\n\nThis yields n estimates of the CCF between n independent pairs  of realisations of x and y. The n-member distribution of CCF estimates  is returned as a vector.\n\ndemean specifies whether, at each iteration, the respective means of the draws  should be subtracted from them before computing their CCF.\n\nWhen left unspecified, the lags used are -min(n-1, 10*log10(n)) to min(n, 10*log10(n)).\n\nThe output is not normalized. See crosscor for a function with normalization.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Generalized-Kullback-Leibler-divergence","page":"Pairwise statistics on uncertain data collections","title":"Generalized Kullback-Leibler divergence","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"gkldiv(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#StatsBase.gkldiv-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"StatsBase.gkldiv","text":"gkldiv(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)\n\nObtain a distribution over the generalized Kullback-Leibler divergence between two  collections of uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute the  generalized Kullback-Leibler divergence between the two   length-L draws.\n\nThis yields n estimates of the  generalized Kullback-Leibler divergence  between n independent pairs of realisations of x and y. The n-member  distribution of generalized Kullback-Leibler divergence estimates is  returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#Kullback-Leibler-divergence","page":"Pairwise statistics on uncertain data collections","title":"Kullback-Leibler divergence","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/","page":"Pairwise statistics on uncertain data collections","title":"Pairwise statistics on uncertain data collections","text":"kldivergence(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets_pairwise_estimates/#StatsBase.kldivergence-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"Pairwise statistics on uncertain data collections","title":"StatsBase.kldivergence","text":"kldivergence(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, [b], n::Int)\n\nObtain a distribution over the Kullback-Leibler divergence between two  collections of uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute the Kullback-Leibler divergence between the two   length-L draws.\n\nThis yields n estimates of the Kullback-Leibler divergence  between n independent pairs of realisations of x and y. The n-member  distribution of Kullback-Leibler divergence estimates is  returned as a vector.\n\nOptionally a real number b can be specified such that the divergence is  scaled by 1/log(b).\n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/uncertainvalues_populations/#uncertain_value_population","page":"Weighted populations","title":"Weighted populations","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_populations/","page":"Weighted populations","title":"Weighted populations","text":"The UncertainScalarPopulation type allows representation of an uncertain scalar  represented by a population of values who will be sampled according to a vector of  explicitly provided probabilities. Think of it as an explicit kernel density estimate. ","category":"page"},{"location":"uncertain_values/uncertainvalues_populations/#Generic-constructor","page":"Weighted populations","title":"Generic constructor","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_populations/","page":"Weighted populations","title":"Weighted populations","text":"UncertainValue(::Vector, ::Vector)","category":"page"},{"location":"uncertain_values/uncertainvalues_populations/#UncertainData.UncertainValues.UncertainValue-Tuple{Vector{T} where T, Vector{T} where T}","page":"Weighted populations","title":"UncertainData.UncertainValues.UncertainValue","text":"UncertainValue(values::Vector, probs::Union{Vector, AbstractWeights})\n\nConstruct a population whose members are given by values and whose sampling  probabilities are given by probs. The elements of values can be either  numeric or uncertain values of any type.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/uncertainvalues_populations/#Type-documentation","page":"Weighted populations","title":"Type documentation","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_populations/","page":"Weighted populations","title":"Weighted populations","text":"UncertainScalarPopulation","category":"page"},{"location":"uncertain_values/uncertainvalues_populations/#UncertainData.UncertainValues.UncertainScalarPopulation","page":"Weighted populations","title":"UncertainData.UncertainValues.UncertainScalarPopulation","text":"UncertainScalarPopulation(values, probs)\nUncertainScalarPopulation(values, probs::Vector{Number})\nUncertainScalarPopulation(values, probs::Statsbase.AbstractWeights)\n\nAn UncertainScalarPopulation, which consists of some population members (values) and some weights (probs) that indicate the relative importance of the  population members (for example during resampling). \n\nFields\n\nvalues: The members of the population. Can be either numerical values, any   type of uncertain value defined in this package (including populations), and   Measurement instances from Measurements.jl.\nprobs: The probabilities of sampling each member of the population.\n\nConstructors\n\nIf values contains only scalar numeric values, then the values field    will be of type Vector{Number}.\nIf values contains one or more uncertain values, then the values field    will be of type Vector{AbstractUncertainValue}\n\nExample\n\n\n# Uncertain population consisting of CertainValues (scalars get promoted to \n# CertainValue), theoretical distributions and KDE distributions\npop1 = UncertainScalarPopulation(\n    [3.0, UncertainValue(Normal, 0, 1), UncertainValue(Gamma, 2, 3), \n    UncertainValue(Uniform, rand(1000))], [0.5, 0.5, 0.5, 0.5])\n\n# Uncertain population consisting of scalar values\npop2 = UncertainScalarPopulation([1, 2, 3], rand(3))\npop3 = UncertainScalarPopulation([1, 2, 3], Weights(rand(3)))\n\n# Uncertain population consisting of uncertain populations\npop4 = UncertainScalarPopulation([pop1, pop2], [0.1, 0.5])\n\n# Uncertain population consisting of uncertain populations, a scalar and \n# a normal distribution. Assign random weights.\nvals = [pop1, pop2, 2, UncertainValue(Normal, 0.3, 0.014)]\npop5 = UncertainScalarPopulation(vals, Weights(rand(4)))\n\n\n\n\n\n","category":"type"},{"location":"resampling/sequential/strictly_increasing/#Strictly-increasing","page":"Strictly increasing","title":"Strictly increasing","text":"","category":"section"},{"location":"resampling/sequential/strictly_increasing/","page":"Strictly increasing","title":"Strictly increasing","text":"The default constructor for a strictly increasing sequential sampling constraint is  StrictlyIncreasing. To specify how the sequence is sampled, provide an  OrderedSamplingAlgorithm as an argument to the constructor.","category":"page"},{"location":"resampling/sequential/strictly_increasing/#Compatible-ordering-algorithms","page":"Strictly increasing","title":"Compatible ordering algorithms","text":"","category":"section"},{"location":"resampling/sequential/strictly_increasing/","page":"Strictly increasing","title":"Strictly increasing","text":"StrictlyIncreasing(StartToEnd()) (the default)","category":"page"},{"location":"resampling/sequential/strictly_increasing/#Documentation","page":"Strictly increasing","title":"Documentation","text":"","category":"section"},{"location":"resampling/sequential/strictly_increasing/","page":"Strictly increasing","title":"Strictly increasing","text":"resample(udata::AbstractUncertainValueDataset, \n        constraint::Union{SamplingConstraint, Vector{SamplingConstraint}},\n        sequential_constraint::StrictlyIncreasing{OrderedSamplingAlgorithm};\n        quantiles = [0.0001, 0.9999])","category":"page"},{"location":"resampling/sequential/strictly_increasing/","page":"Strictly increasing","title":"Strictly increasing","text":"resample(udata::DT, sequential_constraint::StrictlyIncreasing{T};\n        quantiles = [0.0001, 0.9999]) where {DT <: AbstractUncertainValueDataset, T <: StartToEnd}","category":"page"},{"location":"resampling/sequential/strictly_increasing/#Examples","page":"Strictly increasing","title":"Examples","text":"","category":"section"},{"location":"resampling/sequential/strictly_increasing/#Example-1:-strictly-increasing-sequences","page":"Strictly increasing","title":"Example 1: strictly increasing sequences","text":"","category":"section"},{"location":"resampling/sequential/strictly_increasing/","page":"Strictly increasing","title":"Strictly increasing","text":"Let's compare how the realizations look for the situation where no sequential sampling constraint is imposed versus enforcing strictly increasing sequences.","category":"page"},{"location":"resampling/sequential/strictly_increasing/","page":"Strictly increasing","title":"Strictly increasing","text":"We start by creating some uncertain data with increasing magnitude and zero overlap between  values, so we're guaranteed that a strictly increasing sequence through the dataset exists.","category":"page"},{"location":"resampling/sequential/strictly_increasing/","page":"Strictly increasing","title":"Strictly increasing","text":"using UncertainData, Plots \n\n\nN = 10\nu_timeindices = [UncertainValue(Normal, i, rand(Uniform(0.1, 2))) for i = 1:N]\nu = UncertainDataset(u_timeindices)\n\np_increasing = plot(u, [0.0001, 0.9999], legend = false,\n    xlabel = \"index\", ylabel = \"value\")\np_regular = plot(u, [0.0001, 0.9999], legend = false,\n    ylabel = \"value\", xaxis = false)\n\nfor i = 1:1000\n    plot!(p_increasing, resample(u, StrictlyIncreasing()), lw = 0.2, lc = :black, lα = 0.1)\n    plot!(p_regular, resample(u), lw = 0.2, lc = :black, lα = 0.2)\nend \n\nplot(p_regular, p_increasing, layout = (2, 1), link = :x, size = (400, 500))","category":"page"},{"location":"resampling/sequential/strictly_increasing/","page":"Strictly increasing","title":"Strictly increasing","text":"(Image: )","category":"page"},{"location":"resampling/sequential/strictly_increasing/","page":"Strictly increasing","title":"Strictly increasing","text":"Values of the realizations where strictly increasing sequences are imposed clearly are  limited by the next values in the dataset. For the regular sampling, however, realizations  jump wildly, with both positive and negative first differences.","category":"page"},{"location":"resampling/sequential/strictly_increasing/#Example-2:-regular-constraints-strictly-increasing-sequences","page":"Strictly increasing","title":"Example 2: regular constraints + strictly increasing sequences","text":"","category":"section"},{"location":"resampling/sequential/strictly_increasing/","page":"Strictly increasing","title":"Strictly increasing","text":"You may also combine regular sampling constraints with sequential resampling schemes.  Here's one example. We use the same data as in example 1 above, but when drawing increasing  sequences, we only resample from within one standard deviation around the mean.","category":"page"},{"location":"resampling/sequential/strictly_increasing/","page":"Strictly increasing","title":"Strictly increasing","text":"p_increasing = plot(u, [0.0001, 0.9999], legend = false,\n    xlabel = \"index\", ylabel = \"value\")\np_regular = plot(u, [0.0001, 0.9999], legend = false,\n    ylabel = \"value\", xaxis = false)\n\nfor i = 1:1000\n    plot!(p_increasing, resample(u, TruncateStd(1), StrictlyIncreasing()), lw = 0.2, \n        lc = :black, lα = 0.1)\n    plot!(p_regular, resample(u), lw = 0.2, lc = :black, lα = 0.2)\nend \n\nplot(p_regular, p_increasing, layout = (2, 1), link = :x, size = (400, 500))","category":"page"},{"location":"resampling/sequential/strictly_increasing/","page":"Strictly increasing","title":"Strictly increasing","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/#transform_data_to_regular_grid","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"","category":"section"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"Time series analysis algorithms often require data that are equally spaced in time.  Dealing with data that have uncertainties both in values and in time, that becomes tricky. A solution is to partition the time axis into bins of a certain size, transform  your data onto those bins, the compute your statistic on the transformed data.","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"This tutorial shows how uncertain data can be transformed to a regular grid using a  combination of resampling and binning.","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/#Some-example-data","page":"Transforming uncertain data to a regular grid","title":"Some example data","text":"","category":"section"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"We'll look at the first and second variables of an autoregressive system with  unidirectional coupling. We'll use 100 points where each time point is spaced  10 time unit apart. In addition we'll make the positions of the time indices, as  well as the actual values of the time series, uncertain.","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"To do this, we'll use the example_uncertain_indexvalue_datasets function that ships with  UncertainData.jl. It takes as input a DiscreteDynamicalSystem instance, the number of desired points, and which variables of the system to use for the  time series. Time series will be generated from a unidirectionally  coupled AR1 system from the CausalityTools  package. To simulate real-world data, some noise is added to the values and  indices.","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"using UncertainData, CausalityTools, Plots\n\nsystem = CausalityTools.ar1_unidir(c_xy = 0.5)\nvars = (1, 2)\nnpts, tstep = 100, 10\n\nd_xind, d_yind = Uniform(2.5, 15.5), Uniform(2.5, 15.5)\nd_xval, d_yval = Uniform(0.01, 0.2), Uniform(0.01, 0.2)\n\nX, Y = example_uncertain_indexvalue_datasets(system,\n    npts, vars, tstep = tstep,\n    d_xind = d_xind, d_yind = d_yind,\n    d_xval = d_xval, d_yval = d_yval);","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"Let's plot the data.","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"qs = [0.05, 0.95] # use the same quantile ranges for both indices and values\nplot(X, qs, qs, ms = 2, c = :black, marker = stroke(0.01, :black), \n    xlabel = \"Time step\", ylabel = \"Value\")","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"Our data have uncertain time indices, so they are not on a regularly spaced grid. Let's say we want a grid where the left bin edges range from 0 to 1000 in  steps of 50. Superimposed on our data, that grid looks as follows.","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"resampling = BinnedResampling(0:50:1000, 1000)\n\nqs = [0.05, 0.95] # plotting quantile ranges\nplot(X, qs, qs, ms = 2, c = :black, marker = stroke(0.01, :black), \n    xlabel = \"Time step\", ylabel = \"Value\")\nvline!(0:50:1000 |> collect, label = \"\", c = :grey, lw = 0.5, ls = :dash)","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/#BinnedMeanResampling","page":"Transforming uncertain data to a regular grid","title":"BinnedMeanResampling","text":"","category":"section"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"Assume that the uncertainties in the time values are independent. Bin averages  can then be obtained by resampling every uncertain value in the dataset  many times, keeping track of which draws falls in which time bins, then taking the average of the draws in each of the bins. We'll resample each point  10000 times. In total, the bin means are then computed based on  100*10000 draws of the values in the dataset (we constructed the dataset  so that it has 100 points).","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"resampling = BinnedMeanResampling(0:50:1000, 10000)\nX_binned_means = resample(X, resampling); # returns a vector of bin means\n\np = plot(xlabel = \"Time step\", ylabel = \"Value\")\nplot!(X, c = :blue, ms = 2, marker = stroke(0.01, :black), [0.1, 0.9], [0.1, 0.9])\nplot!(inds, X_binned_means, ms = 2, marker = stroke(1.0), lw = 1, c = :black, label = \"bin mean\")\nvline!(resampling.left_bin_edges, label = \"\", c = :grey, lw = 0.5, ls = :dash)","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"OK, that looks like a reasonable estimate to the mean at this coarser resolution.  But what if we need more information about each bin than just the mean? The solution  is to explicitly keep track of the draws in each bin, then representing those draws  as a distribution.","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/#BinnedResampling","page":"Transforming uncertain data to a regular grid","title":"BinnedResampling","text":"","category":"section"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"Assume again that the uncertainties in the time values are independent. However, instead of using bin averages, we're interested in keeping track of the uncertainties in each bin. Again, resample the values in the dataset many times, but this time,  instead of directly computing the bin means, we keep track of all draws falling  in a particular bin. Uncertainties in a bin is then estimated by a kernel density  estimate over the draws falling in that bin.","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"Again, we'll sample each point in the dataset 10000 times, yielding a total  of 100*10000 draws from which the kernel-density-estimated distributions are  estimated. Some bins may have more draws than others.","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"resampling = BinnedResampling(0:50:1000, 1000)\nX_binned = resample(X, resampling)","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"X_binned is still a UncertainIndexValueDataset, but the indices have been reduced  to CertainValue instances placed at the bin midpoints. The values, however, are kept  as uncertain values.","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"Plotting the result:","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"\n# Plot the 90 percentile ranges for both the original distributions/populations and \n# the binned distributions/populations\nqs = [0.05, 0.95]\nql = quantile.(X_binned.values, 0.05, 10000)\nqh = quantile.(X_binned.values, 0.95, 10000)\n\nplot(xlabel = \"Time step\", ylabel = \"Value\")\n\n# Original dataset, bin edges and resampled dataset\nplot!(X, c = :blue, ms = 2, marker = stroke(0.01, :black), qs, qs)\n\nvline!(resampling.left_bin_edges, label = \"\", c = :grey, lw = 0.5, ls = :dash)\nplot!(X_binned, c = :red, ms = 4, marker = stroke(0.01, :red), qs, qs, alpha = 0.5)\n\n# Get the bin edges and the quantiles as a band\ng = resampling.left_bin_edges\ninds = g[1:end-1] .+ step(g)/2\nplot!(inds, qh, label = \"\", c = :red, α = 0.5, ls = :dash)\nplot!(inds, ql, label = \"\", c = :red, α = 0.5, ls = :dash)","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"This binned UncertainIndexValueDataset can now be resampled by calling  resample(X_binned), which will every time yield independent realisations  that are on the same time grid.","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"p = plot(xlabel = \"Time step\", ylabel = \"Value\")\n\nfor i = 1:10\n    timeinds, vals = resample(X_binned)\n    plot!(timeinds, vals, \n        c = :black, lw = 0.5, ms = 1, \n        marker = stroke(0.4, :black), label = \"\")\nend\n\nvline!(resampling.left_bin_edges, label = \"\", c = :grey, lw = 0.5, ls = :dash)\np","category":"page"},{"location":"tutorials/tutorial_transforming_data_to_regular_grid/","page":"Transforming uncertain data to a regular grid","title":"Transforming uncertain data to a regular grid","text":"(Image: )","category":"page"},{"location":"tutorials/tutorial_overview/#Regularising-uncertain-data","page":"Regularising uncertain data","title":"Regularising uncertain data","text":"","category":"section"},{"location":"tutorials/tutorial_overview/","page":"Regularising uncertain data","title":"Regularising uncertain data","text":"Transforming uncertain data to regular grid","category":"page"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_value_collections/#resampling_schemes_uncertainvaluecollections","page":"List of resampling schemes and their purpose","title":"List of resampling schemes and their purpose","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_value_collections/","page":"List of resampling schemes and their purpose","title":"List of resampling schemes and their purpose","text":"For collections of uncertain data, sampling constraints can be represented using the ConstrainedValueResampling type. This allows for passing complicated sampling constraints as a single input argument to functions that accept uncertain value collections.","category":"page"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_value_collections/#Constrained-resampling","page":"List of resampling schemes and their purpose","title":"Constrained resampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_value_collections/","page":"List of resampling schemes and their purpose","title":"List of resampling schemes and their purpose","text":"ConstrainedValueResampling","category":"page"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_value_collections/#UncertainData.Resampling.ConstrainedValueResampling","page":"List of resampling schemes and their purpose","title":"UncertainData.Resampling.ConstrainedValueResampling","text":"ConstrainedValueResampling{N_DATASETS}\n\nIndicates that resampling should be done with constraints on the furnishing distributions/populations.\n\nFields\n\nconstraints. The constraints for the datasets. The constraints are represented as a tuple of length    N_DATASETS, where the i-th tuple element contains the constraints for that dataset.   Constraints for each dataset must be supplied as either a single sampling constraint,    or as a vector of sampling constraints with length matching the length of the dataset   (Union{SamplingConstraint, Vector{<:SamplingConstraint}}}). For example, if the i-th dataset   contains 352 observations, then constraints[i] must be either a single    sampling constraint (e.g. TruncateStd(1.1)) or a vector of 352 different sampling constraints    (e.g. [TruncateStd(1.0 + rand()) for i = 1:352]).\nn::Int. The number of draws. \n\nExample\n\nAssume we have three collections of uncertain values of, each of length L = 50. These should be  resampled 250 times. Before resampling, however, the distributions/populations furnishing  the uncertain values should be truncated: \n\nFor the first collection, truncate each value at 1.5 times its standard deviation    around its mean. This could simulate measurement errors from an instrument    that yields stable measurements whose errors are normally distributed, but for    which we are not interested in outliers or values beyond 1.5 standard devations    for our analyses.\nFor the second collection, truncate each value at the 80th percentile range.   This could simulate measurement errors from an instrument that yields stable measurements,   whose errors are not normally distributed, so that confidence intervals are better   to use than standard deviations. In this case, we're not interested in outliers,   and therefore exclude values smaller than the 10th percentile and larger than the    90th percentile of the data.\nFor the third collection, truncate the i-th value at an fraction of its standard   deviation around the mean slightly larger than at the i-1-th value, so that    the standard deviation ranges from 0.5 to 0.5 + L/100. This could simulate,   for example, an instrument whose measurement error increases over time.\n\nL = 50\nconstraints_d1 = TruncateStd(1.5)\nconstraints_d2 = TruncateQuantiles(0.1, 0.9)\nconstraints_d3 = [TruncateStd(0.5 + i/100) for i = 1:L]\n\n\n\n\n\n","category":"type"},{"location":"uncertain_values/uncertainvalues_Measurements/","page":"Generic constructor","title":"Generic constructor","text":"Measurement instances from Measurements.jl[1] are  treated as normal distributions with known means. Note: once you convert a measurement, you lose the  functionality provided by Measurements.jl, such as exact error propagation.","category":"page"},{"location":"uncertain_values/uncertainvalues_Measurements/#Generic-constructor","page":"Generic constructor","title":"Generic constructor","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_Measurements/","page":"Generic constructor","title":"Generic constructor","text":"If x = measurement(2.2, 0.21) is a measurement, then UncertainValue(x) will return an UncertainScalarNormallyDistributed instance.","category":"page"},{"location":"uncertain_values/uncertainvalues_Measurements/#References","page":"Generic constructor","title":"References","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_Measurements/","page":"Generic constructor","title":"Generic constructor","text":"[1]: M. Giordano, 2016, \"Uncertainty propagation with functionally correlated quantities\", arXiv:1610.08716 (Bibcode: 2016arXiv161008716G).","category":"page"},{"location":"#UncertainData.jl","page":"UncertainData.jl","title":"UncertainData.jl","text":"","category":"section"},{"location":"#Motivation","page":"UncertainData.jl","title":"Motivation","text":"","category":"section"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"UncertainData.jl was born to systematically deal with uncertain data, and to  sample from  uncertain datasets more rigorously.  It makes workflows involving uncertain data of  different types  and from different sources significantly easier.","category":"page"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"(Image: )","category":"page"},{"location":"#Package-philosophy","page":"UncertainData.jl","title":"Package philosophy","text":"","category":"section"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"Way too often in data analysis the uncertainties in observational data are ignored or not  dealt with in a systematic manner. The core concept of the package is that uncertain data  should live in the probability domain, not as single value representations of the data  (e.g. the mean).","category":"page"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"In this package, uncertain data values are thus  stored as probability distributions or populations.  Only when performing a computation or plotting, the uncertain values are realized by  resampling the probability distributions furnishing them.","category":"page"},{"location":"#Organising-uncertain-data","page":"UncertainData.jl","title":"Organising uncertain data","text":"","category":"section"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"Individual uncertain observations of different types are seamlessly mixed and can be organised in collections of uncertain values.","category":"page"},{"location":"#Mathematical-operations","page":"UncertainData.jl","title":"Mathematical operations","text":"","category":"section"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"Several elementary mathematical operations and  trigonometric functions are supported  for uncertain values. Computations are done using a  resampling approach.","category":"page"},{"location":"#Statistics-on-uncertain-datasets","page":"UncertainData.jl","title":"Statistics on uncertain datasets","text":"","category":"section"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"Statistics on uncertain datasets are computed using a resampling approach:","category":"page"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"Core statistics\nHypothesis tests","category":"page"},{"location":"#Resampling","page":"UncertainData.jl","title":"Resampling","text":"","category":"section"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"Resampling is done by drawing random numbers from the furnishing distributions/populations of the uncertain value(s), using one of the resample methods.","category":"page"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"Individual uncertain values may be sampled as they    are, or after first applying sampling constraints on the underlying distributions/populations.\nCollections of uncertain values can be    resampled by either assuming no sequential dependence for your data, or by applying sequential sampling models. During this process sampling constraints can be applied element-wise or on entire collections.","category":"page"},{"location":"#Basic-workflow","page":"UncertainData.jl","title":"Basic workflow","text":"","category":"section"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"Define uncertain values by probability distributions.\nDefine uncertain datasets by gathering uncertain values.\nUse sampling constraints to constraint the support of the distributions furnishing the uncertain values (i.e. apply subjective criteria to decide what is acceptable data and what is not).\nResample the uncertain values or uncertain datasets.\nExtend existing algorithm to accept uncertain values/datasets.\nQuantify the uncertainty in your dataset or on whatever measure your algorithm computes.","category":"page"},{"location":"#Related-software","page":"UncertainData.jl","title":"Related software","text":"","category":"section"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"A related package is Measurements.jl, which propagates errors exactly and handles correlated uncertainties. However,  Measurements.jl accepts only normally distributed values. This package serves a slightly  different purpose: it was born to provide an easy way of handling uncertainties of  many different types,  using a resampling approach to obtain  statistics when needed, and providing a rich set of  sampling constraints that makes it easy  for the user to reason about and plot their uncertain data under different assumptions.","category":"page"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"Depending on your needs, Measurements.jl  may be a better (and faster) choice if your data satisfies the requirements for the package  (normally distributed) and if your uncertainties are correlated.","category":"page"},{"location":"#Contributing","page":"UncertainData.jl","title":"Contributing","text":"","category":"section"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"If you have questions, or a good idea for new functionality that could be useful to have in  the package, please submit an issue, or even better - a pull request.","category":"page"},{"location":"#Citing","page":"UncertainData.jl","title":"Citing","text":"","category":"section"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"If you use UncertainData.jl for any of your projects or scientific publications, please cite this small Journal of Open Source Software (JOSS) publication as follows","category":"page"},{"location":"","page":"UncertainData.jl","title":"UncertainData.jl","text":"Haaga, (2019). UncertainData.jl: a Julia package for working with measurements and datasets with uncertainties. Journal of Open Source Software, 4(43), 1666, https://doi.org/10.21105/joss.01666","category":"page"},{"location":"citing/#Citing","page":"Citing","title":"Citing","text":"","category":"section"},{"location":"citing/","page":"Citing","title":"Citing","text":"If you use UncertainData.jl for any of your projects or scientific publications, please cite this small Journal of Open Source Software (JOSS) publication as follows","category":"page"},{"location":"citing/","page":"Citing","title":"Citing","text":"Haaga, (2019). UncertainData.jl: a Julia package for working with measurements and datasets with uncertainties.. Journal of Open Source Software, 4(43), 1666, https://doi.org/10.21105/joss.01666","category":"page"},{"location":"resampling/resampling_uncertain_datasets/#UncertainDataset","page":"UncertainDataset","title":"UncertainDataset","text":"","category":"section"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"Collections of uncertain values are resampled by element-wise sampling the  furnishing distributions of the uncertain values in the collection. You may sample the collection as it is, or apply sampling constraints that limit the  support of the individual data value distributions.","category":"page"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"The following methods will work for any collection type included in the UVAL_COLLECTION_TYPES type union.","category":"page"},{"location":"resampling/resampling_uncertain_datasets/#Single-realisation","page":"UncertainDataset","title":"Single realisation","text":"","category":"section"},{"location":"resampling/resampling_uncertain_datasets/#No-constraint","page":"UncertainDataset","title":"No constraint","text":"","category":"section"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"resample(::UVAL_COLLECTION_TYPES)","category":"page"},{"location":"resampling/resampling_uncertain_datasets/#UncertainData.Resampling.resample-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}}","page":"UncertainDataset","title":"UncertainData.Resampling.resample","text":"resample(x::UVAL_COLLECTION_TYPES, constraint::SamplingConstraint, n::Int) -> Vector{Vector{T}} where T\n\nResample x (a collection of uncertain values) once by drawing a single random number from  each of the uncertain values in x.\n\nSee also UVAL_COLLECTION_TYPES.\n\nExample\n\n# Generate some uncertain values represented by gamma distributions\nuvals = [UncertainValue(Gamma(i, rand())) for i = 1:100]\n\n# Resample the collection once \nresample(uvals)\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_uncertain_datasets/#Same-constraint-applied-to-all-values","page":"UncertainDataset","title":"Same constraint applied to all values","text":"","category":"section"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"resample(::UVAL_COLLECTION_TYPES, ::SamplingConstraint)","category":"page"},{"location":"resampling/resampling_uncertain_datasets/#UncertainData.Resampling.resample-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, SamplingConstraint}","page":"UncertainDataset","title":"UncertainData.Resampling.resample","text":"resample(x::UVAL_COLLECTION_TYPES, constraint::SamplingConstraint) -> Vector{T} where T\n\nResample x (a collection of uncertain values) once, applying the provided sampling constraint.\n\nReturns a length(x)-element vector. The i-th element of this vector is generated by  truncating the i-th uncertain value by the sampling constraint, then drawing a single random  number from the truncated value.\n\nSee also UVAL_COLLECTION_TYPES.\n\nExample\n\n# Generate some uncertain values where the `i`-th value is given by a normal \n# distribution with mean `i` and a standard deviation drawn from a uniform \n# distribution on `[0, 1]`.\nuvals = [UncertainValue(Normal(i, rand())) for i = 1:100]\n\n# Truncate each distribution at +- 0.5 standard deviations, then resample. \nresample(uvals, TruncateStd(0.5))\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_uncertain_datasets/#Different-constraints-applied-to-each-value","page":"UncertainDataset","title":"Different constraints applied to each value","text":"","category":"section"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"resample(x::UVAL_COLLECTION_TYPES, constraint::Vector{<:SamplingConstraint})","category":"page"},{"location":"resampling/resampling_uncertain_datasets/#UncertainData.Resampling.resample-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Vector{var\"#s25\"} where var\"#s25\"<:SamplingConstraint}","page":"UncertainDataset","title":"UncertainData.Resampling.resample","text":"resample(x::UVAL_COLLECTION_TYPES, constraint::Vector{<:SamplingConstraint}) -> Vector{T} where T\n\nResample x (a collection of uncertain values) once, applying the provided sampling constraints. The number of constraints must match the number of elements in x.\n\nReturns a length(x)-element vector. The i-th element of this vector is generated by  truncating the i-th uncertain value by the i-th sampling constraint, then drawing a single random  number from the truncated value. \n\nSee also UVAL_COLLECTION_TYPES.\n\nExample\n\n# Generate some uncertain values where the `i`-th value is given by a normal \n# distribution with mean `i` and a standard deviation drawn from a uniform \n# distribution on `[0, 1]`.\nuvals = [UncertainValue(Normal(i, rand())) for i = 1:100]\n\n# Truncate each distribution at +- 0.5 standard deviations, then resample. \nresample(uvals, TruncateStd(0.5))\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_uncertain_datasets/#Multiple-realisations","page":"UncertainDataset","title":"Multiple realisations","text":"","category":"section"},{"location":"resampling/resampling_uncertain_datasets/#No-constraint-2","page":"UncertainDataset","title":"No constraint","text":"","category":"section"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"resample(::UVAL_COLLECTION_TYPES, ::Int)","category":"page"},{"location":"resampling/resampling_uncertain_datasets/#UncertainData.Resampling.resample-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Int64}","page":"UncertainDataset","title":"UncertainData.Resampling.resample","text":"resample(uvd::UVAL_COLLECTION_TYPES, n::Int) -> Vector{Vector{T}}\n\nDraw n realisations of an uncertain value dataset according to the distributions of the uncertain values comprising it.\n\nSee also UVAL_COLLECTION_TYPES. \n\nExample\n\n# Generate some uncertain values represented by gamma distributions\nuvals = [UncertainValue(Gamma(i, rand())) for i = 1:100]\n\n# Resample the collection once \nresample(uvals)\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_uncertain_datasets/#Same-constraint-applied-to-all-values-2","page":"UncertainDataset","title":"Same constraint applied to all values","text":"","category":"section"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"resample(::UVAL_COLLECTION_TYPES, ::SamplingConstraint, ::Int)","category":"page"},{"location":"resampling/resampling_uncertain_datasets/#UncertainData.Resampling.resample-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, SamplingConstraint, Int64}","page":"UncertainDataset","title":"UncertainData.Resampling.resample","text":"resample(x::UVAL_COLLECTION_TYPES, constraint::SamplingConstraint, n::Int) -> Vector{Vector{T}} where T\n\nResample x (a collection of uncertain values) n times, applying the provided sampling constraint.\n\nReturns an n-element vector of length(x)-element vectors. Each of these vectors is an independent  draw from x. The i-th element of each draw is generated by truncating the i-th uncertain value by  the sampling constraint, then drawing a single random number from the truncated value.\n\nSee also UVAL_COLLECTION_TYPES.\n\nExample\n\n# Generate some uncertain values where the `i`-th value is given by a normal \n# distribution with mean `i` and a standard deviation drawn from a uniform \n# distribution on `[0, 1]`.\nuvals = [UncertainValue(Normal(i, rand())) for i = 1:100]\n\n# Truncate the first 50 elements at the 90th percentile range, and the \n# last 50 elements at the 40th percentile range.\nconstraints = [i <= 50 ? TruncateQuantiles(0.05, 0.95) : TruncateQuantiles(0.3, 0.7) for i = 1:100]\n\n# Truncate the distributions, then draw ten independent realisations of the collection subject\n# to the provided constraints.\nresample(uvals, constraints, 10)\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_uncertain_datasets/#Different-constraints-applied-to-each-value-2","page":"UncertainDataset","title":"Different constraints applied to each value","text":"","category":"section"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"resample(x::UVAL_COLLECTION_TYPES, constraint::Vector{<:SamplingConstraint}, n::Int)","category":"page"},{"location":"resampling/resampling_uncertain_datasets/#UncertainData.Resampling.resample-Tuple{Union{AbstractUncertainValueDataset, AbstractVector{T} where T<:AbstractUncertainValue}, Vector{var\"#s25\"} where var\"#s25\"<:SamplingConstraint, Int64}","page":"UncertainDataset","title":"UncertainData.Resampling.resample","text":"resample(x::UVAL_COLLECTION_TYPES, constraint::Vector{<:SamplingConstraint}, n::Int) -> Vector{Vector{T}} where T\n\nResample x (a collection of uncertain values) n times, applying the provided sampling constraints.\n\nReturns an n-element vector of length(x)-element vectors. Each of these vectors is an independent  draw from x. The i-th element of each draw is generated by truncating the i-th uncertain value by  the i-th sampling constraint, then drawing a single random number from the truncated value.\n\nSee also UVAL_COLLECTION_TYPES.\n\nExample\n\n# Generate some uncertain values where the `i`-th value is given by a normal \n# distribution with mean `i` and a standard deviation drawn from a uniform \n# distribution on `[0, 1]`.\nuvals = [UncertainValue(Normal(i, rand())) for i = 1:100]\n\n# Truncate the first 50 elements at `± 0.5` standard deviations, and the \n# last 50 elements at `± 1.2` standar deviations.\nconstraints = [i <= 50 ? TruncateStd(0.5) : TruncateStd(1.2) for i = 1:100]\n\n# Apply the constraints element-wise, then draw ten independent realisations \n# of the collection subject to those constraints.\nresample(uvals, constraints, 10)\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_uncertain_datasets/#Examples","page":"UncertainDataset","title":"Examples","text":"","category":"section"},{"location":"resampling/resampling_uncertain_datasets/#Resampling-with-sampling-constraints","page":"UncertainDataset","title":"Resampling with sampling constraints","text":"","category":"section"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"Consider the following example where we had a bunch of different measurements. ","category":"page"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"The first ten measurements (r1) are normally distributed values with mean μ = 0 ± 0.4  and standard deviation σ = 0.5 ± 0.1. The next measurement r2 is actually a sample  consisting of 9850 replicates. Upon plotting it, we see that it has some complex  distribution which  we have to estimate using a kernel density approach (calling  UncertainValue without any additional argument triggers kernel density estimation).  Next, we have distribution r3 that upon plotting looks uniform, so we approximate it by a  uniform distribution. Finally, the last two uncertain values r4 and r5 are represented  by a normal and a gamma distribution with known parameters.","category":"page"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"To plot these data, we gather them in an UncertainDataset.","category":"page"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"dist1 = Uniform(-0.4, 0.4)\ndist2 = Uniform(-0.1, 0.1)\nr1 = [UncertainValue(Normal, 0 + rand(dist), 0.5 + rand(dist2)) for i = 1:10]\n # now drawn from a uniform distribution, but simulates \nr2 = UncertainValue(rand(9850))\nr3 = UncertainValue(Uniform, rand(10000))\nr4 = UncertainValue(Normal, -0.1, 0.5)\nr5 = UncertainValue(Gamma, 0.4, 0.8)\n\nuvals = [r1; r2; r3; r4; r5]\nudata = UncertainDataset(uvals);","category":"page"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"By default, the plot recipe for uncertain datasets will plot the median value with the  33rd to 67th percentile range (roughly equivalent to a one standard deviation for  normally distributed values). You may change the percentile range by providing a two-element vector to the plot function.","category":"page"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"Let's demonstrate this by creating a function that plots the uncertain values with  errors bars covering the 0.1st to 99.9th, the 5th to 95th, and the 33rd to 67th percentile  ranges. The function will also take a sampling constraint, then resample the dataset  a number of times and plot the individual realizations as lines. ","category":"page"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"using UncertainData, Plots\n\nfunction resample_plot(data, sampling_constraint; n_resample_draws = 40) \n    p = plot(lw = 0.5)\n    scatter!(data, [0.001, 0.999], seriescolor = :black)\n    scatter!(data, [0.05, 0.95], seriescolor = :red)\n    scatter!(data, [0.33, 0.67], seriescolor = :green)\n\n    plot!(resample(data, sampling_constraint, n_resample_draws), \n        lc = :black, lw = 0.3, lα = 0.5)\n    return p\nend\n\n# Now, resample using some different constraints and compare the plots\np1 = resample_plot(udata, NoConstraint())\ntitle!(\"No constraints\")\np2 = resample_plot(udata, TruncateQuantiles(0.05, 0.95))\ntitle!(\"5th to 95th quantile range\")\np3 = resample_plot(udata, TruncateQuantiles(0.33, 0.67))\ntitle!(\"33th to 67th quantile range\")\np4 = resample_plot(udata, TruncateMaximum(0.7))\ntitle!(\"Truncate at maximum value = 0.7\")\n\nplot(p1, p2, p3, p4, layout = (4, 1), titlefont = font(8))","category":"page"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"This produces the following plot:","category":"page"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"(Image: )","category":"page"},{"location":"resampling/resampling_uncertain_datasets/#What-happens-when-applying-invalid-constraints-to-a-dataset?","page":"UncertainDataset","title":"What happens when applying invalid constraints to a dataset?","text":"","category":"section"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"In the example above, the resampling worked fine because all the constraints were  applicable to the data. However, it could happen that the constraint is not applicable  to all uncertain values in the dataset. For example, applying a TruncateMaximum(2)  constraint to an uncertain value u defined by u = UncertainValue(Uniform, 4, 5) would  not work, because the support of u would be empty after applying the constraint.","category":"page"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"To check if a constraint yields a nonempty truncated uncertain value, use the  support_intersection function. If the result of `support_intersection(uval1, uval2)  for two uncertain values uval1 and uval2 is the empty set ∅, then you'll run into  trouble.","category":"page"},{"location":"resampling/resampling_uncertain_datasets/","page":"UncertainDataset","title":"UncertainDataset","text":"To check for such cases for an entire dataset, you can use the  verify_constraints(udata::AbstractUncertainValueDataset, constraint::SamplingConstraint)  function. It will apply the constraint to each value and return the indices of the values  for which applying the constraint would result in a furnishing distribution whose support  is the empty set.","category":"page"},{"location":"uncertain_statistics/hypothesistests/hypothesis_tests_overview/#Hypothesis-tests-for-uncertain-values-and-collections","page":"Hypothesis tests for uncertain values and collections","title":"Hypothesis tests for uncertain values and collections","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/hypothesis_tests_overview/","page":"Hypothesis tests for uncertain values and collections","title":"Hypothesis tests for uncertain values and collections","text":"In addition to providing ensemble computation of basic statistic measures, this package also wraps various hypothesis tests from HypothesisTests.jl. This allows us to perform hypothesis testing on ensemble realisations of the data.","category":"page"},{"location":"uncertain_statistics/hypothesistests/hypothesis_tests_overview/#Terminology","page":"Hypothesis tests for uncertain values and collections","title":"Terminology","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/hypothesis_tests_overview/","page":"Hypothesis tests for uncertain values and collections","title":"Hypothesis tests for uncertain values and collections","text":"Pooled statistics are computed by sampling all uncertain values comprising the dataset n times, pooling the values together and treating them as one variable, then computing the statistic.","category":"page"},{"location":"uncertain_statistics/hypothesistests/hypothesis_tests_overview/","page":"Hypothesis tests for uncertain values and collections","title":"Hypothesis tests for uncertain values and collections","text":"Element-wise statistics are computed by sampling each uncertain value n times, keeping the data generated from each uncertain value separate. The statistics are the computed separately for each sample.","category":"page"},{"location":"uncertain_statistics/hypothesistests/hypothesis_tests_overview/#Implemented-hypothesis-tests","page":"Hypothesis tests for uncertain values and collections","title":"Implemented hypothesis tests","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/hypothesis_tests_overview/","page":"Hypothesis tests for uncertain values and collections","title":"Hypothesis tests for uncertain values and collections","text":"The following hypothesis tests are implemented for uncertain data types.","category":"page"},{"location":"uncertain_statistics/hypothesistests/hypothesis_tests_overview/","page":"Hypothesis tests for uncertain values and collections","title":"Hypothesis tests for uncertain values and collections","text":"One sample t-test.\nEqual variance t-test.\nUnequal variance t-test.\nExact Kolmogorov-Smirnov test.\nApproximate two-sample Kolmogorov-Smirnov test.\nOne-sample Anderson–Darling test.\nJarque-Bera test.","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"constrain(uv::AbstractUncertainValue, constraint::SamplingConstraint)","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/#UncertainData.SamplingConstraints.constrain-Tuple{AbstractUncertainValue, SamplingConstraint}","page":"Documentation","title":"UncertainData.SamplingConstraints.constrain","text":"constrain(uv::AbstractUncertainValue, constraint::SamplingConstraint)\n\nApply the constraint and truncate the support of the distribution furnishing the uncertain value uv. Returns a constrained uncertain value.\n\n\n\n\n\n","category":"method"},{"location":"sampling_constraints/constrain_uncertain_values/#Examples:-constraining-uncertain-values","page":"Documentation","title":"Examples: constraining uncertain values","text":"","category":"section"},{"location":"sampling_constraints/constrain_uncertain_values/#Theoretical-distributions","page":"Documentation","title":"Theoretical distributions","text":"","category":"section"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"using UncertainData, Distributions\n\n# Define an uncertain value furnished by a theoretical distribution\nuv = UncertainValue(Normal, 1, 0.5)\n\n# Constrain the support of the furnishing distribution using various\n# constraints\nuvc_lq = constrain(uv, TruncateLowerQuantile(0.2))\nuvc_uq = constrain(uv, TruncateUpperQuantile(0.8))\nuvc_q = constrain(uv, TruncateQuantiles(0.2, 0.8))\nuvc_min = constrain(uv, TruncateMinimum(0.5))\nuvc_max = constrain(uv, TruncateMaximum(1.5))\nuvc_range = constrain(uv, TruncateRange(0.5, 1.5))","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/#Theoretical-distributions-with-fitted-parameters","page":"Documentation","title":"Theoretical distributions with fitted parameters","text":"","category":"section"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"using UncertainData, Distributions\n\n# Define an uncertain value furnished by a theoretical distribution with\n# parameters fitted to empirical data\nuv = UncertainValue(Normal, rand(Normal(-1, 0.2), 1000))\n\n# Constrain the support of the furnishing distribution using various\n# constraints\nuvc_lq = constrain(uv, TruncateLowerQuantile(0.2))\nuvc_uq = constrain(uv, TruncateUpperQuantile(0.8))\nuvc_q = constrain(uv, TruncateQuantiles(0.2, 0.8))\nuvc_min = constrain(uv, TruncateMinimum(0.5))\nuvc_max = constrain(uv, TruncateMaximum(1.5))\nuvc_range = constrain(uv, TruncateRange(0.5, 1.5))","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/#Kernel-density-estimated-distributions","page":"Documentation","title":"Kernel density estimated distributions","text":"","category":"section"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"# Define an uncertain value furnished by a kernel density estimate to the\n# distribution of the empirical data\nuv = UncertainValue(UnivariateKDE, rand(Uniform(10, 15), 1000))\n\n# Constrain the support of the furnishing distribution using various\n# constraints\nuvc_lq = constrain(uv, TruncateLowerQuantile(0.2))\nuvc_uq = constrain(uv, TruncateUpperQuantile(0.8))\nuvc_q = constrain(uv, TruncateQuantiles(0.2, 0.8))\nuvc_min = constrain(uv, TruncateMinimum(13))\nuvc_max = constrain(uv, TruncateMaximum(13))\nuvc_range = constrain(uv, TruncateRange(11, 12))","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/#(nested)-weighted-populations-of-uncertain-values","page":"Documentation","title":"(nested) weighted populations of uncertain values","text":"","category":"section"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"Let's define a complicated uncertain value that is defined by a nested weighted population.","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"# Some subpopulations consisting of both scalar values and distributions\nsubpop1_members = [UncertainValue(Normal, 0, 1), UncertainValue(Uniform, -2, 2), -5]\nsubpop2_members = [UncertainValue(Normal, -2, 1), UncertainValue(Uniform, -6, -1),\n                    -3, UncertainValue(Gamma, 1, 0.4)]\n\n# Define the probabilities of sampling the different population members within the \n# subpopulations. Weights are normalised, so we can input any numbers here indicating \n# relative importance\nsubpop1_probs = [1, 2, 1]\nsubpop2_probs = [0.1, 0.2, 0.3, 0.1]\n\npop1 = UncertainValue(subpop1_members, subpop1_probs)\npop2 = UncertainValue(subpop2_members, subpop2_probs)\n\n# Define the probabilities of sampling the two subpopulations in the overall population.\npop_probs = [0.3, 0.7]\n\n# Construct overall population\npop_mixed = UncertainValue([pop1, pop2], pop_probs)","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"Now we can draw samples from this nested population. Sampling directly from the  entire distribution is done by calling resample(pop_mixed, n_draws). However, in some cases we might want to constrain the sampling to some minimum, maximum  or range of values. You can do that by using sampling constraints.","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/#TruncateMinimum","page":"Documentation","title":"TruncateMinimum","text":"","category":"section"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"To truncate the overall population below at some absolute value, use a TruncateMinimum sampling constraint.","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"constraint = TruncateMinimum(-1.1)\npop_mixed_constrained = constrain(pop_mixed, constraint);\n\nn_draws = 500\nx = resample(pop_mixed, n_draws)\nxc = resample(pop_mixed_constrained, n_draws)\n\np1 = scatter(x, label = \"\", title = \"resampling before constraint\")\np2 = scatter(xc, label = \"\", title = \"resampling after constraint\")\nhline!([constraint.min], label = \"TruncateMinimum(-1.1)\")\nplot(p1, p2, layout = (2, 1), link = :both, ylims = (-3, 3), ms = 1)\nxlabel!(\"Sampling #\"); ylabel!(\"Value\")","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"(Image: )","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/#TruncateMaximum","page":"Documentation","title":"TruncateMaximum","text":"","category":"section"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"To truncate the overall population above at some absolute value, use a TruncateMaximum sampling constraint.","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"constraint = TruncateMaximum(1.5)\npop_mixed_constrained = constrain(pop_mixed, constraint);\n\nn_draws = 500\nx = resample(pop_mixed, n_draws)\nxc = resample(pop_mixed_constrained, n_draws)\n\np1 = scatter(x, label = \"\", title = \"resampling before constraint\")\np2 = scatter(xc, label = \"\", title = \"resampling after constraint\")\nhline!([constraint.max], label = \"TruncateMaximum(1.5)\")\nplot(p1, p2, layout = (2, 1), link = :both, ylims = (-3, 3), ms = 1)\nxlabel!(\"Sampling #\"); ylabel!(\"Value\")","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"(Image: )","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/#TruncateRange","page":"Documentation","title":"TruncateRange","text":"","category":"section"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"To truncate the overall population above at some range of values, use a TruncateRange sampling constraint.","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"constraint = TruncateRange(-1.5, 1.7)\npop_mixed_constrained = constrain(pop_mixed, constraint);\n\nn_draws = 500\nx = resample(pop_mixed, n_draws)\nxc = resample(pop_mixed_constrained, n_draws)\n\np1 = scatter(x, label = \"\", title = \"resampling before constraint\")\np2 = scatter(xc, label = \"\", title = \"resampling after constraint\")\nhline!([constraint.min, constraint.max], label = \"TruncateRange(-1.5, 1.7)\")\n\nplot(p1, p2, layout = (2, 1), link = :both, ylims = (-3, 3), ms = 1)\nxlabel!(\"Sampling #\"); ylabel!(\"Value\")","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"(Image: )","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/#TruncateLowerQuantile","page":"Documentation","title":"TruncateLowerQuantile","text":"","category":"section"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"To truncate the overall population below at some quantile of  the overall population, use a TruncateLowerQuantile sampling constraint.","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"constraint = TruncateLowerQuantile(0.2)\n\n# Constrain the population below at the lower 20th percentile\n# Resample the entire population (and its subpopulations) according to \n# their probabilities 30000 times to determine the percentile bound.\nn_draws = 30000\npop_mixed_constrained = constrain(pop_mixed, constraint, n_draws);\n\n# Calculate quantile using the same number of samples for plotting.\n# Will not be exactly the same as the quantile actually used for \n# truncating, except in the limit n -> ∞\nq = quantile(resample(pop_mixed, n_draws), constraint.lower_quantile)\n\nn_draws_plot = 3000\nx = resample(pop_mixed, n_draws_plot)\nxc = resample(pop_mixed_constrained, n_draws_plot)\n\np1 = scatter(x, label = \"\", title = \"resampling before constraint\")\np2 = scatter(xc, label = \"\", title = \"resampling after constraint\")\nhline!([lq], label = \"TruncateLowerQuantile(0.2)\")\nplot(p1, p2, layout = (2, 1), link = :both, ms = 1, ylims = (-6, 4))\nxlabel!(\"Sampling #\"); ylabel!(\"Value\")","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"(Image: )","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/#TruncateUpperQuantile","page":"Documentation","title":"TruncateUpperQuantile","text":"","category":"section"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"To truncate the overall population below at some quantile of  the overall population, use a TruncateUpperQuantile sampling constraint.","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"constraint = TruncateUpperQuantile(0.8)\n\n# Constrain the population below at the lower 20th percentile\n# Resample the entire population (and its subpopulations) according to \n# their probabilities 30000 times to determine the percentile bound.\nn_resample_draws = 30000\npop_mixed_constrained = constrain(pop_mixed, constraint, n_resample_draws);\n\n# Calculate quantile using the same number of samples for plotting.\n# Will not be exactly the same as the quantile actually used for \n# truncating, except in the limit n_resample_draws -> ∞\nq = quantile(resample(pop_mixed, n_resample_draws), constraint.upper_quantile)\n\nn_plot_draws = 3000\nx = resample(pop_mixed, n_plot_draws)\nxc = resample(pop_mixed_constrained, n_plot_draws)\n\np1 = scatter(x, label = \"\", title = \"resampling before constraint\")\np2 = scatter(xc, label = \"\", title = \"resampling after constraint\")\nhline!([q], label = \"TruncateUpperQuantile(0.8)\")\nplot(p1, p2, layout = (2, 1), link = :both, ms = 1, ylims = (-6, 4))\nxlabel!(\"Sampling #\"); ylabel!(\"Value\")","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"(Image: )","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/#TruncateQuantiles","page":"Documentation","title":"TruncateQuantiles","text":"","category":"section"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"To truncate the overall population below at some quantile of  the overall population, use a TruncateQuantiles sampling constraint.","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"constraint = TruncateQuantiles(0.2, 0.8)\n\n# Constrain the population below at the lower 20th percentile\n# Resample the entire population (and its subpopulations) according to \n# their probabilities 30000 times to determine the percentile bound.\nn_resample_draws = 30000\npop_mixed_constrained = constrain(pop_mixed, constraint, n_resample_draws);\n\n# Calculate quantile using the same number of samples for plotting.\n# Will not be exactly the same as the quantile actually used for \n# truncating, except in the limit n_resample_draws -> ∞\ns = resample(pop_mixed, n_resample_draws)\nqs = quantile(s, [constraint.lower_quantile, constraint.upper_quantile])\n\nn_plot_draws = 3000\nx = resample(pop_mixed, n_plot_draws)\nxc = resample(pop_mixed_constrained, n_plot_draws)\n\np1 = scatter(x, label = \"\", title = \"resampling before constraint\")\np2 = scatter(xc, label = \"\", title = \"resampling after constraint\")\nhline!([qs], label = \"TruncateQuantiles(0.2, 0.8)\")\n\nplot(p1, p2, layout = (2, 1), link = :both, ms = 1, ylims = (-6, 4))\nxlabel!(\"Sampling #\"); ylabel!(\"Value\")","category":"page"},{"location":"sampling_constraints/constrain_uncertain_values/","page":"Documentation","title":"Documentation","text":"(Image: )","category":"page"},{"location":"uncertain_datasets/uncertain_value_dataset/#Uncertain-value-datasets","page":"Uncertain value datasets","title":"Uncertain value datasets","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_value_dataset/#Documentation","page":"Uncertain value datasets","title":"Documentation","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_value_dataset/","page":"Uncertain value datasets","title":"Uncertain value datasets","text":"UncertainValueDataset","category":"page"},{"location":"uncertain_datasets/uncertain_value_dataset/#UncertainData.UncertainDatasets.UncertainValueDataset","page":"Uncertain value datasets","title":"UncertainData.UncertainDatasets.UncertainValueDataset","text":"UncertainValueDataset\n\nA dataset of uncertain values.\n\nFields\n\nvalues::AbstractVector{<:AbstractUncertainValue}: The uncertain values. Each value is   represented by an AbstractUncertainValue.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_datasets/uncertain_value_dataset/#Description","page":"Uncertain value datasets","title":"Description","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_value_dataset/","page":"Uncertain value datasets","title":"Uncertain value datasets","text":"UncertainValueDatasets is an uncertain dataset type that has no explicit index  associated with its uncertain values. This type may come with some extra functionality  that the generic UncertainDataset type does not support. ","category":"page"},{"location":"uncertain_datasets/uncertain_value_dataset/","page":"Uncertain value datasets","title":"Uncertain value datasets","text":"Use this type when you want to be explicit about the values representing data values, as opposed to indices. ","category":"page"},{"location":"uncertain_datasets/uncertain_value_dataset/#Defining-uncertain-value-datasets","page":"Uncertain value datasets","title":"Defining uncertain value datasets","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_value_dataset/#Example-1:-constructing-an-UncertainValueDataset-from-uncertain-values","page":"Uncertain value datasets","title":"Example 1: constructing an UncertainValueDataset from uncertain values","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_value_dataset/","page":"Uncertain value datasets","title":"Uncertain value datasets","text":"Let's create a random walk and pretend it represents fluctuations in the mean of an observed dataset. Assume that each data point is normally distributed, and that the i-th observation has standard deviation sigma_i in 03 05.","category":"page"},{"location":"uncertain_datasets/uncertain_value_dataset/","page":"Uncertain value datasets","title":"Uncertain value datasets","text":"Representing these data as an UncertainValueDataset is done as follows:","category":"page"},{"location":"uncertain_datasets/uncertain_value_dataset/","page":"Uncertain value datasets","title":"Uncertain value datasets","text":"o1 = UncertainValue(Normal, 0, 0.5)\no2 = UncertainValue(Normal, 2.0, 0.1)\no3 = UncertainValue(Uniform, 0, 4)\no4 = UncertainValue(Uniform, rand(100))\no5 = UncertainValue(Beta, 4, 5)\no6 = UncertainValue(Gamma, 4, 5)\no7 = UncertainValue(Frechet, 1, 2)\no8 = UncertainValue(BetaPrime, 1, 2)\no9 = UncertainValue(BetaBinomial, 10, 3, 2)\no10 = UncertainValue(Binomial, 10, 0.3)\n\nuvals = [o1, o2, o3, o4, o5, o6, o7, o8, o9, o10]\nd = UncertainValueDataset(uvals)","category":"page"},{"location":"uncertain_datasets/uncertain_value_dataset/","page":"Uncertain value datasets","title":"Uncertain value datasets","text":"The built-in plot recipes makes it a breeze to plot the dataset. Here, we'll plot the  20th to 80th percentile range error bars. ","category":"page"},{"location":"uncertain_datasets/uncertain_value_dataset/","page":"Uncertain value datasets","title":"Uncertain value datasets","text":"plot(d, [0.2, 0.8])","category":"page"},{"location":"uncertain_datasets/uncertain_value_dataset/","page":"Uncertain value datasets","title":"Uncertain value datasets","text":"(Image: )","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics/#Statistics-on-uncertain-values-and-collections","page":"Statistics on uncertain values and collections","title":"Statistics on uncertain values and collections","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics/","page":"Statistics on uncertain values and collections","title":"Statistics on uncertain values and collections","text":"This package extends many of the statistical algorithms in StatsBase for uncertain values. The statistics are computed using a resampling approach. ","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics/","page":"Statistics on uncertain values and collections","title":"Statistics on uncertain values and collections","text":"To use these methods, you first have to run the following in your Julia console  to bring the functions into scope:","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics/","page":"Statistics on uncertain values and collections","title":"Statistics on uncertain values and collections","text":"using StatsBase","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics/#Exact-vs.-approximate-error-propagation","page":"Statistics on uncertain values and collections","title":"Exact vs. approximate error propagation","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics/","page":"Statistics on uncertain values and collections","title":"Statistics on uncertain values and collections","text":"For exact error propagation of normally distributed uncertain values that are  potentially correlated, you can use Measurements.jl. It is, however, not always the case that data points have normally distributed uncertainties. ","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics/","page":"Statistics on uncertain values and collections","title":"Statistics on uncertain values and collections","text":"This where the resampling approach becomes useful. In this package, the resampling  approach allows you to approximate any statistic for  any type of uncertain value. You may still use  normal distributions to represent uncertain values, but the various statistics  are approximated through resampling, rather than computed exactly.","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics/#List-of-statistics","page":"Statistics on uncertain values and collections","title":"List of statistics","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics/","page":"Statistics on uncertain values and collections","title":"Statistics on uncertain values and collections","text":"Some statistics are implemented only for uncertain values, while other statistics are implemented only for collections of uncertain values. Some statistics also work on pairs of of uncertain values,  or pairs of uncertain value collections. Here's an overview:","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics/","page":"Statistics on uncertain values and collections","title":"Statistics on uncertain values and collections","text":"Uncertain values, on single values\nUncertain values, on pairs of values\nUncertain collections, on single collections\nUncertain collections, on pairs of collections","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics/#Accepted-collection-types","page":"Statistics on uncertain values and collections","title":"Accepted collection types","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics/","page":"Statistics on uncertain values and collections","title":"Statistics on uncertain values and collections","text":"In the documentation for the statistical methods, you'll notice that the inputs are supposed to be of type UVAL_COLLECTION_TYPES. This is a type union representing all types of collections for which the statistical methods are defined. Currently, this includes UncertainValueDataset, UncertainIndexDataset  and vectors of uncertain values (Vector{T} where T <: AbstractUncertainValue).","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics/","page":"Statistics on uncertain values and collections","title":"Statistics on uncertain values and collections","text":"const UVAL_COLLECTION_TYPES = Union{UD, UV} where {\n    UD <: AbstractUncertainValueDataset,\n    UV <: AbstractVector{T} where {T <: AbstractUncertainValue}}","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/#uncertain_value_kde","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"When your data have an empirical distribution that doesn't follow any obvious theoretical distribution, the data may be represented by a kernel density estimate.","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/#Generic-constructor","page":"Kernel density estimated distributions","title":"Generic constructor","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"UncertainValue(::AbstractVector{<:Real})","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/#UncertainData.UncertainValues.UncertainValue-Tuple{AbstractVector{var\"#s25\"} where var\"#s25\"<:Real}","page":"Kernel density estimated distributions","title":"UncertainData.UncertainValues.UncertainValue","text":"UncertainValue(values::Vector, probs::Union{Vector, AbstractWeights})\n\nConstruct a population whose members are given by values and whose sampling  probabilities are given by probs. The elements of values can be either  numeric or uncertain values of any type.\n\n\n\n\n\nUncertainValue(data::Vector{T};\n    kernel::Type{D} = Normal,\n    npoints::Int=2048) where {D <: Distributions.Distribution, T}\n\nConstruct an uncertain value by a kernel density estimate to data.\n\nFast Fourier transforms are used in the kernel density estimation, so the number of points should be a power of 2 (default = 2048).\n\n\n\n\n\nUncertainValue(kerneldensity::Type{K}, data::Vector{T};\n    kernel::Type{D} = Normal,\n    npoints::Int=2048) where {K <: UnivariateKDE, D <: Distribution, T}\n\nConstruct an uncertain value by a kernel density estimate to data.\n\nFast Fourier transforms are used in the kernel density estimation, so the number of points should be a power of 2 (default = 2048).\n\n\n\n\n\nUncertainValue(empiricaldata::AbstractVector{T},\n    d::Type{D}) where {D <: Distribution}\n\nConstructor for empirical distributions.\n\nFit a distribution of type d to the data and use that as the representation of the empirical distribution. Calls Distributions.fit behind the scenes.\n\nArguments\n\nempiricaldata: The data for which to fit the distribution.\ndistribution: A valid univariate distribution from Distributions.jl.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/uncertainvalues_kde/#Type-documentation","page":"Kernel density estimated distributions","title":"Type documentation","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"UncertainScalarKDE","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/#UncertainData.UncertainValues.UncertainScalarKDE","page":"Kernel density estimated distributions","title":"UncertainData.UncertainValues.UncertainScalarKDE","text":"UncertainScalarKDE(d::KernelDensity.UnivariateKDE, values::AbstractVector{T}, range, pdf)\n\nAn empirical value represented by a distribution estimated from actual data.\n\nFields\n\ndistribution: The UnivariateKDE estimate for the distribution of values.\nvalues: The values from which distribution is estimated.\nrange: The values for which the pdf is estimated.\npdf: The values of the pdf at each point in range.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_values/uncertainvalues_kde/#Examples","page":"Kernel density estimated distributions","title":"Examples","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"using Distributions, UncertainData\n\n# Create a normal distribution\nd = Normal()\n\n# Draw a 1000-point sample from the distribution.\nsome_sample = rand(d, 1000)\n\n# Use the implicit KDE constructor to create the uncertain value\nuv = UncertainValue(v::Vector)","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"using Distributions, UncertainData, KernelDensity\n\n# Create a normal distribution\nd = Normal()\n\n# Draw a 1000-point sample from the distribution.\nsome_sample = rand(d, 1000)\n\n# Use the explicit KDE constructor to create the uncertain value.\n# This constructor follows the same convention as when fitting distributions\n# to empirical data, so this is the recommended way to construct KDE estimates.\nuv = UncertainValue(UnivariateKDE, v::Vector)","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"using Distributions, UncertainData, KernelDensity\n\n# Create a normal distribution\nd = Normal()\n\n# Draw a 1000-point sample from the distribution.\nsome_sample = rand(d, 1000)\n\n# Use the explicit KDE constructor to create the uncertain value, specifying\n# that we want to use normal distributions as the kernel. The kernel can be\n# any valid kernel from Distributions.jl, and the default is to use normal\n# distributions.\nuv = UncertainValue(UnivariateKDE, v::Vector; kernel = Normal)","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"using Distributions, UncertainData, KernelDensity\n\n# Create a normal distribution\nd = Normal()\n\n# Draw a 1000-point sample from the distribution.\nsome_sample = rand(d, 1000)\n\n# Use the explicit KDE constructor to create the uncertain value, specifying\n# the number of points we want to use for the kernel density estimate. Fast\n# Fourier transforms are used behind the scenes, so the number of points\n# should be a power of 2 (the default is 2048 points).\nuv = UncertainValue(UnivariateKDE, v::Vector; npoints = 1024)","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/#Extended-example","page":"Kernel density estimated distributions","title":"Extended example","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"Let's create a bimodal distribution, then sample 10000 values from it.","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"using Distributions\n\nn1 = Normal(-3.0, 1.2)\nn2 = Normal(8.0, 1.2)\nn3 = Normal(0.0, 2.5)\n\n# Use a mixture model to create a bimodal distribution\nM = MixtureModel([n1, n2, n3])\n\n# Sample the mixture model.\nsamples_empirical = rand(M, Int(1e4));","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"(Image: )","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"It is not obvious which distribution to fit to such data.","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"A kernel density estimate, however, will always be a decent representation of the data, because it doesn't follow a specific distribution and adapts to the data values.","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"To create a kernel density estimate, simply call the UncertainValue(v::Vector{Number}) constructor with a vector containing the sample:","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"uv = UncertainValue(samples_empirical)","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"The plot below compares the empirical histogram (here represented as a density plot) with our kernel density estimate.","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"using Plots, StatPlots, UncertainData\nuv = UncertainValue(samples_empirical)\ndensity(mvals, label = \"10000 mixture model (M) samples\")\ndensity!(rand(uv, Int(1e4)),\n    label = \"10000 samples from KDE estimate to M\")\nxlabel!(\"data value\")\nylabel!(\"probability density\")","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"(Image: )","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/#Constructor","page":"Kernel density estimated distributions","title":"Constructor","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"UncertainValue(data::Vector{T};\n        kernel::Type{D} = Normal,\n        npoints::Int = 2048) where {D <: Distributions.Distribution, T}","category":"page"},{"location":"uncertain_values/uncertainvalues_kde/#UncertainData.UncertainValues.UncertainValue-Union{Tuple{Vector{T}}, Tuple{T}, Tuple{D}} where {D<:Distribution, T}","page":"Kernel density estimated distributions","title":"UncertainData.UncertainValues.UncertainValue","text":"UncertainValue(data::Vector{T};\n    kernel::Type{D} = Normal,\n    npoints::Int=2048) where {D <: Distributions.Distribution, T}\n\nConstruct an uncertain value by a kernel density estimate to data.\n\nFast Fourier transforms are used in the kernel density estimation, so the number of points should be a power of 2 (default = 2048).\n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/uncertainvalues_kde/#Additional-keyword-arguments-and-examples","page":"Kernel density estimated distributions","title":"Additional keyword arguments and examples","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_kde/","page":"Kernel density estimated distributions","title":"Kernel density estimated distributions","text":"If the only argument to the UncertainValue constructor is a vector of values, the default behaviour is to represent the distribution by a kernel density estimate (KDE), i.e. UncertainValue(data). Gaussian kernels are used by default. The syntax UncertainValue(UnivariateKDE, data) will also work if KernelDensity.jl is loaded.","category":"page"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#resampling_schemes_uncertainindexvaluecollections","page":"List of resampling schemes and their purpose","title":"List of resampling schemes and their purpose","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/","page":"List of resampling schemes and their purpose","title":"List of resampling schemes and their purpose","text":"For collections of uncertain data, sampling constraints can be represented using the ConstrainedIndexValueResampling type. This allows for passing complicated sampling  constraints as a single input argument to functions that accept uncertain value collections.  Sequential constraints also make it possible to impose constraints on the indices of  datasets while sampling.","category":"page"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#Constrained","page":"List of resampling schemes and their purpose","title":"Constrained","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#Constrained-resampling","page":"List of resampling schemes and their purpose","title":"Constrained resampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/","page":"List of resampling schemes and their purpose","title":"List of resampling schemes and their purpose","text":"ConstrainedIndexValueResampling","category":"page"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.ConstrainedIndexValueResampling","page":"List of resampling schemes and their purpose","title":"UncertainData.Resampling.ConstrainedIndexValueResampling","text":"ConstrainedIndexValueResampling(constraints::NTuple{N_DATASETS, NTuple{N_VARIABLES, Union{SamplingConstraint, Vector{<:SamplingConstraint}}}}, n::Int)\n\nIndicates that resampling should be performed with constraints on a set of uncertain index-value datasets. See examples for usage.\n\nFields\n\nconstraints. The constraints for the datasets. The constraints are represented as a tuple of length    N_DATASETS, where the i-th tuple element is itself a N_VARIABLES-length tuple containing the   constraints for the N_VARIABLES different variables. See \"Indexing\" below for details.    Constraints for each individual variable must be supplied as either a single sampling constraint,    or as a vector of sampling constraints with length matching the length of the variable    (Union{SamplingConstraint, Vector{<:SamplingConstraint}}}). For example, if the j-th variable    for the i-th dataset contains 352 observations, then constraints[i, j] must be either a single    sampling constraint (e.g. TruncateStd(1.1)) or a vector of 352 different sampling constraints    (e.g. [TruncateStd(1.0 + rand()) for i = 1:352]).\nn::Int. The number of draws. \n\nIndexing\n\nAssume c is an instance of ConstrainedIndexValueResampling. Then \n\nc[i] returns the NTuple of constraints for the i-th dataset, and\nc[i, j] returns the constraint(s) for the j-th variable of the i-th dataset.\n\nExample\n\nDefining ConstrainedIndexValueResamplings.\n\nAssume we want to constraints three separate uncertain index-value datasets, with different  sampling constraints for the indices and the values for each of the datasets.\n\n# (index constraints, value constraints) for the 1st, 2nd and 3rd datasets\nc1 = (TruncateStd(1), TruncateStd(1.1))\nc2 = (TruncateStd(0.5), TruncateQuantiles(0.1, 0.8))\nc3 = (TruncateQuantiles(0.05, 0.95), TruncateQuantiles(0.33, 0.67))\nc = ConstrainedIndexValueResampling(c1, c2, c3)\n\nNow,\n\nc[2] returns the NTuple of constraints for the 2nd dataset, and\nc[1, 2] returns the constraint(s) for the 2nd variable of the 1st dataset.\n\nControlling the number of draws\n\nThe number of draws defaults to 1 if not specified. To indicate that  more than one draw should be performed, just input the number of draws before supplying the constraints to the constructor.\n\nc1 = (TruncateStd(1), TruncateStd(1.1))\nc2 = (TruncateStd(0.5), TruncateQuantiles(0.1, 0.8))\n\n# A single draw\nc_single = ConstrainedIndexValueResampling(c1, c2)\n\n# Multiple (300) draws\nc_multiple = ConstrainedIndexValueResampling(300, c1, c2) \n\nDetailed example\n\nLet's say we have two uncertain index-value datasets x and y. We want to constrain the furnishing distributions/population for both the time indices and values, both for x and y. For x, truncate the indices at 0.8 times the standard  deviation around their mean, and for y, trucate the indices at 1.5 times the  standard deviation around their mean. Next, truncate xs values at roughly  (roughly) at their 20th percentile range, and truncate ys values at roughly their 80th percentile range. \n\nAll this information can be combined in a  ConstrainedIndexValueResampling instance. This instance can be passed on to any function that accepts uncertain index-value datasets, to indicate that resampling should be performed on truncated versions of the  distributions/populations furnishing the datasets. \n\n# some noise, so we don't truncate all furnishing distributions/population at \n# exactly the same quantiles.\nr = Uniform(0, 0.01)\n\nconstraints_x_inds = TruncateStd(0.8)\nconstraints_y_inds = TruncateStd(1.5)\nconstraints_x_vals = [TruncateQuantiles(0.4 + rand(r), 0.6 + rand(r)) for i = 1:length(x)];\nconstraints_y_vals = [TruncateQuantiles(0.1 + rand(r), 0.9 + rand(r)) for i = 1:length(x)];\n\ncs_x = (constraints_x_inds, constraints_x_vals)\ncs_y = (constraints_y_inds, constraints_y_vals)\n\nresampling = ConstrainedIndexValueResampling(cs_x, cs_y)\n\n\n\n\n\n","category":"type"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#Sequential","page":"List of resampling schemes and their purpose","title":"Sequential","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#Sequential-resampling","page":"List of resampling schemes and their purpose","title":"Sequential resampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/","page":"List of resampling schemes and their purpose","title":"List of resampling schemes and their purpose","text":"SequentialResampling","category":"page"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.SequentialResampling","page":"List of resampling schemes and their purpose","title":"UncertainData.Resampling.SequentialResampling","text":"SequentialResampling{SequentialSamplingConstraint}\n\nIndicates that resampling should be done by resampling sequentially.\n\nFields\n\nsequential_constraint::SequentialSamplingConstraint. The sequential sampling constraint,   for example StrictlyIncreasing().\n\nExamples\n\nSequentialResampling(StrictlyIncreasing())\n\n\n\n\n\n","category":"type"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#Sequential-and-interpolated-resampling","page":"List of resampling schemes and their purpose","title":"Sequential and interpolated resampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/","page":"List of resampling schemes and their purpose","title":"List of resampling schemes and their purpose","text":"SequentialInterpolatedResampling","category":"page"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.SequentialInterpolatedResampling","page":"List of resampling schemes and their purpose","title":"UncertainData.Resampling.SequentialInterpolatedResampling","text":"SequentialInterpolatedResampling{SequentialSamplingConstraint, InterpolationGrid}\n\nIndicates that resampling should be done by first resampling sequentially, then  interpolating the sample to an interpolation grid.\n\nFields\n\nsequential_constraint::SequentialSamplingConstraint. The sequential sampling constraint,   for example StrictlyIncreasing().\ngrid::InterpolationGrid. The grid onto which the resampled draw (generated according to   the sequential constraint) is interpolated, for example RegularGrid(0, 100, 2.5).\n\nExamples\n\nFor example, SequentialInterpolatedResampling(StrictlyIncreasing(), RegularGrid(0:2:100)) indicates a sequential draw that is then interpolated to the grid 0:2:100.\n\n\n\n\n\n","category":"type"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#Binned-resampling","page":"List of resampling schemes and their purpose","title":"Binned resampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#BinnedResampling","page":"List of resampling schemes and their purpose","title":"BinnedResampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/","page":"List of resampling schemes and their purpose","title":"List of resampling schemes and their purpose","text":"BinnedResampling","category":"page"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.BinnedResampling","page":"List of resampling schemes and their purpose","title":"UncertainData.Resampling.BinnedResampling","text":"BinnedResampling(left_bin_edges, n::Int; bin_repr = UncertainScalarKDE)\nBinnedResampling(UncertainScalarKDE, left_bin_edges, n::Int)\nBinnedResampling(UncertainScalarPopulation, left_bin_edges, n::Int)\nBinnedResampling(RawValues, left_bin_edges, n::Int)\n\nIndicates that binned resampling should be performed.\n\nFields\n\nleft_bin_edges. The left edgepoints of the bins. Either a range or some    custom type which implements minimum and step methods.\nn. The number of draws. Each point in the dataset is sampled n times.   If there are m points in the dataset, then the total number of draws    is n*m.\nbin_repr. A type of uncertain value indicating how each bin should be    summarised (UncertainScalarKDE for kernel density estimated distributions   in each bin, UncertainScalarPopulation to represent values in each bin    as an equiprobable population) or not summarise but return raw values    falling in each bin (RawValues).\n\nExamples\n\nusing UncertainData\n\n# Resample on a grid from 0 to 200 in steps of 20\ngrid = 0:20:200\n\n# The number of samples per point in the dataset\nn_draws = 10000\n\n# Create the resampling scheme. Use kernel density estimates to distribution \n# in each bin.\nresampling = BinnedResampling(grid, n_draws, bin_repr = UncertainScalarKDE)\n\n# Represent each bin as an equiprobably population \nresampling = BinnedResampling(grid, n_draws, bin_repr = UncertainScalarPopulation)\n\n# Keep raw values for each bin (essentially the same as UncertainScalarPopulation,\n# but avoids storing an additional vector of weights for the population members).\nresampling = BinnedResampling(grid, n_draws, bin_repr = RawValues)\n\n\n\n\n\n","category":"type"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#BinnedWeightedResampling","page":"List of resampling schemes and their purpose","title":"BinnedWeightedResampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/","page":"List of resampling schemes and their purpose","title":"List of resampling schemes and their purpose","text":"BinnedWeightedResampling","category":"page"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.BinnedWeightedResampling","page":"List of resampling schemes and their purpose","title":"UncertainData.Resampling.BinnedWeightedResampling","text":"BinnedWeightedResampling(left_bin_edges, weights, n::Int; bin_repr = UncertainScalarKDE)\nBinnedWeightedResampling(UncertainScalarKDE, left_bin_edges, weights, n::Int)\nBinnedWeightedResampling(UncertainScalarPopulation, left_bin_edges, weights, n::Int)\nBinnedWeightedResampling(RawValues, left_bin_edges, weights, n::Int)\n\nIndicates that binned resampling should be performed, but weighting each point in the dataset differently.\n\nFields\n\nleft_bin_edges. The left edgepoints of the bins. Either a range or some    custom type which implements minimum and step methods.\nweights. The relative probability weights assigned to each point. \nn. The total number of draws. These are distributed among the    points of the dataset according to weights.\nbin_repr. A type of uncertain value indicating how each bin should be    summarised (UncertainScalarKDE for kernel density estimated distributions   in each bin, UncertainScalarPopulation to represent values in each bin    as an equiprobable population) or not summarise but return raw values    falling in each bin (RawValues).\n\nExamples\n\nusing UncertainData, StatsBase\n\n# Resample on a grid from 0 to 200 in steps of 20\ngrid = 0:20:200\n\n# Assume our dataset has 50 points. We'll assign random weights to them.\nwts = Weights(rand(50))\n\n# The total number of draws (on average 1000000/50 = 20000 draws per point\n# if weights are equal)\nn_draws = 10000000\n\n# Create the resampling scheme. Use kernel density estimates to distribution \n# in each bin.\nresampling = BinnedWeightedResampling(grid, wts, n_draws, bin_repr = UncertainScalarKDE)\n\n# Represent each bin as an equiprobably population \nresampling = BinnedWeightedResampling(grid, wts, n_draws, bin_repr = UncertainScalarPopulation)\n\n# Keep raw values for each bin (essentially the same as UncertainScalarPopulation,\n# but avoids storing an additional vector of weights for the population members).\nresampling = BinnedWeightedResampling(grid, wts n_draws, bin_repr = RawValues)\n\n\n\n\n\n","category":"type"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#BinnedMeanResampling","page":"List of resampling schemes and their purpose","title":"BinnedMeanResampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/","page":"List of resampling schemes and their purpose","title":"List of resampling schemes and their purpose","text":"BinnedMeanResampling","category":"page"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.BinnedMeanResampling","page":"List of resampling schemes and their purpose","title":"UncertainData.Resampling.BinnedMeanResampling","text":"BinnedMeanResampling\n\nBinned resampling where each bin is summarised using  the mean of all draws falling in that bin.\n\nFields\n\nleft_bin_edges. The left edgepoints of the bins. Either a range or some    custom type which implements minimum and step methods.\nn. The number of draws. Each point in the dataset is sampled n times.   If there are m points in the dataset, then the total number of draws    is n*m.\n\nExamples\n\nusing UncertainData\n\n# Resample on a grid from 0 to 200 in steps of 20\ngrid = 0:20:200\n\n# The number of samples per point in the dataset\nn_draws = 10000\n\n# Create the resampling scheme\nresampling = BinnedMeanResampling(grid, n_draws)\n\n\n\n\n\n","category":"type"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#BinnedMeanWeightedResampling","page":"List of resampling schemes and their purpose","title":"BinnedMeanWeightedResampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/","page":"List of resampling schemes and their purpose","title":"List of resampling schemes and their purpose","text":"BinnedMeanWeightedResampling","category":"page"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.BinnedMeanWeightedResampling","page":"List of resampling schemes and their purpose","title":"UncertainData.Resampling.BinnedMeanWeightedResampling","text":"BinnedMeanWeightedResampling\n\nBinned resampling where each bin is summarised using the mean of all draws  falling in that bin. Points in the dataset are sampled with probabilities according to weights.\n\nFields\n\nleft_bin_edges. The left edgepoints of the bins. Either a range or some    custom type which implements minimum and step methods.\nweights. The relative probability weights assigned to each point. \nn. The total number of draws. These are distributed among the    points of the dataset according to weights.\n\nExamples\n\nusing UncertainData, StatsBase\n\n# Resample on a grid from 0 to 200 in steps of 20\ngrid = 0:20:200\n\n# Assume our dataset has 50 points. We'll assign random weights to them.\nwts = Weights(rand(50))\n\n# The total number of draws (on average 1000000/50 = 20000 draws per point\n# if weights are equal)\nn_draws = 10000000\n\n# Create the resampling scheme\nresampling = BinnedMeanWeightedResampling(grid, wts, n_draws)\n\n\n\n\n\n","category":"type"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#Interpolated-and-binned-resampling","page":"List of resampling schemes and their purpose","title":"Interpolated-and-binned resampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#InterpolateAndBin","page":"List of resampling schemes and their purpose","title":"InterpolateAndBin","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/","page":"List of resampling schemes and their purpose","title":"List of resampling schemes and their purpose","text":"InterpolateAndBin","category":"page"},{"location":"resampling/resampling_schemes/resampling_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.InterpolateAndBin","page":"List of resampling schemes and their purpose","title":"UncertainData.Resampling.InterpolateAndBin","text":"InterpolateAndBin{L}(f::Function, left_bin_edges, intp::L, intp_grid,\n    extrapolation_bc::Union{<:Real, Interpolations.BoundaryCondition})\n\nIndicates that a dataset consisting of both indices and values should first be interpolated to the intp_grid grid using the provided intp scheme  (e.g. Linear()). After interpolating, assign the interpolated values  to the bins defined by left_bin_edges and summarise the values falling in each bin using the summary function f (e.g. mean).\n\nExample\n\nusing UncertainData, Interpolations, StatsBase\n\n# Assume we have the following unevenly spaced data with some `NaN` values\nT = 100\ntime = sample(1.0:T*5, T, ordered = true, replace = false)\ny1 = rand(T)\ntime[rand(1:T, 10)] .= NaN \ny1[rand(1:T, 10)] .= NaN \n\n# We want to first intepolate the dataset linearly to a regular time grid \n# with steps of `0.1` time units.\nintp = Linear()\nintp_grid = 0:0.1:1000\nextrapolation_bc = Flat(OnGrid())\n\n# Then, bin the dataset in time bins `50` time units wide, collect all \n# values in each bin and summarise them using `f`.\nf = mean\nleft_bin_edges = 0:50:1000\n\nr = InterpolateAndBin(f, left_bin_edges, intp, intp_grid, extrapolation_bc)\n\n\n\n\n\n","category":"type"},{"location":"sampling_constraints/available_constraints/#Available-sampling-constraints","page":"Available sampling constraints","title":"Available sampling constraints","text":"","category":"section"},{"location":"sampling_constraints/available_constraints/","page":"Available sampling constraints","title":"Available sampling constraints","text":"The following sampling constraints are available. These constraints may be used in any resampling setting.","category":"page"},{"location":"sampling_constraints/available_constraints/#Standard-deviation","page":"Available sampling constraints","title":"Standard deviation","text":"","category":"section"},{"location":"sampling_constraints/available_constraints/","page":"Available sampling constraints","title":"Available sampling constraints","text":"TruncateStd","category":"page"},{"location":"sampling_constraints/available_constraints/#UncertainData.SamplingConstraints.TruncateStd","page":"Available sampling constraints","title":"UncertainData.SamplingConstraints.TruncateStd","text":"TruncateStd(nσ::Number)\n\nA constraint indicating that the distribution furnishing an uncertain value should be truncated at the mean ± nσ (n standard deviations).\n\nNotes\n\nBeware when you apply the TruncateStd constraint to a (usually a numeric)   population with a small value range. With nσ small, you might end up with    a population mean between the actual values, so that the range    [mean(pop) - nσ*std(pop), mean(pop) + nσ*std(pop)] returns nothing.\n\n\n\n\n\n","category":"type"},{"location":"sampling_constraints/available_constraints/#Minimum-value","page":"Available sampling constraints","title":"Minimum value","text":"","category":"section"},{"location":"sampling_constraints/available_constraints/","page":"Available sampling constraints","title":"Available sampling constraints","text":"TruncateMinimum","category":"page"},{"location":"sampling_constraints/available_constraints/#UncertainData.SamplingConstraints.TruncateMinimum","page":"Available sampling constraints","title":"UncertainData.SamplingConstraints.TruncateMinimum","text":"TruncateMinimum(min::Number)\n\nA constraint indicating that the distribution furnishing an uncertain value should be truncated below at some specified minimum value.\n\n\n\n\n\n","category":"type"},{"location":"sampling_constraints/available_constraints/#Maximum-value","page":"Available sampling constraints","title":"Maximum value","text":"","category":"section"},{"location":"sampling_constraints/available_constraints/","page":"Available sampling constraints","title":"Available sampling constraints","text":"TruncateMaximum","category":"page"},{"location":"sampling_constraints/available_constraints/#UncertainData.SamplingConstraints.TruncateMaximum","page":"Available sampling constraints","title":"UncertainData.SamplingConstraints.TruncateMaximum","text":"TruncateMaximum(max::Number)\n\nA constraint indicating that the distribution furnishing an uncertain value should be truncated above at some specified maximum value.\n\n\n\n\n\n","category":"type"},{"location":"sampling_constraints/available_constraints/#Value-range","page":"Available sampling constraints","title":"Value range","text":"","category":"section"},{"location":"sampling_constraints/available_constraints/","page":"Available sampling constraints","title":"Available sampling constraints","text":"TruncateRange","category":"page"},{"location":"sampling_constraints/available_constraints/#UncertainData.SamplingConstraints.TruncateRange","page":"Available sampling constraints","title":"UncertainData.SamplingConstraints.TruncateRange","text":"TruncateRange(min::Number, max::Number)\n\nA constraint indicating that the distribution furnishing an uncertain value should be truncated at some range [min, max].\n\n\n\n\n\n","category":"type"},{"location":"sampling_constraints/available_constraints/#Lower-quantile","page":"Available sampling constraints","title":"Lower quantile","text":"","category":"section"},{"location":"sampling_constraints/available_constraints/","page":"Available sampling constraints","title":"Available sampling constraints","text":"TruncateLowerQuantile","category":"page"},{"location":"sampling_constraints/available_constraints/#UncertainData.SamplingConstraints.TruncateLowerQuantile","page":"Available sampling constraints","title":"UncertainData.SamplingConstraints.TruncateLowerQuantile","text":"TruncateLowerQuantile(lower_quantile::Float64)\n\nA constraint indicating that the distribution furnishing an uncertain value should be truncated below at some quantile.\n\n\n\n\n\n","category":"type"},{"location":"sampling_constraints/available_constraints/#Upper-quantile","page":"Available sampling constraints","title":"Upper quantile","text":"","category":"section"},{"location":"sampling_constraints/available_constraints/","page":"Available sampling constraints","title":"Available sampling constraints","text":"TruncateUpperQuantile","category":"page"},{"location":"sampling_constraints/available_constraints/#UncertainData.SamplingConstraints.TruncateUpperQuantile","page":"Available sampling constraints","title":"UncertainData.SamplingConstraints.TruncateUpperQuantile","text":"TruncateUpperQuantile(upper_quantile::Float64)\n\nA constraint indicating that the distribution furnishing an uncertain value should be truncated above at some quantile.\n\n\n\n\n\n","category":"type"},{"location":"sampling_constraints/available_constraints/#Quantile-range","page":"Available sampling constraints","title":"Quantile range","text":"","category":"section"},{"location":"sampling_constraints/available_constraints/","page":"Available sampling constraints","title":"Available sampling constraints","text":"TruncateQuantiles","category":"page"},{"location":"sampling_constraints/available_constraints/#UncertainData.SamplingConstraints.TruncateQuantiles","page":"Available sampling constraints","title":"UncertainData.SamplingConstraints.TruncateQuantiles","text":"TruncateQuantiles(lower_quantile::Float64, upper_quantile::Float64)\n\nA constraint indicating that the distribution furnishing an uncertain value should be truncated at some quantile quantile (lower_quantile, upper_quantile).\n\n\n\n\n\n","category":"type"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/#UncertainIndexValueDataset","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"","category":"section"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"Resampling UncertainIndexValueDatasets is done in the same manner as for uncertain  values and UncertainDatasets. ","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"See also the list of  available sampling constraints.","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/#Method-documentation","page":"UncertainIndexValueDataset","title":"Method documentation","text":"","category":"section"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/#No-constraints","page":"UncertainIndexValueDataset","title":"No constraints","text":"","category":"section"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"resample(udata::UncertainIndexValueDataset) ","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/#UncertainData.Resampling.resample-Tuple{UncertainIndexValueDataset}","page":"UncertainIndexValueDataset","title":"UncertainData.Resampling.resample","text":"resample(udata::UncertainIndexValueDataset) -> Tuple{Vector{Float64}, Vector{Float64}}\n\nResample an uncertain index-value dataset in an element-wise manner.\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"resample(udata::UncertainIndexValueDataset, n::Int) ","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/#UncertainData.Resampling.resample-Tuple{UncertainIndexValueDataset, Int64}","page":"UncertainIndexValueDataset","title":"UncertainData.Resampling.resample","text":"resample(udata::UncertainIndexValueDataset, \n\tn::Int) -> Vector{Tuple{Vector{Float64}, Vector{Float64}}}\n\nResample n realizations an uncertain index-value dataset in an element-wise manner. \n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/#Same-constraint-to-both-indices-and-data-values","page":"UncertainIndexValueDataset","title":"Same constraint to both indices and data values","text":"","category":"section"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"resample(udata::UncertainIndexValueDataset, \n        constraint::Union{SamplingConstraint, Vector{SamplingConstraint}})","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/#UncertainData.Resampling.resample-Tuple{UncertainIndexValueDataset, Union{SamplingConstraint, Vector{SamplingConstraint}}}","page":"UncertainIndexValueDataset","title":"UncertainData.Resampling.resample","text":"resample(udata::UncertainIndexValueDataset, \n\tconstraint::Union{SamplingConstraint, Vector{SamplingConstraint}}) -> Tuple{Vector{Float64}, Vector{Float64}}\n\nResample an uncertain index-value dataset in an element-wise manner. \n\nEnforces the provided sampling constraint to all uncertain values in the dataset, both  indices and data values.\n\nIf a single constraint is provided, then that constraint will be applied to all values. If a  vector of constraints (as many as there are values) is provided, then the constraints are  applied element-wise to both the indices and the data values.\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"resample(udata::UncertainIndexValueDataset, \n\tconstraint::Union{SamplingConstraint, Vector{SamplingConstraint}},\n        n::Int)","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/#UncertainData.Resampling.resample-Tuple{UncertainIndexValueDataset, Union{SamplingConstraint, Vector{SamplingConstraint}}, Int64}","page":"UncertainIndexValueDataset","title":"UncertainData.Resampling.resample","text":"resample(udata::UncertainIndexValueDataset, \n\tconstraint::Union{SamplingConstraint, Vector{SamplingConstraint}},\n\tn::Int) -> Tuple{Vector{Float64}, Vector{Float64}}\n\nResample n realizations of an uncertain index-value dataset in an element-wise manner. \n\nEnforces the provided sampling constraint to all uncertain values in the dataset, both  indices and data values.\n\nIf a single constraint is provided, that constraint will be applied to all values. If a  vector of constraints (as many as there are values) is provided, then the constraints are  applied element-wise to both the indices and the data values.\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/#Different-constraints-to-indices-and-data-values","page":"UncertainIndexValueDataset","title":"Different constraints to indices and data values","text":"","category":"section"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"resample(udata::UncertainIndexValueDataset, \n\tconstraint_idxs::Union{SamplingConstraint, Vector{SamplingConstraint}}, \n\tconstraint_vals::Union{SamplingConstraint, Vector{SamplingConstraint}})","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/#UncertainData.Resampling.resample-Tuple{UncertainIndexValueDataset, Union{SamplingConstraint, Vector{SamplingConstraint}}, Union{SamplingConstraint, Vector{SamplingConstraint}}}","page":"UncertainIndexValueDataset","title":"UncertainData.Resampling.resample","text":"resample(udata::UncertainIndexValueDataset, \n\tconstraint_idxs::Union{SamplingConstraint, Vector{SamplingConstraint}}, \n\tconstraint_vals::Union{SamplingConstraint, Vector{SamplingConstraint}}) -> Tuple{Vector{Float64}, Vector{Float64}}\n\nResample an uncertain index-value dataset in an element-wise manner. \n\nEnforces separate sampling constraints to the indices and to the data values. \n\nIf a single constraint is provided, that constraint will be applied to all values. If a  vector of constraints (as many as there are values) is provided, then the constraints are  applied element-wise.\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"resample(udata::UncertainIndexValueDataset, \n\tconstraint_idxs::Union{SamplingConstraint, Vector{SamplingConstraint}}, \n\tconstraint_vals::Union{SamplingConstraint, Vector{SamplingConstraint}},\n        n::Int)","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/#UncertainData.Resampling.resample-Tuple{UncertainIndexValueDataset, Union{SamplingConstraint, Vector{SamplingConstraint}}, Union{SamplingConstraint, Vector{SamplingConstraint}}, Int64}","page":"UncertainIndexValueDataset","title":"UncertainData.Resampling.resample","text":"resample(udata::UncertainIndexValueDataset, \n\tconstraint_idxs::Union{SamplingConstraint, Vector{SamplingConstraint}}, \n\tconstraint_vals::Union{SamplingConstraint, Vector{SamplingConstraint}},\n\tn::Int) -> Vector{Tuple{Vector{Float64}, Vector{Float64}}}\n\nResample n realizations of an uncertain index-value dataset in an element-wise manner. \n\nEnforces separate sampling constraints to the indices and to the data values. \n\nIf a single constraint is provided, that constraint will be applied to all values. If a  vector of constraints (as many as there are values) is provided, then the constraints are  applied element-wise.\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/#Examples","page":"UncertainIndexValueDataset","title":"Examples","text":"","category":"section"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/#Same-constraint-for-all-uncertain-values","page":"UncertainIndexValueDataset","title":"Same constraint for all uncertain values","text":"","category":"section"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"First, let's define some data to work on.","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"using UncertainData, Plots\ngr()\nr1 = [UncertainValue(Normal, rand(), rand()) for i = 1:10]\nr2 = UncertainValue(rand(10000))\nr3 = UncertainValue(Uniform, rand(10000))\nr4 = UncertainValue(Normal, -0.1, 0.5)\nr5 = UncertainValue(Gamma, 0.4, 0.8)\n\nu_values = [r1; r2; r3; r4; r5]\nu_timeindices = [UncertainValue(Normal, i, rand(Uniform(0, 1))) for i = 1:length(u_values)]\nuindices = UncertainDataset(u_timeindices);\nudata = UncertainDataset(u_values);\n\n# Now, gather uncertain indices and uncertain data values\nx = UncertainIndexValueDataset(uindices, udata)","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"By default, the plot recipe shows the median and 33rd to 67th percentile range error bars.  Let's use the default plot recipe, and add some line plots with resampled realizations  of the dataset.","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"p = plot(x)\n\nfor i = 1:100\n    s = resample(x, TruncateQuantiles(0.33, 0.67), TruncateQuantiles(0.33, 0.67))\n    scatter!(p, s[1], s[2], label = \"\", lw = 0.3, lα = 0.1, lc = :black,\n            mc = :black, ms = 0.5, mα = 0.4)\n    plot!(p, s[1], s[2], label = \"\", lw = 0.3, lα = 0.1, lc = :black,\n            mc = :black, ms = 0.5, mα = 0.4)\nend\np","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"(Image: )","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"This would of course also work with any other sampling constraint that is valid for your  dataset. Let's demonstrate with a few more examples.","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/#Different-constraints-for-indices-and-data-values","page":"UncertainIndexValueDataset","title":"Different constraints for indices and data values","text":"","category":"section"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"Let's say that we want to treat the uncertainties of the indices (time, in this case)  separately from the uncertainties of the data values. ","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"First, let's define a dataset to work on.","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"using UncertainData, Plots\ngr()\nr1 = [UncertainValue(Normal, rand(), rand()) for i = 1:10]\nr2 = UncertainValue(rand(10000))\nr3 = UncertainValue(Uniform, rand(10000))\nr4 = UncertainValue(Normal, -0.1, 0.5)\nr5 = UncertainValue(Gamma, 0.4, 0.8)\n\nu_values = [r1; r2; r3; r4; r5]\nu_timeindices = [UncertainValue(Normal, i, rand(Uniform(0, 1))) for i = 1:length(u_values)]\nuindices = UncertainDataset(u_timeindices);\nudata = UncertainDataset(u_values);\n\n# Now, gather uncertain indices and uncertain data values\nx = UncertainIndexValueDataset(uindices, udata)","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"Let's pretend every 2nd time index has many outliers which we don't trust, so we restrict  resampling of those values to the 30th to 70th percentile range. For the remaining time  indices, there are some outliers outliers, but these are concentrated at the lower end of  the distributions, so we'll resample by truncating the furnishing distributions below at  the 10th percentile.","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"For the data values, we pretend that the same applies: every 2nd value has a bunch of  outliers, so we restrict the support of the distributions of those uncertain values to  1.5 standard deviations around the mean. For the remaining data values, we'll resample  from the the 20th to 80th percentile range.","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"Now, define the constraints as described:","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"# Define the constraints\nn_vals = length(x)\n\nindex_constraints = Vector{SamplingConstraint}(undef, n_vals)\nvalue_constraints = Vector{SamplingConstraint}(undef, n_vals)\n\nfor i = 1:n_vals\n    if i % 2 == 0\n        index_constraints[i] = TruncateQuantiles(0.3, 0.7)\n        value_constraints[i] = TruncateStd(1.5)\n    else\n        index_constraints[i] = TruncateLowerQuantile(0.1)\n        value_constraints[i] = TruncateQuantiles(0.2, 0.8)  \n    end\nend","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"Finally, plot the realizations.","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"# Resample a bunch of times and plot the realizations both as lines as scatter points\np = plot(xlabel = \"Index\", ylabel = \"Value\")\nfor i = 1:500\n    s = resample(x, index_constraints, value_constraints)\n    scatter!(p, s[1], s[2], label = \"\", lw = 0.3, lα = 0.1, lc = :black,\n            mc = :black, ms = 0.5, mα = 0.4)\n    plot!(p, s[1], s[2], label = \"\", lw = 0.3, lα = 0.1, lc = :black,\n            mc = :black, ms = 0.5, mα = 0.4)\nend\np","category":"page"},{"location":"resampling/resampling_uncertain_indexvalue_datasets/","page":"UncertainIndexValueDataset","title":"UncertainIndexValueDataset","text":"(Image: )","category":"page"},{"location":"uncertain_values/uncertainvalues_certainvalue/","page":"Generic constructor","title":"Generic constructor","text":"The CertainValue allows representation of values with no uncertainty. It behaves  just as a scalar, but can be mixed with uncertain values when performing  mathematical operations and  resampling. ","category":"page"},{"location":"uncertain_values/uncertainvalues_certainvalue/#Generic-constructor","page":"Generic constructor","title":"Generic constructor","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_certainvalue/","page":"Generic constructor","title":"Generic constructor","text":"UncertainValue(::Real)","category":"page"},{"location":"uncertain_values/uncertainvalues_certainvalue/#UncertainData.UncertainValues.UncertainValue-Tuple{Real}","page":"Generic constructor","title":"UncertainData.UncertainValues.UncertainValue","text":"UncertainValue(x::T) where T <: Real\n\nCreate a CertainValue instance from a scalar with no uncertainty.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/uncertainvalues_certainvalue/#Type-documentation","page":"Generic constructor","title":"Type documentation","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_certainvalue/","page":"Generic constructor","title":"Generic constructor","text":"CertainValue","category":"page"},{"location":"uncertain_values/uncertainvalues_certainvalue/#UncertainData.UncertainValues.CertainValue","page":"Generic constructor","title":"UncertainData.UncertainValues.CertainValue","text":"CertainValue\n\nA simple wrapper type for values with no uncertainty (i.e. represented by a scalar).\n\nExamples\n\nThe two following ways of constructing values without uncertainty are equivalent. \n\nu1, u2 = CertainValue(2.2), CertainValue(6)\nw1, w2 = UncertainValue(2.2), UncertainValue(6)\n\n\n\n\n\n","category":"type"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/#Uncertain-index-value-datasets","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/#Documentation","page":"Uncertain index-value datasets","title":"Documentation","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"UncertainIndexValueDataset","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/#UncertainData.UncertainDatasets.UncertainIndexValueDataset","page":"Uncertain index-value datasets","title":"UncertainData.UncertainDatasets.UncertainIndexValueDataset","text":"UncertainIndexValueDataset{\n    IDXTYP<:AbstractUncertainIndexDataset, \n    VALSTYP<:AbstractUncertainValueDataset}\n\nA generic dataset type consisting of a set of uncertain indices (e.g. time, depth, order, etc...) and a set of uncertain values. \n\nThe i-th index is assumed to correspond to the i-th value. For example, if  data is an instance of a UncertainIndexValueDataset, then \n\ndata.indices[2] is the index for the value data.values[2]\ndata.values[7] is the value for the index data.indices[7].\ndata[3] is an index-value tuple (data.indices[3], data.values[3]).\n\nFields\n\nindices::T where {T <: AbstractUncertainIndexDataset}: The uncertain indices,   represented by some type of uncertain index dataset.\nvalues::T  where {T <: AbstractUncertainValueDataset}: The uncertain values,   represented by some type of uncertain index dataset.\n\nExample\n\n# Simulate some data values measured a specific times.\ntimes = 1:100\nvalues = sin.(0.0:0.1:100.0)\n\n# Assume the data were measured by a device with normally distributed\n# measurement uncertainties with fluctuating standard deviations\nσ_range = (0.1, 0.7)\n\nuncertain_values = [UncertainValue(Normal, val, rand(Uniform(σ_range...))) \n    for val in values]\n\n# Assume the clock used to record the times is uncertain, but with uniformly \n# distributed noise that doesn't change through time.\nuncertain_times = [UncertainValue(Uniform, t-0.1, t+0.1) for t in times]\n\n# Pair the time-value data. If vectors are provided to the constructor,\n# the first will be interpreted as the indices and the second as the values.\ndata = UncertainIndexValueDataset(uncertain_times, uncertain_values)\n\n# A safer option is to first convert to UncertainIndexDataset and \n# UncertainValueDataset, so you don't accidentally mix the indices \n# and the values.\nuidxs = UncertainIndexDataset(uncertain_times)\nuvals = UncertainValueDataset(uncertain_values)\n\ndata = UncertainIndexValueDataset(uidxs, uvals)\n\n\n\n\n\n","category":"type"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/#Description","page":"Uncertain index-value datasets","title":"Description","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"UncertainIndexValueDatasets have uncertainties associated with both the  indices (e.g. time, depth, etc) and the values of the data points.","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/#Defining-an-uncertain-index-value-dataset","page":"Uncertain index-value datasets","title":"Defining an uncertain index-value dataset","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/#Example-1","page":"Uncertain index-value datasets","title":"Example 1","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/#Defining-the-values","page":"Uncertain index-value datasets","title":"Defining the values","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"Let's start by defining the uncertain data values and collecting them in  an UncertainValueDataset.","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"using UncertainData, Plots \ngr()\nr1 = [UncertainValue(Normal, rand(), rand()) for i = 1:10]\nr2 = UncertainValue(rand(10000))\nr3 = UncertainValue(Uniform, rand(10000))\nr4 = UncertainValue(Normal, -0.1, 0.5)\nr5 = UncertainValue(Gamma, 0.4, 0.8)\n\nu_values = [r1; r2; r3; r4; r5]\nudata = UncertainValueDataset(u_values);","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/#Defining-the-indices","page":"Uncertain index-value datasets","title":"Defining the indices","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"The values were measures at some time indices by an inaccurate clock, so that the times  of measuring are normally distributed values with fluctuating standard deviations.","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"u_timeindices = [UncertainValue(Normal, i, rand(Uniform(0, 1))) \n    for i = 1:length(udata)]\nuindices = UncertainIndexDataset(u_timeindices);","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/#Combinining-the-indices-and-values","page":"Uncertain index-value datasets","title":"Combinining the indices and values","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"Now, combine the uncertain time indices and measurements into an  UncertainIndexValueDataset.","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"x = UncertainIndexValueDataset(uindices, udata)","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"The built-in plot recipes make it easy to visualize the dataset.  By default, plotting the dataset plots the median value of the index and the measurement  (only for scatter plots), along with the 33rd to 67th percentile range error bars in both  directions.","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"plot(x)","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"(Image: )","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"You can also tune the error bars by calling  plot(udata::UncertainIndexValueDataset, idx_quantiles, val_quantiles), explicitly  specifying the quantiles in each direction, like so:","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"plot(x, [0.05, 0.95], [0.05, 0.95])","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"(Image: )","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/#Example-2","page":"Uncertain index-value datasets","title":"Example 2","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/#Defining-the-indices-2","page":"Uncertain index-value datasets","title":"Defining the indices","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"Say we had a dataset of 20 values for which the uncertainties are normally distributed  with increasing standard deviation through time.","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"time_inds = 1:13\nuvals = [UncertainValue(Normal, ind, rand(Uniform()) + (ind / 6)) for ind in time_inds]\ninds = UncertainIndexDataset(uvals)","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"That's it. We can also plot the 33rd to 67th percentile range for the indices.","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"plot(inds, [0.33, 0.67])","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"(Image: )","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/#Defining-the-values-2","page":"Uncertain index-value datasets","title":"Defining the values","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"Let's define some uncertain values that are associated with the indices.","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"u1 = UncertainValue(Gamma, rand(Gamma(), 500))\nu2 = UncertainValue(rand(MixtureModel([Normal(1, 0.3), Normal(0.1, 0.1)]), 500))\nuvals3 = [UncertainValue(Normal, rand(), rand()) for i = 1:11]\n\nmeasurements = [u1; u2; uvals3]\ndatavals = UncertainValueDataset(measurements)","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"(Image: )","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/#Combinining-the-indices-and-values-2","page":"Uncertain index-value datasets","title":"Combinining the indices and values","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"Now, we combine the indices and the corresponding data.","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"d = UncertainIndexValueDataset(inds, datavals)","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"Plot the dataset with error bars in both directions, using the 20th to 80th percentile  range for the indices and the 33rd to 67th percentile range for the data values. ","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"plot(d, [0.2, 0.8], [0.33, 0.67])","category":"page"},{"location":"uncertain_datasets/uncertain_indexvalue_dataset/","page":"Uncertain index-value datasets","title":"Uncertain index-value datasets","text":"(Image: )","category":"page"},{"location":"mathematics/trig_functions/#Trigonometric-functions","page":"Trigonometric functions","title":"Trigonometric functions","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Trigonometric functions are supported for arbitrary uncertain values of different types. Like for elementary operations, a resampling approach is  used for the computations.","category":"page"},{"location":"mathematics/trig_functions/#Syntax","page":"Trigonometric functions","title":"Syntax","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Because elementary operations should work on arbitrary uncertain values, a resampling  approach is used to perform the mathematical operations. All mathematical  operations thus return a vector containing the results of repeated element-wise operations  (where each element is a resampled draw from the furnishing distribution(s) of the  uncertain value(s)). ","category":"page"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Each trigonometric function comes in two versions. ","category":"page"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"The first syntax allows skipping providing the number of draws, which is set to 10000 by default    (e.g. cos(x::AbstractUncertainValue; n::Int = 10000). \nUsing the second syntax, you have to explicitly provide the number of draws (e.g. cos(x::AbstractUncertainValue, n::Int)).","category":"page"},{"location":"mathematics/trig_functions/#Possible-errors","page":"Trigonometric functions","title":"Possible errors","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Beware: if the support of the funishing distribution for an uncertain value lies partly  outside the domain of the function, you risk encountering errors.","category":"page"},{"location":"mathematics/trig_functions/#Supported-trigonometric-functions","page":"Trigonometric functions","title":"Supported trigonometric functions","text":"","category":"section"},{"location":"mathematics/trig_functions/#Sine","page":"Trigonometric functions","title":"Sine","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.sin(x::AbstractUncertainValue; n::Int)\nBase.sin(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.sin-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.sin","text":"Base.sin(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the sine of the uncertain value x, where x is in radians. Computes the  element-wise sine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.sin-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.sin","text":"Base.sin(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the sine of the uncertain value x, where x is in radians. Computes the  element-wise sine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.sind(x::AbstractUncertainValue; n::Int)\nBase.sind(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.sind-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.sind","text":"Base.sind(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the sine of the uncertain value x, where x is in degrees. Computes the  element-wise sine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.sind-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.sind","text":"Base.sind(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the sine of the uncertain value x, where x is in degrees. Computes the  element-wise sine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.sinh(x::AbstractUncertainValue; n::Int)\nBase.sinh(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.sinh-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.sinh","text":"Base.sinh(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the hyperbolic sine of the uncertain value x. Computes the element-wise hyperbolic sine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.sinh-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.sinh","text":"Base.sinh(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the hyperbolic sine of the uncertain value x. Computes the element-wise hyperbolic sine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Cosine","page":"Trigonometric functions","title":"Cosine","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.cos(x::AbstractUncertainValue; n::Int)\nBase.cos(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.cos-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.cos","text":"Base.cos(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the cosine of the uncertain value x, where x is in radians. Computes the  element-wise cosine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.cos-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.cos","text":"Base.cos(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the cosine of the uncertain value x, where x is in radians. Computes the  element-wise cosine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.cosd(x::AbstractUncertainValue; n::Int)\nBase.cosd(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.cosd-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.cosd","text":"Base.cos(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the cosine of the uncertain value x, where x is in degrees. Computes the  element-wise cosine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.cosd-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.cosd","text":"Base.cos(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the cosine of the uncertain value x, where x is in degrees. Computes the  element-wise cosine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.cosh(x::AbstractUncertainValue; n::Int)\nBase.cosh(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.cosh-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.cosh","text":"Base.cos(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the hyperbolic cosine of the uncertain value x. Computes the element-wise hyperbolic cosine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.cosh-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.cosh","text":"Base.cos(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the hyperbolic cosine of the uncertain value x. Computes the element-wise hyperbolic cosine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Tangent","page":"Trigonometric functions","title":"Tangent","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.atan(x::AbstractUncertainValue; n::Int)\nBase.atan(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.atan-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.atan","text":"Base.atan(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse tangent of the uncertain value x, where x is in radians.  Computes the element-wise inverse tangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.atan-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.atan","text":"Base.atan(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse tangent of the uncertain value x, where x is in radians.  Computes the element-wise inverse tangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.atand(x::AbstractUncertainValue; n::Int)\nBase.atand(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.atand-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.atand","text":"Base.atand(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse tangent of the uncertain value x, where x is in degrees.  Computes the element-wise inverse tangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.atand-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.atand","text":"Base.atand(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse tangent of the uncertain value x, where x is in degrees.  Computes the element-wise inverse tangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.atanh(x::AbstractUncertainValue; n::Int)\nBase.atanh(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.atanh-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.atanh","text":"Base.atanh(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse hypoerbolic tangent of the uncertain value x. Computes the element-wise inverse hypoerbolic tangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.atanh-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.atanh","text":"Base.atanh(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse hypoerbolic tangent of the uncertain value x. Computes the element-wise inverse hypoerbolic tangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Reciprocal-trig-functions","page":"Trigonometric functions","title":"Reciprocal trig functions","text":"","category":"section"},{"location":"mathematics/trig_functions/#Cosecant","page":"Trigonometric functions","title":"Cosecant","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.csc(x::AbstractUncertainValue; n::Int)\nBase.csc(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.csc-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.csc","text":"Base.csc(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the cosecant of the uncertain value x, where x is in radians. Computes the  element-wise cosecant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.csc-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.csc","text":"Base.csc(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the cosecant of the uncertain value x, where x is in radians. Computes the  element-wise cosecant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.cscd(x::AbstractUncertainValue; n::Int)\nBase.cscd(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.cscd-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.cscd","text":"Base.cscd(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the cosecant of the uncertain value x, where x is in degrees. Computes the  element-wise cosecant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.cscd-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.cscd","text":"Base.cscd(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the cosecant of the uncertain value x, where x is in degrees. Computes the  element-wise cosecant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.csch(x::AbstractUncertainValue; n::Int)\nBase.csch(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.csch-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.csch","text":"Base.cscd(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the hyperbolic cosecant of the uncertain value x, where x is in degrees.  Computes the element-wise hyperbolic cosecant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.csch-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.csch","text":"Base.cscd(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the hyperbolic cosecant of the uncertain value x, where x is in degrees.  Computes the element-wise hyperbolic cosecant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Secant","page":"Trigonometric functions","title":"Secant","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.sec(x::AbstractUncertainValue; n::Int)\nBase.sec(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.sec-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.sec","text":"Base.sec(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the secant of the uncertain value x, where x is in radians. Computes the  element-wise secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.sec-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.sec","text":"Base.sec(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the secant of the uncertain value x, where x is in radians. Computes the  element-wise secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.secd(x::AbstractUncertainValue; n::Int)\nBase.secd(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.secd-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.secd","text":"Base.secd(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the secant of the uncertain value x, where x is in degrees. Computes the  element-wise cosecant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.secd-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.secd","text":"Base.secd(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the secant of the uncertain value x, where x is in degrees. Computes the  element-wise cosecant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.sech(x::AbstractUncertainValue; n::Int)\nBase.sech(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.sech-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.sech","text":"Base.sech(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the hyperbolic secant of the uncertain value x, where x is in degrees.  Computes the element-wise hyperbolic secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.sech-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.sech","text":"Base.sech(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the hyperbolic secant of the uncertain value x, where x is in degrees.  Computes the element-wise hyperbolic secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Cotangent","page":"Trigonometric functions","title":"Cotangent","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.cot(x::AbstractUncertainValue; n::Int)\nBase.cot(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.cot-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.cot","text":"Base.cot(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the cotangent of the uncertain value x, where x is in radians. Computes the  element-wise cotangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.cot-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.cot","text":"Base.cot(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the cotangent of the uncertain value x, where x is in radians. Computes the  element-wise cotangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.cotd(x::AbstractUncertainValue; n::Int)\nBase.cotd(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.cotd-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.cotd","text":"Base.cotd(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the cotangent of the uncertain value x, where x is in degrees. Computes the  element-wise cotangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.cotd-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.cotd","text":"Base.cotd(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the cotangent of the uncertain value x, where x is in degrees. Computes the  element-wise cotangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.coth(x::AbstractUncertainValue; n::Int)\nBase.coth(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.coth-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.coth","text":"Base.coth(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the hyperbolic cotangent of the uncertain value x, where x is in radians.  Computes the element-wise hyperbolic cotangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.coth-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.coth","text":"Base.coth(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the hyperbolic cotangent of the uncertain value x, where x is in radians.  Computes the element-wise hyperbolic cotangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Inverse-trig-functions","page":"Trigonometric functions","title":"Inverse trig functions","text":"","category":"section"},{"location":"mathematics/trig_functions/#Sine-2","page":"Trigonometric functions","title":"Sine","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.asin(x::AbstractUncertainValue; n::Int)\nBase.asin(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.asin-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.asin","text":"Base.asin(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse sine of the uncertain value x, where x is in radians. Computes the  element-wise inverse sine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.asin-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.asin","text":"Base.asin(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse sine of the uncertain value x, where x is in radians. Computes the  element-wise inverse sine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.asind(x::AbstractUncertainValue; n::Int)\nBase.asind(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.asind-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.asind","text":"Base.asind(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse sine of the uncertain value x, where x is in degrees. Computes the  element-wise inverse sine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.asind-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.asind","text":"Base.asind(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse sine of the uncertain value x, where x is in degrees. Computes the  element-wise inverse sine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.asinh(x::AbstractUncertainValue; n::Int)\nBase.asinh(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.asinh-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.asinh","text":"Base.asinh(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse hyperbolic sine of the uncertain value x. Computes the element-wise inverse hyperbolic csine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.asinh-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.asinh","text":"Base.asinh(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse hyperbolic sine of the uncertain value x. Computes the element-wise inverse hyperbolic csine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Cosine-2","page":"Trigonometric functions","title":"Cosine","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.acos(x::AbstractUncertainValue; n::Int)\nBase.acos(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.acos-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.acos","text":"Base.acos(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse cosine of the uncertain value x, where x is in radians. Computes the  element-wise inverse cosine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.acos-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.acos","text":"Base.acos(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse cosine of the uncertain value x, where x is in radians. Computes the  element-wise inverse cosine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.acosd(x::AbstractUncertainValue; n::Int)\nBase.acosd(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.acosd-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.acosd","text":"Base.acosd(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse cosine of the uncertain value x, where x is in degrees. Computes the  element-wise inverse cosine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.acosd-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.acosd","text":"Base.acosd(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse cosine of the uncertain value x, where x is in degrees. Computes the  element-wise inverse cosine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.acosh(x::AbstractUncertainValue; n::Int)\nBase.acosh(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.acosh-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.acosh","text":"Base.acosh(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse hyperbolic cosine of the uncertain value x. Computes the element-wise inverse hyperbolic cosine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.acosh-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.acosh","text":"Base.acosh(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse hyperbolic cosine of the uncertain value x. Computes the element-wise inverse hyperbolic cosine for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Tangent-2","page":"Trigonometric functions","title":"Tangent","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.tan(x::AbstractUncertainValue; n::Int)\nBase.tan(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.tan-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.tan","text":"Base.tan(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the tangent of the uncertain value x, where x is in radians. Computes the  element-wise tangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.tan-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.tan","text":"Base.tan(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the tangent of the uncertain value x, where x is in radians. Computes the  element-wise tangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.tand(x::AbstractUncertainValue; n::Int)\nBase.tand(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.tand-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.tand","text":"Base.tand(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the tangent of the uncertain value x, where x is in degrees. Computes the  element-wise tangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.tand-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.tand","text":"Base.tand(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the tangent of the uncertain value x, where x is in degrees. Computes the  element-wise tangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.tanh(x::AbstractUncertainValue; n::Int)\nBase.tanh(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.tanh-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.tanh","text":"Base.tanh(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the hyperbolic tangent of the uncertain value x. Computes the element-wise hyperbolic tangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.tanh-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.tanh","text":"Base.tanh(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the hyperbolic tangent of the uncertain value x.  Computes the element-wise hyperbolic tangent for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Inverse-cosecant","page":"Trigonometric functions","title":"Inverse cosecant","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.acsc(x::AbstractUncertainValue; n::Int)\nBase.acsc(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.acsc-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.acsc","text":"Base.acsc(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse cosecant of the uncertain value x, where x is in radians.  Computes the element-wise inverse cosecant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.acsc-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.acsc","text":"Base.acsc(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse cosecant of the uncertain value x, where x is in radians.  Computes the element-wise inverse cosecant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.acscd(x::AbstractUncertainValue; n::Int)\nBase.acscd(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.acscd-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.acscd","text":"Base.acscd(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse cosecant of the uncertain value x, where x is in degrees.  Computes the element-wise inverse cosecant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.acscd-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.acscd","text":"Base.acscd(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse cosecant of the uncertain value x, where x is in degrees.  Computes the element-wise inverse cosecant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.acsch(x::AbstractUncertainValue; n::Int)\nBase.acsch(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.acsch-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.acsch","text":"Base.acscd(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse hyperbolic cosecant of the uncertain value x. Computes the element-wise inverse hypoerbolic cosecant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.acsch-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.acsch","text":"Base.acscd(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse hyperbolic cosecant of the uncertain value x. Computes the element-wise inverse hypoerbolic cosecant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Inverse-secant","page":"Trigonometric functions","title":"Inverse secant","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.asec(x::AbstractUncertainValue; n::Int)\nBase.asec(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.asec-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.asec","text":"Base.asec(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse secant of the uncertain value x, where x is in radians.  Computes the element-wise inverse secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.asec-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.asec","text":"Base.asec(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse secant of the uncertain value x, where x is in radians.  Computes the element-wise inverse secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.asecd(x::AbstractUncertainValue; n::Int)\nBase.asecd(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.asecd-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.asecd","text":"Base.asecd(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse secant of the uncertain value x, where x is in degrees.  Computes the element-wise inverse secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.asecd-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.asecd","text":"Base.asecd(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse secant of the uncertain value x, where x is in degrees.  Computes the element-wise inverse secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.asech(x::AbstractUncertainValue; n::Int)\nBase.asech(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.asech-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.asech","text":"Base.asech(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse hyperbolic secant of the uncertain value x. Computes the element-wise inverse hyperbolic secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.asech-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.asech","text":"Base.asech(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse hyperbolic secant of the uncertain value x. Computes the element-wise inverse hyperbolic secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Inverse-cotangent","page":"Trigonometric functions","title":"Inverse cotangent","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.acot(x::AbstractUncertainValue; n::Int)\nBase.acot(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.acot-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.acot","text":"Base.acot(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse cotangent of the uncertain value x, where x is in radians.  Computes the element-wise inverse secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.acot-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.acot","text":"Base.acot(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse cotangent of the uncertain value x, where x is in radians.  Computes the element-wise inverse secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.acotd(x::AbstractUncertainValue; n::Int)\nBase.acotd(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.acotd-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.acotd","text":"Base.acotd(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse cotangent of the uncertain value x, where x is in degrees. Computes the element-wise inverse secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.acotd-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.acotd","text":"Base.acotd(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse cotangent of the uncertain value x, where x is in degrees. Computes the element-wise inverse secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.acoth(x::AbstractUncertainValue; n::Int)\nBase.acoth(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.acoth-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.acoth","text":"Base.acoth(x::AbstractUncertainValue; n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse hyperbolic cotangent of the uncertain value x. Computes the element-wise inverse hyperbolic secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.acoth-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.acoth","text":"Base.acoth(x::AbstractUncertainValue, n::Int = 10000) -> Vector{Float64}\n\nCompute the inverse hyperbolic cotangent of the uncertain value x. Computes the element-wise inverse hyperbolic secant for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Other-trig-functions","page":"Trigonometric functions","title":"Other trig functions","text":"","category":"section"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.sincos(x::AbstractUncertainValue; n::Int)\nBase.sincos(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.sincos-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.sincos","text":"Base.sincos(x::AbstractUncertainValue; n::Int = 10000)\n\nSimultaneously compute the sine and cosine of the uncertain value x, where x is in  radians. Computes the element-wise sincos for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.sincos-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.sincos","text":"Base.sincos(x::AbstractUncertainValue, n::Int = 10000)\n\nSimultaneously compute the sine and cosine of the uncertain value x, where x is in  radians. Computes the element-wise sincos for n realizations.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.sinc(x::AbstractUncertainValue; n::Int)\nBase.sinc(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.sinc-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.sinc","text":"Base.sinc(x::AbstractUncertainValue; n::Int = 10000)\n\nIn an element-wise manner for n realizations of the uncertain value x, compute  sin(pi x)  (pi x) if x neq 0, and 1 if x = 0.\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.sinc-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.sinc","text":"Base.sinc(x::AbstractUncertainValue, n::Int = 10000)\n\nCompute sin(pi x)  (pi x) if x neq 0, and 1 if x = 0 element-wise  over n realizations of the uncertain value x. \n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.sinpi(x::AbstractUncertainValue; n::Int)\nBase.sinpi(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.sinpi-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.sinpi","text":"Base.sinpi(x::AbstractUncertainValue; n::Int = 10000)\n\nCompute sin(pi x) more accurately than sin(pi*x), especially for large x,  in an element-wise over n realizations of the uncertain value x. \n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.sinpi-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.sinpi","text":"Base.sinpi(x::AbstractUncertainValue; n::Int = 10000)\n\nCompute sin(pi x) more accurately than sin(pi*x), especially for large x,  in an element-wise over n realizations of the uncertain value x. \n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.cosc(x::AbstractUncertainValue; n::Int)\nBase.cosc(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.cosc-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.cosc","text":"Base.cosc(x::AbstractUncertainValue; n::Int = 10000)\n\nCompute cos(pi x)  x - sin(pi x)  (pi x^2) if x neq 0, and 0 if x = 0, in an element-wise manner over n realizations of the uncertain value x. \n\nThis is the derivative of sinc(x).\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.cosc-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.cosc","text":"Base.cosc(x::AbstractUncertainValue, n::Int = 10000)\n\nCompute cos(pi x)  x - sin(pi x)  (pi x^2) if x neq 0, and 0 if x = 0, in an element-wise manner over n realizations of the uncertain value x. \n\nThis is the derivative of sinc(x).\n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/","page":"Trigonometric functions","title":"Trigonometric functions","text":"Base.cospi(x::AbstractUncertainValue; n::Int)\nBase.cospi(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"mathematics/trig_functions/#Base.Math.cospi-Tuple{AbstractUncertainValue}","page":"Trigonometric functions","title":"Base.Math.cospi","text":"Base.cospi(x::AbstractUncertainValue; n::Int = 10000)\n\nCompute cos(pi x) more accurately than cos(pi*x), especially for large x,  in an element-wise over n realizations of the uncertain value x. \n\n\n\n\n\n","category":"method"},{"location":"mathematics/trig_functions/#Base.Math.cospi-Tuple{AbstractUncertainValue, Int64}","page":"Trigonometric functions","title":"Base.Math.cospi","text":"Base.cospi(x::AbstractUncertainValue, n::Int = 10000)\n\nCompute cos(pi x) more accurately than cos(pi*x), especially for large x,  in an element-wise over n realizations of the uncertain value x. \n\n\n\n\n\n","category":"method"},{"location":"uncertain_datasets/uncertain_datasets_overview/#uncertain_value_collection_types","page":"Types of uncertain value collections","title":"Types of uncertain value collections","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_datasets_overview/","page":"Types of uncertain value collections","title":"Types of uncertain value collections","text":"If dealing with several uncertain values, it may be useful to represent them as an uncertain dataset. This way, one may trivially, for example, compute statistics for a dataset consisting of samples with different types of uncertainties.","category":"page"},{"location":"uncertain_datasets/uncertain_datasets_overview/#Uncertain-dataset-types","page":"Types of uncertain value collections","title":"Uncertain dataset types","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_datasets_overview/","page":"Types of uncertain value collections","title":"Types of uncertain value collections","text":"You can collect your uncertain values in the following collections:","category":"page"},{"location":"uncertain_datasets/uncertain_datasets_overview/","page":"Types of uncertain value collections","title":"Types of uncertain value collections","text":"The UncertainValueDataset type is    just a wrapper for a vector of uncertain values.\nThe UncertainIndexDataset type    behaves just as UncertainValueDataset, but has certain resampling methods such as sequential resampling associated with them.\nThe UncertainIndexValueDataset    type allows you to be explicit that you're working with datasets where both the    indices and the    data values are uncertain.    This may be useful when you, for example, want to draw realizations of your    dataset while simultaneously enforcing    sequential resampling    models. One example is resampling while ensuring the draws have    strictly increasing    age models.","category":"page"},{"location":"uncertain_datasets/uncertain_datasets_overview/","page":"Types of uncertain value collections","title":"Types of uncertain value collections","text":"There's also a generic uncertain dataset type for when you don't care about distinguishing  between indices and data values:","category":"page"},{"location":"uncertain_datasets/uncertain_datasets_overview/","page":"Types of uncertain value collections","title":"Types of uncertain value collections","text":"UncertainDataset contains uncertain indices.","category":"page"},{"location":"uncertain_datasets/uncertain_datasets_overview/#Vectors-of-uncertain-values","page":"Types of uncertain value collections","title":"Vectors of uncertain values","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_datasets_overview/","page":"Types of uncertain value collections","title":"Types of uncertain value collections","text":"Vectors of uncertain values, i.e. Vector{<:AbstractUncertainvalue}, will work    seamlessly for many applications, but not for all mathematical operations and statistical    algorithms. For that, rather use one of the uncertain dataset types above","category":"page"},{"location":"uncertain_datasets/uncertain_datasets_overview/#Collection-types","page":"Types of uncertain value collections","title":"Collection types","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_datasets_overview/","page":"Types of uncertain value collections","title":"Types of uncertain value collections","text":"Throughout the documentation you may encounter the following type union:","category":"page"},{"location":"uncertain_datasets/uncertain_datasets_overview/","page":"Types of uncertain value collections","title":"Types of uncertain value collections","text":"UVAL_COLLECTION_TYPES","category":"page"},{"location":"uncertain_datasets/uncertain_datasets_overview/#UncertainData.UncertainDatasets.UVAL_COLLECTION_TYPES","page":"Types of uncertain value collections","title":"UncertainData.UncertainDatasets.UVAL_COLLECTION_TYPES","text":"UVAL_COLLECTION_TYPES = Union{UD, UV} where {\n    UD <: AbstractUncertainValueDataset, \n    UV <: AbstractVector{T} where {\n        T <: AbstractUncertainValue}}\n\nA type union used to represent types of uncertain values. \n\n\n\n\n\n","category":"type"},{"location":"binning/bin/#Binning-scalar-values","page":"Binning scalar values","title":"Binning scalar values","text":"","category":"section"},{"location":"binning/bin/#Bin-values","page":"Binning scalar values","title":"Bin values","text":"","category":"section"},{"location":"binning/bin/","page":"Binning scalar values","title":"Binning scalar values","text":"bin(left_bin_edges::AbstractRange, xs, ys)","category":"page"},{"location":"binning/bin/#UncertainData.bin-Tuple{AbstractRange, Any, Any}","page":"Binning scalar values","title":"UncertainData.bin","text":"bin(left_bin_edges::AbstractRange, xs, ys) -> Vector{Vector{T}} where T\n\nDistribute the elements of ys into N-1 different bin vectors, based on  how the values in xs are distributed among the bins defined by the N grid  points in left_bin_edges. If xs[i] falls in the n-th bin interval, then ys[i]  is assigned to the n-th bin vector. If xs[i] lie outside the grid, then the  corresponding ys[i] is ignored. See also bin!\n\nReturns N - 1 bin vectors.\n\nExamples\n\nGetting the values in each bin:\n\nxs = [1.2, 1.7, 2.2, 3.3, 4.5, 4.6, 7.1]\nys = [4.2, 5.1, 6.5, 4.2, 3.2, 3.1, 2.5]\nleft_bin_edges = 0.0:1.0:6.0\nbin(left_bin_edges, xs, ys)\n\n# Some example data with unevenly spaced time indices\nnpts = 300\ntime, vals = sort(rand(1:1000, npts)), rand(npts)\n\n# See which values fall in 25 time step wide time bins ranging \n# from time indices 100 to 900.\nleft_bin_edges = 100:25:900\n\nbin(left_bin_edges, time, vals)\n\n\n\n\n\n","category":"method"},{"location":"binning/bin/","page":"Binning scalar values","title":"Binning scalar values","text":"bin!(bins::Vector{AbstractVector{T}}, ::AbstractRange{T}, xs, ys) where T","category":"page"},{"location":"binning/bin/#UncertainData.InterpolationAndGrids.bin!-Union{Tuple{T}, Tuple{Array{AbstractVector{T}, 1}, AbstractRange{T}, Any, Any}} where T","page":"Binning scalar values","title":"UncertainData.InterpolationAndGrids.bin!","text":"bin!(bins::Vector{AbstractVector{T}}, left_bin_edges::AbstractRange{T}, xs, ys) where T\n\nDistribute the elements of ys into N-1 different pre-allocated empty  bin vectors, based on how the values in xs are distributed among  the bins defined by the N grid points in left_bin_edges. bins must be a vector of vector-like mutable containers.\n\nIf xs[i] falls in the n-th bin interval, then ys[i]  is assigned to the n-th bin vector. If xs[i] lie outside the grid,  the corresponding ys[i] is ignored.\n\nSee also bin(::AbstractRange).\n\n\n\n\n\n","category":"method"},{"location":"binning/bin/#Bin-summaries","page":"Binning scalar values","title":"Bin summaries","text":"","category":"section"},{"location":"binning/bin/","page":"Binning scalar values","title":"Binning scalar values","text":"bin(f::Function, left_bin_edges::AbstractRange, xs, ys)","category":"page"},{"location":"binning/bin/#UncertainData.bin-Tuple{Function, AbstractRange, Any, Any}","page":"Binning scalar values","title":"UncertainData.bin","text":"bin(f::Function, left_bin_edges::AbstractRange, xs, ys, args...; kwargs...) -> Vector{T} where T\n\nDistribute the elements of ys into N-1 different bin vectors, based on  how the values in xs are distributed among the bins defined by the N grid  points in left_bin_edges. If xs[i] falls in the n-th bin interval, then ys[i]  is assigned to the n-th bin vector. If xs[i] lie outside the grid, then the  corresponding ys[i] is ignored. See also bin!\n\nThen, apply the summary function element-wise to each of the bin vectors, with args  and kwargs as arguments and keyword arguments. Then, N-1 summary values, one for  each bin, are returned. Empty bins are assigned NaN values.\n\nReturns N-1 bin summaries.\n\nExamples\n\nApplying a summary function to each bin\n\nAny function that accepts a vector of values can be used in conjunction with bin. \n\nxs = [1.2, 1.7, 2.2, 3.3, 4.5, 4.6, 7.1]\nys = [4.2, 5.1, 6.5, 4.2, 3.2, 3.1, 2.5]\nleft_bin_edges = 0.0:1.0:6.0\nbin(median, left_bin_edges, xs, ys)\n\nFunctions with additional arguments also work (arguments and keyword  arguments must be supplied last in the function call):\n\nxs = [1.2, 1.7, 2.2, 3.3, 4.5, 4.6, 7.1]\nys = [4.2, 5.1, 6.5, 4.2, 3.2, 3.1, 2.5]\nleft_bin_edges = 0.0:1.0:6.0\nbin(quantile, left_bin_edges, xs, ys, [0.1])\n\n\n\n\n\n","category":"method"},{"location":"binning/bin/#Fast-bin-summaries","page":"Binning scalar values","title":"Fast bin summaries","text":"","category":"section"},{"location":"binning/bin/","page":"Binning scalar values","title":"Binning scalar values","text":"bin_mean","category":"page"},{"location":"binning/bin/#UncertainData.InterpolationAndGrids.bin_mean","page":"Binning scalar values","title":"UncertainData.InterpolationAndGrids.bin_mean","text":"bin_mean(left_bin_edges::AbstractRange, xs, ys)\n\nDistribute the elements of ys into N - 1 different bin vectors, based on  how the values in xs are distributed among the bins defined by the N grid  points in left_bin_edges. Then compute the bin mean for each bin.\n\nIf xs[i] falls in the n-th bin interval, then ys[i] is assigned to the  n-th bin vector. If values fall outside the grid, they are ignored (if  xs[i] < minimum(left_bin_edges), ignore ys[i]). After the ys values  have been assigned to bin vectors, apply the summary function f element-wise  to each of the bin vectors, with args and kwargs as arguments and keyword  arguments.\n\nReturns N - 1 mean values, one for each bin.\n\nExamples\n\nxs = [1.2, 1.7, 2.2, 3.3, 4.5, 4.6, 7.1]\nys = [4.2, 5.1, 6.5, 4.2, 3.2, 3.2, 2.5]\nleft_bin_edges = 0.0:1.0:6.0\nbin_mean(left_bin_edges, xs, ys)\n\n# output\n6-element Array{Float64,1}:\n NaN   \n   4.65\n   6.5 \n   4.2 \n   3.2 \n NaN\n\n\n\n\n\n","category":"function"},{"location":"binning/bin/#Binning-uncertain-data","page":"Binning scalar values","title":"Binning uncertain data","text":"","category":"section"},{"location":"binning/bin/#Bin-values-2","page":"Binning scalar values","title":"Bin values","text":"","category":"section"},{"location":"binning/bin/","page":"Binning scalar values","title":"Binning scalar values","text":"bin(x::AbstractUncertainIndexValueDataset, binning::BinnedResampling{RawValues})","category":"page"},{"location":"binning/bin/#UncertainData.bin-Tuple{AbstractUncertainIndexValueDataset, BinnedResampling{RawValues, B} where B}","page":"Binning scalar values","title":"UncertainData.bin","text":"bin(x::AbstractUncertainIndexValueDataset, binning::BinnedResampling{RawValues}) -> Tuple(Vector, Vector{Vector})\n\nResample every element of x the number of times given by binning.n. After resampling, distribute the values according to their indices, into the N bins given by binning.left_bin_edges.\n\nReturns\n\nReturn a tuple containing the N different bin centers and a N-length vector of  resampled values whose resampled indices fall in the N different bins.\n\nExample\n\n# Some example data with unevenly spaced time indices\nnpts = 300\ntime, vals = sort(rand(1:1000, npts)), rand(npts)\n\n# Add uncertainties to indices and values, and represent as \n# UncertainIndexValueDataset \nutime = [UncertainValue(Normal, t, 10) for t in time]\nuvals = [UncertainValue(Normal, v, 0.1) for v in vals]\n\nudata = UncertainIndexValueDataset(utime, uvals)\n\n# Bin data into fall in 25 time step wide time bins ranging \n# from time indices 100 to 900 and return a vector of raw \n# values for each bin. Do this by resampling each uncertain\n# data point 10000 times and distributing those draws among \n# the bins.\nleft_bin_edges = 100:25:900\nn_draws = 10000\nbinning = BinnedResampling(RawValues, left_bin_edges, n_draws)\n\nbin_centers, bin_draws = bin(udata, binning)\n\n\n\n\n\n","category":"method"},{"location":"binning/bin/","page":"Binning scalar values","title":"Binning scalar values","text":"bin(x::AbstractUncertainIndexValueDataset, binning::BinnedWeightedResampling{RawValues})","category":"page"},{"location":"binning/bin/#UncertainData.bin-Tuple{AbstractUncertainIndexValueDataset, BinnedWeightedResampling{RawValues, B, W} where {B, W}}","page":"Binning scalar values","title":"UncertainData.bin","text":"bin(x::AbstractUncertainIndexValueDataset, \n    binning::BinnedWeightedResampling{RawValues}) -> Tuple(Vector, Vector{Vector})\n\nResample every element of x a number of times. After resampling, distribute the  values according to their indices, into the N bins given by the N-1-element  grid defined by binning.left_bin_edges. In total, length(x)*binning.n draws  are distributed among the bins. The precise number of times x[i] is resampled is  given by the binning.weights[i] (probability weights are always normalised to 1).\n\nReturns\n\nReturn a tuple containing the N different bin centers and a N-length vector of  resampled values whose resampled indices fall in the N different bins.\n\nExample\n\nusing Plots, UncertainData\n# Some example data with unevenly spaced time indices\nfunction ar1(n::Int, x0 = 0.5, p = 0.3)\n    vals = zeros(n)\n    [vals[i] = vals[i - 1]*p + rand()*0.5 for i = 2:n]\n    return vals\nend\n\nnpts = 50\ntime, vals = sort(rand(1:1000, npts)), ar1(npts)\n\n# Add uncertainties to indices and values, and represent as \n# UncertainIndexValueDataset \nutime = [UncertainValue(Normal, t, 5) for t in time]\nuvals = [UncertainValue(Normal, v, 0.03) for v in vals]\n\nudata = UncertainIndexValueDataset(utime, uvals)\n\n# Bin data into fall in 25 time step wide time bins ranging \n# from time indices 100 to 900 and return a vector of raw \n# values for each bin. Do this by resampling each uncertain\n# data point on average 10000 times and distributing those \n# draws among the bins. \ntime_grid = 100:40:900\nn_draws = 5000\n# Let odd-indexed values be three times as likely to be \n# sampled compared to even-indexed values.\nwts = Weights([i % 2 == 0 ? 1 : 3 for i = 1:length(udata)])\nbinning = BinnedWeightedResampling(RawValues, time_grid, wts, n_draws)\n\nbin_centers, bin_draws = bin(udata, binning);\n\n\n\n\n\n","category":"method"},{"location":"binning/bin/#Bin-summaries-2","page":"Binning scalar values","title":"Bin summaries","text":"","category":"section"},{"location":"binning/bin/","page":"Binning scalar values","title":"Binning scalar values","text":"bin(x::AbstractUncertainIndexValueDataset, binning::BinnedResampling)","category":"page"},{"location":"binning/bin/#UncertainData.bin-Tuple{AbstractUncertainIndexValueDataset, BinnedResampling}","page":"Binning scalar values","title":"UncertainData.bin","text":"bin(x::AbstractUncertainIndexValueDataset, binning::BinnedResampling{UncertainScalarKDE}) -> UncertainIndexValueDataset\nbin(x::AbstractUncertainIndexValueDataset, binning::BinnedResampling{UncertainScalarPopulation}) -> UncertainIndexValueDataset\n\nResample every element of x the number of times given by binning.n. After resampling, distribute the values according to their indices, into the bins given by binning.left_bin_edges.\n\nReturns\n\nReturns an UncertainIndexValueDataset. Indices are assumed to be uniformly distributed within each  bin, and are represented as CertainValues at the bin centers. Values of the dataset have different  representations depending on what binning is:\n\nIf binning isa BinnedResampling{UncertainScalarKDE}, then values in each bin are represented by a    kernel density estimate to the distribution of the resampled values whose resampled indices    fall in that bin.\nIf binning isa BinnedResampling{UncertainScalarPopulation}, then values in each bin are    represented by equiprobable populations consisting of the resampled values whose resampled    indices fall in the bins.\n\n\n\n\n\n","category":"method"},{"location":"binning/bin/","page":"Binning scalar values","title":"Binning scalar values","text":"bin(x::AbstractUncertainIndexValueDataset, binning::BinnedWeightedResampling)","category":"page"},{"location":"binning/bin/#UncertainData.bin-Tuple{AbstractUncertainIndexValueDataset, BinnedWeightedResampling}","page":"Binning scalar values","title":"UncertainData.bin","text":"bin(x::AbstractUncertainIndexValueDataset, binning::BinnedWeightedResampling{UncertainScalarKDE}) -> UncertainIndexValueDataset\nbin(x::AbstractUncertainIndexValueDataset, binning::BinnedWeightedResampling{UncertainScalarPopulation}) -> UncertainIndexValueDataset\n\nResample every element of x a number of times. After resampling, distribute the  values according to their indices, into the N bins given by the N-1-element  grid defined by binning.left_bin_edges. In total, length(x)*binning.n draws  are distributed among the bins. The precise number of times x[i] is resampled is  given by binning.weights[i] (probability weights are always normalised to 1).\n\nReturns\n\nReturns an UncertainIndexValueDataset. Indices are assumed to be uniformly distributed within each  bin, and are represented as CertainValues at the bin centers. Values of the dataset have different  representations depending on what binning is:\n\nIf binning isa BinnedWeightedResampling{UncertainScalarKDE}, then values in each bin are    represented by a kernel density estimate to the distribution of the resampled values whose    resampled indices fall in that bin.\nIf binning isa BinnedWeightedResampling{UncertainScalarPopulation}, then values in each bin are    represented by equiprobable populations consisting of the resampled values whose resampled    indices fall in the bins.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#point_estimate_statistics","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"These estimators operate on single uncertain values, which can be of any type, such as populations,  theoretical distributions,  KDE distributions or  fitted distributions. They compute the statistic in question by drawing a length-n draw of the uncertain value, then computing the statistic on that draw.","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#syntax_statistics_uncertainvalue_single","page":"Point-estimate statistics","title":"Syntax","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"The syntax for computing the statistic f for single instances of an uncertain value x is","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"f(x::AbstractUncertainValue, n::Int, args...; kwargs...), which estimates the statistic f for a length-n draw of x.","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Methods","page":"Point-estimate statistics","title":"Methods","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Mean","page":"Point-estimate statistics","title":"Mean","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"mean(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Statistics.mean-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"Statistics.mean","text":"mean(uv::AbstractUncertainValue, n::Int)\n\nCompute the mean of an uncertain value over an n-draw sample of it.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Mode","page":"Point-estimate statistics","title":"Mode","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"mode(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.mode-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"StatsBase.mode","text":"mode(uv::AbstractUncertainValue, n::Int)\n\nCompute the mode of an uncertain value over an n-draw sample of it.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Quantile","page":"Point-estimate statistics","title":"Quantile","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"quantile(x::AbstractUncertainValue, q, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Statistics.quantile-Tuple{AbstractUncertainValue, Any, Int64}","page":"Point-estimate statistics","title":"Statistics.quantile","text":"quantile(uv::AbstractUncertainValue, q, n::Int)\n\nCompute the quantile(s) q of an uncertain value over an n-draw sample of it.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#IQR","page":"Point-estimate statistics","title":"IQR","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"iqr(uv::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.iqr-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"StatsBase.iqr","text":"iqr(uv::AbstractUncertainValue, n::Int)\n\nCompute the interquartile range (IQR), i.e. the 75th percentile minus the 25th percentile, over an n-draw sample of an uncertain value.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Median","page":"Point-estimate statistics","title":"Median","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"median(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Statistics.median-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"Statistics.median","text":"median(uv::AbstractUncertainValue, n::Int)\n\nCompute the median of an uncertain value over an n-draw sample of it.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Middle","page":"Point-estimate statistics","title":"Middle","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"middle(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Statistics.middle-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"Statistics.middle","text":"middle(uv::AbstractUncertainValue, n::Int)\n\nCompute the middle of an uncertain value over an n-draw sample of it.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Standard-deviation","page":"Point-estimate statistics","title":"Standard deviation","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"std(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Statistics.std-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"Statistics.std","text":"std(uv::AbstractUncertainValue, n::Int)\n\nCompute the standard deviation of an uncertain value over an n-draw sample of it.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Variance","page":"Point-estimate statistics","title":"Variance","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"var(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Statistics.var-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"Statistics.var","text":"variance(uv::AbstractUncertainValue, n::Int)\n\nCompute the variance of an uncertain value over an n-draw sample of it.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Generalized/power-mean","page":"Point-estimate statistics","title":"Generalized/power mean","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"genmean(x::AbstractUncertainValue, p, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.genmean-Tuple{AbstractUncertainValue, Any, Int64}","page":"Point-estimate statistics","title":"StatsBase.genmean","text":"genmean(uv::AbstractUncertainValue, p, n::Int)\n\nCompute the generalized/power mean with exponent p of an uncertain value over an  n-draw sample of it.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Generalized-variance","page":"Point-estimate statistics","title":"Generalized variance","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"genvar(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.genvar-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"StatsBase.genvar","text":"genvar(uv::AbstractUncertainValue, n::Int)\n\nCompute the generalized sample variance of an uncertain value over an  n-draw sample of it.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Harmonic-mean","page":"Point-estimate statistics","title":"Harmonic mean","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"harmmean(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.harmmean-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"StatsBase.harmmean","text":"harmmean(uv::AbstractUncertainValue, n::Int)\n\nCompute the harmonic mean of an uncertain value over an n-draw sample of it.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Geometric-mean","page":"Point-estimate statistics","title":"Geometric mean","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"geomean(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.geomean-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"StatsBase.geomean","text":"geomean(uv::AbstractUncertainValue, n::Int)\n\nCompute the geometric mean of an uncertain value over an n-draw sample of it.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Kurtosis","page":"Point-estimate statistics","title":"Kurtosis","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"kurtosis(x::AbstractUncertainValue, n::Int; m = mean(x))","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.kurtosis-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"StatsBase.kurtosis","text":"kurtosis(uv::AbstractUncertainValue, n::Int, m = mean(uv, n))\n\nCompute the excess kurtosis of an uncertain value over an n-draw sample of it, optionally specifying a center m).\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#k-th-order-moment","page":"Point-estimate statistics","title":"k-th order moment","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"moment(x::AbstractUncertainValue, k, n::Int, m = mean(x))","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.moment","page":"Point-estimate statistics","title":"StatsBase.moment","text":"moment(x::AbstractUncertainValue, k, n::Int, m = mean(x, n))\n\nCompute the k-th order central moment of an uncertain value over an  n-draw sample of it, optionally specifying a center m.\n\n\n\n\n\n","category":"function"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Percentile","page":"Point-estimate statistics","title":"Percentile","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"percentile(x::AbstractUncertainValue, p, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.percentile-Tuple{AbstractUncertainValue, Any, Int64}","page":"Point-estimate statistics","title":"StatsBase.percentile","text":"percentile(x::AbstractUncertainValue, p, n::Int)\n\nCompute the percentile(s) p of an uncertain value over an n-draw sample of it.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Renyi-entropy","page":"Point-estimate statistics","title":"Renyi entropy","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"renyientropy(x::AbstractUncertainValue, α, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.renyientropy-Tuple{AbstractUncertainValue, Any, Int64}","page":"Point-estimate statistics","title":"StatsBase.renyientropy","text":"renyientropy(uv::AbstractUncertainValue, α, n::Int)\n\nCompute the Rényi (generalized) entropy of order α of an uncertain value over an  n-draw sample of it.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Run-length-encoding","page":"Point-estimate statistics","title":"Run-length encoding","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"rle(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.rle-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"StatsBase.rle","text":"rle(x::AbstractUncertainValue, n::Int)\n\nCompute the run-length encoding of an uncertain value over a n-draw  sample of it as a tuple. The first element of the tuple is a vector of  values of the input and the second is the number of consecutive occurrences of each element.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Standard-error-of-the-mean","page":"Point-estimate statistics","title":"Standard error of the mean","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"sem(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.sem-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"StatsBase.sem","text":"sem(x::AbstractUncertainValue, n::Int)\n\nCompute the standard error of the mean of an uncertain value over a n-draw  sample of it, optionally specifying a center m, i.e.  sqrt(var(x_draw, corrected = true) / length(x_draw)).\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Skewness","page":"Point-estimate statistics","title":"Skewness","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"skewness(x::AbstractUncertainValue, n::Int; m = mean(x))","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.skewness-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"StatsBase.skewness","text":"skewness(x::AbstractUncertainValue, n::Int, m = mean(x, n))\n\nCompute the standardized skewness of an uncertain value over an n-draw sample of  it, optionally specifying a center m.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Span","page":"Point-estimate statistics","title":"Span","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"span(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.span-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"StatsBase.span","text":"span(x::AbstractUncertainValue, n::Int)\n\nCompute the span of a collection, i.e. the range minimum(x):maximum(x), of an  uncertain value over an n-draw sample of it.  The minimum and  maximum of the draws of x are computed in one pass using extrema.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Summary-statistics","page":"Point-estimate statistics","title":"Summary statistics","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"summarystats(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.summarystats-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"StatsBase.summarystats","text":"summarystats(uv::AbstractUncertainValue, n::Int)\n\nCompute summary statistics of an uncertain value over an n-draw sample of it. Returns  a SummaryStats object containing the mean, minimum, 25th percentile, median,  75th percentile, and maximum.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Total-variance","page":"Point-estimate statistics","title":"Total variance","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"totalvar(x::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#StatsBase.totalvar-Tuple{AbstractUncertainValue, Int64}","page":"Point-estimate statistics","title":"StatsBase.totalvar","text":"totalvar(uv::AbstractUncertainValue, n::Int)\n\nCompute the total sample variance of an uncertain value over an  n-draw sample of it. For a single uncertain value, this is  equivalent to the sample variance.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/#Theoretical-and-fitted-distributions","page":"Point-estimate statistics","title":"Theoretical and fitted distributions","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_point_estimates/","page":"Point-estimate statistics","title":"Point-estimate statistics","text":"For theoretical distributions, both with known and fitted parameters, some of  the stats functions may be called without the n argument, because the underlying distributions are represented as actual distributons. For these, we can compute several of the statistics from the distributions directly.","category":"page"},{"location":"uncertain_values/uncertainvalues_fitted/#uncertain_value_fitted_theoretical_distribution","page":"Fitted theoretical distributions","title":"Fitted theoretical distributions","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_fitted/","page":"Fitted theoretical distributions","title":"Fitted theoretical distributions","text":"For data values with histograms close to some known distribution, the user may choose to represent the data by fitting a theoretical distribution to the values. This will only work well if the histogram closely resembles a theoretical distribution.","category":"page"},{"location":"uncertain_values/uncertainvalues_fitted/#Generic-constructor","page":"Fitted theoretical distributions","title":"Generic constructor","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_fitted/","page":"Fitted theoretical distributions","title":"Fitted theoretical distributions","text":"UncertainValue(d::Type{D}, empiricaldata::Vector{T}) where {D<:Distribution, T}","category":"page"},{"location":"uncertain_values/uncertainvalues_fitted/#UncertainData.UncertainValues.UncertainValue-Union{Tuple{T}, Tuple{D}, Tuple{Type{D}, Vector{T}}} where {D<:Distribution, T}","page":"Fitted theoretical distributions","title":"UncertainData.UncertainValues.UncertainValue","text":"UncertainValue(empiricaldata::AbstractVector{T},\n    d::Type{D}) where {D <: Distribution}\n\nConstructor for empirical distributions.\n\nFit a distribution of type d to the data and use that as the representation of the empirical distribution. Calls Distributions.fit behind the scenes.\n\nArguments\n\nempiricaldata: The data for which to fit the distribution.\ndistribution: A valid univariate distribution from Distributions.jl.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/uncertainvalues_fitted/#Type-documentation","page":"Fitted theoretical distributions","title":"Type documentation","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_fitted/","page":"Fitted theoretical distributions","title":"Fitted theoretical distributions","text":"UncertainScalarTheoreticalFit","category":"page"},{"location":"uncertain_values/uncertainvalues_fitted/#UncertainData.UncertainValues.UncertainScalarTheoreticalFit","page":"Fitted theoretical distributions","title":"UncertainData.UncertainValues.UncertainScalarTheoreticalFit","text":"UncertainScalarTheoreticalFit\n\nAn empirical value represented by a distribution estimated from actual data.\n\nFields\n\ndistribution The distribution describing the value.\nvalues: The values from which distribution is estimated.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_values/uncertainvalues_fitted/#Examples","page":"Fitted theoretical distributions","title":"Examples","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_fitted/","page":"Fitted theoretical distributions","title":"Fitted theoretical distributions","text":"using Distributions, UncertainData\n\n# Create a normal distribution\nd = Uniform()\n\n# Draw a 1000-point sample from the distribution.\nsome_sample = rand(d, 1000)\n\n# Define an uncertain value by fitting a uniform distribution to the sample.\nuv = UncertainValue(Uniform, some_sample)","category":"page"},{"location":"uncertain_values/uncertainvalues_fitted/","page":"Fitted theoretical distributions","title":"Fitted theoretical distributions","text":"using Distributions, UncertainData\n\n# Create a normal distribution\nd = Normal()\n\n# Draw a 1000-point sample from the distribution.\nsome_sample = rand(d, 1000)\n\n# Represent the uncertain value by a fitted normal distribution.\nuv = UncertainValue(Normal, some_sample)","category":"page"},{"location":"uncertain_values/uncertainvalues_fitted/","page":"Fitted theoretical distributions","title":"Fitted theoretical distributions","text":"using Distributions, UncertainData\n\n# Generate 1000 values from a gamma distribution with parameters α = 2.1,\n# θ = 5.2.\nsome_sample = rand(Gamma(2.1, 5.2), 1000)\n\n# Represent the uncertain value by a fitted gamma distribution.\nuv = UncertainValue(Gamma, some_sample)","category":"page"},{"location":"uncertain_values/uncertainvalues_fitted/","page":"Fitted theoretical distributions","title":"Fitted theoretical distributions","text":"In these examples we're trying to fit the same distribution to our sample as the distribution from which we draw the sample. Thus, we will get good fits. In real applications, make sure to always visually investigate the histogram of your data!","category":"page"},{"location":"uncertain_values/uncertainvalues_fitted/#Beware:-fitting-distributions-may-lead-to-nonsensical-results!","page":"Fitted theoretical distributions","title":"Beware: fitting distributions may lead to nonsensical results!","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_fitted/","page":"Fitted theoretical distributions","title":"Fitted theoretical distributions","text":"In a less contrived example, we may try to fit a beta distribution to a sample generated from a gamma distribution.","category":"page"},{"location":"uncertain_values/uncertainvalues_fitted/","page":"Fitted theoretical distributions","title":"Fitted theoretical distributions","text":"using Distributions, UncertainData\n\n# Generate 1000 values from a gamma distribution with parameters α = 2.1,\n# θ = 5.2.\nsome_sample = rand(Gamma(2.1, 5.2), 1000)\n\n# Represent the uncertain value by a fitted beta distribution.\nuv = UncertainValue(Beta, some_sample)","category":"page"},{"location":"uncertain_values/uncertainvalues_fitted/","page":"Fitted theoretical distributions","title":"Fitted theoretical distributions","text":"This is obviously not a good idea. Always visualise your distribution before deciding on which distribution to fit! You won't get any error messages if you try to fit a distribution that does not match your data.","category":"page"},{"location":"uncertain_values/uncertainvalues_fitted/","page":"Fitted theoretical distributions","title":"Fitted theoretical distributions","text":"If the data do not follow an obvious theoretical distribution, it is better to use kernel density estimation to define the uncertain value.","category":"page"},{"location":"resampling/interpolation/interpolation/","page":"Supported interpolations","title":"Supported interpolations","text":"Interpolations.jl is used for basic  interpolation. It supports many different types of interpolation when data are evenly  spaced, and gridded interpolation for unevenly spaced data. ","category":"page"},{"location":"resampling/interpolation/interpolation/#Supported-interpolations","page":"Supported interpolations","title":"Supported interpolations","text":"","category":"section"},{"location":"resampling/interpolation/interpolation/","page":"Supported interpolations","title":"Supported interpolations","text":"For now, UncertainData implements linear interpolation for uncertain  dataset realizations. ","category":"page"},{"location":"resampling/interpolation/interpolation/#Uncertain-index-value-datasets","page":"Supported interpolations","title":"Uncertain index-value datasets","text":"","category":"section"},{"location":"resampling/interpolation/interpolation/","page":"Supported interpolations","title":"Supported interpolations","text":"Datasets with uncertain indices (hence, the indices are almost always unevenly spaced), can only be interpolated using linear interpolation.","category":"page"},{"location":"resampling/resampling_overview/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"resampling/resampling_overview/","page":"Overview","title":"Overview","text":"Uncertain values  are trivially resampled by drawing random numbers from their furnishing distributions/populations.","category":"page"},{"location":"resampling/resampling_overview/","page":"Overview","title":"Overview","text":"If needed, you may choose to  constrain an uncertain value before resampling, using one of the available  sampling constraints.","category":"page"},{"location":"resampling/resampling_overview/","page":"Overview","title":"Overview","text":"The resample function is used to resample uncertain values. For detailed instructions on how to sample uncertain values and datasets of uncertain  values, see the following pages:","category":"page"},{"location":"resampling/resampling_overview/#Resampling-uncertain-values","page":"Overview","title":"Resampling uncertain values","text":"","category":"section"},{"location":"resampling/resampling_overview/","page":"Overview","title":"Overview","text":"Resampling uncertain values\nResampling uncertain value datasets. See also the   resampling schemes which can be   applied to    simplify resampling.\nResampling uncertain index-value datasets.   See also the   resampling schemes which can be   applied to    simplify resampling.","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/#dataset_statistics","page":"Statistics on datasets of uncertain values","title":"Statistics on datasets of uncertain values","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/","page":"Statistics on datasets of uncertain values","title":"Statistics on datasets of uncertain values","text":"The following statistics are available for collections of uncertain values (uncertain datasets).","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/","page":"Statistics on datasets of uncertain values","title":"Statistics on datasets of uncertain values","text":"mean(d::AbstractUncertainValueDataset, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/#Statistics.mean-Tuple{AbstractUncertainValueDataset, Int64}","page":"Statistics on datasets of uncertain values","title":"Statistics.mean","text":"mean(d::AbstractUncertainValueDataset, n::Int)\n\nComputes the element-wise mean of a dataset of uncertain values. Takes the mean of an n-draw sample for each element.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/","page":"Statistics on datasets of uncertain values","title":"Statistics on datasets of uncertain values","text":"median(d::AbstractUncertainValueDataset, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/#Statistics.median-Tuple{AbstractUncertainValueDataset, Int64}","page":"Statistics on datasets of uncertain values","title":"Statistics.median","text":"median(d::AbstractUncertainValueDataset, n::Int)\n\nComputes the element-wise median of a dataset of uncertain values. Takes the median of an n-draw sample for each element.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/","page":"Statistics on datasets of uncertain values","title":"Statistics on datasets of uncertain values","text":"middle(d::AbstractUncertainValueDataset, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/#Statistics.middle-Tuple{AbstractUncertainValueDataset, Int64}","page":"Statistics on datasets of uncertain values","title":"Statistics.middle","text":"middle(d::AbstractUncertainValueDataset, n::Int)\n\nCompute the middle of n realisations of an AbstractUncertainValueDataset.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/","page":"Statistics on datasets of uncertain values","title":"Statistics on datasets of uncertain values","text":"std(d::AbstractUncertainValueDataset, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/#Statistics.std-Tuple{AbstractUncertainValueDataset, Int64}","page":"Statistics on datasets of uncertain values","title":"Statistics.std","text":"std(d::AbstractUncertainValueDataset, n::Int; kwargs...)\n\nComputes the element-wise standard deviation of a dataset of uncertain values. Takes the standard deviation of an n-draw sample for each element.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/","page":"Statistics on datasets of uncertain values","title":"Statistics on datasets of uncertain values","text":"var(d::AbstractUncertainValueDataset, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/#Statistics.var-Tuple{AbstractUncertainValueDataset, Int64}","page":"Statistics on datasets of uncertain values","title":"Statistics.var","text":"var(d::AbstractUncertainValueDataset, n::Int; kwargs...)\n\nComputes the element-wise sample variance of a dataset of uncertain values. Takes the sample variance of an n-draw sample for each element.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/","page":"Statistics on datasets of uncertain values","title":"Statistics on datasets of uncertain values","text":"quantile(d::AbstractUncertainValueDataset, q, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/#Statistics.quantile-Tuple{AbstractUncertainValueDataset, Any, Int64}","page":"Statistics on datasets of uncertain values","title":"Statistics.quantile","text":"quantile(d::AbstractUncertainValueDataset, p, n::Int; kwargs...)\n\nCompute element-wise quantile(s) pof a dataset consisting of uncertain values. Takes the quantiles of an n-draw sample for each element.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/","page":"Statistics on datasets of uncertain values","title":"Statistics on datasets of uncertain values","text":"cov(d1::AbstractUncertainValueDataset, d2::AbstractUncertainValueDataset, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/#Statistics.cov-Tuple{AbstractUncertainValueDataset, AbstractUncertainValueDataset, Int64}","page":"Statistics on datasets of uncertain values","title":"Statistics.cov","text":"cov(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int; corrected::Bool = true)\n\nObtain a distribution on the covariance between two collections of  uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute the covariance between the two length-L draws.\n\nThis yields n estimates of the covariance between n independent pairs  of realisations of x and y. The n-member distribution of covariance  estimates is returned as a vector.\n\nIf corrected is true (the default) then the sum is scaled with n - 1 for  each pair of draws, whereas the sum is scaled with n if corrected is false  where n = length(x).\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/","page":"Statistics on datasets of uncertain values","title":"Statistics on datasets of uncertain values","text":"cor(d1::AbstractUncertainValueDataset, d2::AbstractUncertainValueDataset, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_datasets/#Statistics.cor-Tuple{AbstractUncertainValueDataset, AbstractUncertainValueDataset, Int64}","page":"Statistics on datasets of uncertain values","title":"Statistics.cor","text":"cor(x::UVAL_COLLECTION_TYPES, y::UVAL_COLLECTION_TYPES, n::Int)\n\nEstimate a distribution on Pearson's rank correlation coefficient between  two collections of uncertain values.\n\nThis is done by repeating the following procedure n times:\n\nFirst, draw a length-L realisation of x by drawing one random   number from  each uncertain value furnishing the dataset. The draws are   independent, so that no element-wise dependencies (e.g. sequential  correlations) that are not already present in the data are introduced in   the realisation.\nSecond, draw a length-L realisation of y in the same manner.\nCompute Pearson's rank correlation coefficient between the two length-L  draws.\n\nThis yields n estimates of Pearson's rank correlation coefficient  between n independent pairs of realisations of x and y. The  n-member distribution of correlation estimates is returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/hypothesistests/anderson_darling_test/#Anderson-darling-test","page":"Anderson-darling test","title":"Anderson-darling test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/anderson_darling_test/#Regular-test","page":"Anderson-darling test","title":"Regular test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/anderson_darling_test/","page":"Anderson-darling test","title":"Anderson-darling test","text":"OneSampleADTest(uv::AbstractUncertainValue, d::UnivariateDistribution, n::Int = 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/anderson_darling_test/#HypothesisTests.OneSampleADTest","page":"Anderson-darling test","title":"HypothesisTests.OneSampleADTest","text":"OneSampleADTest(uv::UncertainValue, d::UnivariateDistribution,\n    n::Int = 1000) -> OneSampleADTest\n\nPerform a one-sample Anderson–Darling test of the null hypothesis that a draw of n realisations of the uncertain value uv comes from the distribution d against the alternative hypothesis that the sample is not drawn from d.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_statistics/hypothesistests/anderson_darling_test/#Pooled-test","page":"Anderson-darling test","title":"Pooled test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/anderson_darling_test/","page":"Anderson-darling test","title":"Anderson-darling test","text":"OneSampleADTestPooled(ud::UncertainDataset, d::UnivariateDistribution, n::Int = 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/anderson_darling_test/#UncertainData.UncertainStatistics.OneSampleADTestPooled","page":"Anderson-darling test","title":"UncertainData.UncertainStatistics.OneSampleADTestPooled","text":"OneSampleADTestPooled(ud::UncertainDataset, d::UnivariateDistribution,\n    n::Int = 1000)) -> OneSampleADTest\n\nFirst, draw n realisations of each uncertain value in ud and pool them together. Then perform a one-sample Anderson–Darling test of the null hypothesis that the pooled values comes from the distribution d against the alternative hypothesis that the sample is not drawn from d.\n\n\n\n\n\n","category":"function"},{"location":"uncertain_statistics/hypothesistests/anderson_darling_test/#Element-wise-test","page":"Anderson-darling test","title":"Element-wise test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/anderson_darling_test/","page":"Anderson-darling test","title":"Anderson-darling test","text":"OneSampleADTestElementWise(ud::UncertainDataset, d::UnivariateDistribution, n::Int = 1000)","category":"page"},{"location":"uncertain_statistics/hypothesistests/anderson_darling_test/#UncertainData.UncertainStatistics.OneSampleADTestElementWise","page":"Anderson-darling test","title":"UncertainData.UncertainStatistics.OneSampleADTestElementWise","text":"OneSampleADTestElementWise(ud::UncertainDataset, d::UnivariateDistribution,\n    n::Int = 1000)) -> Vector{OneSampleADTest}\n\nFirst, draw n realisations of each uncertain value in ud, keeping one pool of values for each uncertain value. Then, perform an element-wise (pool-wise) one-sample Anderson–Darling test of the null hypothesis that each value pool comes from the distribution d against the alternative hypothesis that the sample is not drawn from d.\n\n\n\n\n\n","category":"function"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/#One-sample-t-test","page":"One-sample t-test","title":"One-sample t-test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/#Regular-test","page":"One-sample t-test","title":"Regular test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/","page":"One-sample t-test","title":"One-sample t-test","text":"OneSampleTTest(d::AbstractUncertainValue, n::Int = 1000; μ0::Real = 0)","category":"page"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/#HypothesisTests.OneSampleTTest","page":"One-sample t-test","title":"HypothesisTests.OneSampleTTest","text":"OneSampleTTest(d::AbstractUncertainValue, n::Int = 1000;\n    μ0::Real = 0) -> OneSampleTTest\n\nPerform a one sample t-test of the null hypothesis that the uncertain value has a distribution with mean μ0 against the alternative hypothesis that its distribution does not have mean μ0. n indicates the number of draws during resampling.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/","page":"One-sample t-test","title":"One-sample t-test","text":"Example:","category":"page"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/","page":"One-sample t-test","title":"One-sample t-test","text":"# Normally distributed uncertain observation with mean = 2.1\nuv = UncertainValue(Normal, 2.1, 0.2)\n\n# Perform a one-sample t-test to test the null hypothesis that\n# the sample comes from a distribution with mean μ0\nOneSampleTTest(uv, 1000, μ0 = 2.1)","category":"page"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/","page":"One-sample t-test","title":"One-sample t-test","text":"Which gives the following output:","category":"page"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/","page":"One-sample t-test","title":"One-sample t-test","text":"# Which results in\nOne sample t-test\n-----------------\nPopulation details:\n    parameter of interest:   Mean\n    value under h_0:         2.1\n    point estimate:          2.1031909275381566\n    95% confidence interval: (2.091, 2.1154)\n\nTest summary:\n    outcome with 95% confidence: fail to reject h_0\n    two-sided p-value:           0.6089\n\nDetails:\n    number of observations:   1000\n    t-statistic:              0.5117722099885472\n    degrees of freedom:       999\n    empirical standard error: 0.00623505433839","category":"page"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/","page":"One-sample t-test","title":"One-sample t-test","text":"Thus, we cannot reject the null-hypothesis that the sample comes from a distribution with mean = 2.1. Therefore, we accept the alternative hypothesis that our sample does in fact come from such a distribution. This is of course true, because we defined the uncertain value as a normal distribution with mean 2.1.","category":"page"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/#Pooled-test","page":"One-sample t-test","title":"Pooled test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/","page":"One-sample t-test","title":"One-sample t-test","text":"OneSampleTTestPooled(d1::UncertainDataset, d2::UncertainDataset, n::Int = 1000; μ0::Real = 0)","category":"page"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/#UncertainData.UncertainStatistics.OneSampleTTestPooled","page":"One-sample t-test","title":"UncertainData.UncertainStatistics.OneSampleTTestPooled","text":"OneSampleTTestPooled(d1::UncertainDataset,\n    d2::UncertainDataset,\n    n::Int = 1000; μ0::Real = 0) -> OneSampleTTest\n\nFirst, sample n draws of each uncertain value in each dataset, pooling the draws from the elements of d1 and the draws from the elements of d2 separately. Then, perform a paired sample t-test of the null hypothesis that the differences between pairs of uncertain values in d1 and d2 come from a distribution with mean μ0 against the alternative hypothesis that the distribution does not have mean μ0.\n\n\n\n\n\n","category":"function"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/#Element-wise-test","page":"One-sample t-test","title":"Element-wise test","text":"","category":"section"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/","page":"One-sample t-test","title":"One-sample t-test","text":"OneSampleTTestElementWise(d1::UncertainDataset, d2::UncertainDataset, n::Int = 1000; μ0::Real = 0)","category":"page"},{"location":"uncertain_statistics/hypothesistests/one_sample_t_test/#UncertainData.UncertainStatistics.OneSampleTTestElementWise","page":"One-sample t-test","title":"UncertainData.UncertainStatistics.OneSampleTTestElementWise","text":"OneSampleTTestElementWise(d1::UncertainDataset,\n    d2::UncertainDataset,\n    n::Int = 1000; μ0::Real = 0) -> Vector{OneSampleTTest}\n\nPerform a one sample t-test of the null hypothesis that the uncertain value has a distribution with mean μ0 against the alternative hypothesis that its distribution does not have mean μ0 for uncertain value in d.\n\nn indicates the number of draws during resampling.\n\n\n\n\n\n","category":"function"},{"location":"propagation_of_errors/propagation_of_errors/#Exact-error-propagation","page":"Exact error propagation","title":"Exact error propagation","text":"","category":"section"},{"location":"propagation_of_errors/propagation_of_errors/","page":"Exact error propagation","title":"Exact error propagation","text":"For exact error propagation of normally distributed uncertain values that are  potentially correlated, you can use Measurements.jl. It is, however, not always the case that data points have normally distributed uncertainties, which makes error propagation extremely tedious or impossible.","category":"page"},{"location":"propagation_of_errors/propagation_of_errors/#Approximate-error-propagation","page":"Exact error propagation","title":"Approximate error propagation","text":"","category":"section"},{"location":"propagation_of_errors/propagation_of_errors/","page":"Exact error propagation","title":"Exact error propagation","text":"On the other hand, the resampling approach used in this package allows you to  approximate the result of any mathematical operation for any type of uncertain value. You may still use normal distributions to represent uncertain values, but the various statistics  are approximated through resampling, rather than computed exactly. Resampling as implemented here is often referred to as the  Monte Carlo method.","category":"page"},{"location":"propagation_of_errors/propagation_of_errors/#Propagating-errors-using-the-Monte-Carlo-method","page":"Exact error propagation","title":"Propagating errors using the Monte Carlo method","text":"","category":"section"},{"location":"propagation_of_errors/propagation_of_errors/","page":"Exact error propagation","title":"Exact error propagation","text":"In our context, the Monte Carlo method consists of varying input parameters within their precision limits to determine the uncertainty in an output. This process results in a distribution of estimates to the output value, where each member of the output distribution is computed from a set of randomly drawn input values. From this output distribution, information about uncertainties in the result can then be extracted (e.g from confidence intervals).","category":"page"},{"location":"propagation_of_errors/propagation_of_errors/","page":"Exact error propagation","title":"Exact error propagation","text":"Any output distribution computed through resampling is intrinsically linked to the uncertainties in the inputs. It may also be arbitrarily complex, depending on the individual uncertainty types and magnitudes of each input, and the specific function that computes the output. For example, normally distribution input values need not yield a normally distributed output distribution.","category":"page"},{"location":"propagation_of_errors/propagation_of_errors/#Mathematical-operations-and-statistics","page":"Exact error propagation","title":"Mathematical operations and statistics","text":"","category":"section"},{"location":"propagation_of_errors/propagation_of_errors/","page":"Exact error propagation","title":"Exact error propagation","text":"Hence, in this package, when performing mathematical operations on uncertain values, it is done by drawing random numbers from within the precision of the uncertain values, performing the mathematical operation, and then repeating that many times. The result (output) of a calculation is either a vector of estimates, or a kernel density estimate to the output distribution.","category":"page"},{"location":"propagation_of_errors/propagation_of_errors/","page":"Exact error propagation","title":"Exact error propagation","text":"Estimating statistics on uncertain values also yields distributions of the statistic in question.","category":"page"},{"location":"propagation_of_errors/propagation_of_errors/","page":"Exact error propagation","title":"Exact error propagation","text":"For further calculations, you may choose to represent the output distribution from any calculation by any of the provided uncertain value types.","category":"page"},{"location":"propagation_of_errors/propagation_of_errors/#Suggested-reading","page":"Exact error propagation","title":"Suggested reading","text":"","category":"section"},{"location":"propagation_of_errors/propagation_of_errors/","page":"Exact error propagation","title":"Exact error propagation","text":"A very nice, easy-to-read paper describing error propagation using the Monte Carlo method was written by Anderson (1976) [1]. In this paper, he uses the Monte Carlo method to propagate uncertainties in  geochemical calculations for which exact error propagation would be extremely tedious or impossible.","category":"page"},{"location":"propagation_of_errors/propagation_of_errors/#References","page":"Exact error propagation","title":"References","text":"","category":"section"},{"location":"propagation_of_errors/propagation_of_errors/","page":"Exact error propagation","title":"Exact error propagation","text":"[1]: Anderson, G. M. \"Error propagation by the Monte Carlo method in geochemical calculations.\" Geochimica et Cosmochimica Acta 40.12 (1976): 1533-1538. https://www.sciencedirect.com/science/article/pii/0016703776900922","category":"page"},{"location":"resampling/interpolation/gridded/#Grids","page":"Grids","title":"Grids","text":"","category":"section"},{"location":"resampling/interpolation/gridded/","page":"Grids","title":"Grids","text":"RegularGrid","category":"page"},{"location":"resampling/interpolation/gridded/#UncertainData.InterpolationAndGrids.RegularGrid","page":"Grids","title":"UncertainData.InterpolationAndGrids.RegularGrid","text":"RegularGrid\n\nFields\n\nmin: The minimum value of the grid.\nmax: The maximum value of the grid. \nstep: The interval size. \nextrapolation_bc: The extrapolation condition. Can also be NaN.\n\n\n\n\n\n","category":"type"},{"location":"resampling/interpolation/gridded/#Syntax","page":"Grids","title":"Syntax","text":"","category":"section"},{"location":"resampling/interpolation/gridded/#Uncertain-index-value-datasets","page":"Grids","title":"Uncertain index-value datasets","text":"","category":"section"},{"location":"resampling/interpolation/gridded/","page":"Grids","title":"Grids","text":"The following methods are available for the interpolating of a realization of an uncertain index-value dataset: ","category":"page"},{"location":"resampling/interpolation/gridded/#No-constraints","page":"Grids","title":"No constraints","text":"","category":"section"},{"location":"resampling/interpolation/gridded/","page":"Grids","title":"Grids","text":"resample(udata::UncertainIndexValueDataset, \n        grid_indices::RegularGrid;\n        trunc::TruncateQuantiles = TruncateQuantiles(0.001, 0.999))","category":"page"},{"location":"resampling/interpolation/gridded/#UncertainData.Resampling.resample-Tuple{UncertainIndexValueDataset, RegularGrid}","page":"Grids","title":"UncertainData.Resampling.resample","text":"resample(udata::UncertainIndexValueDataset, \n    grid::InterpolationGrid;\n    trunc::TruncateQuantiles = TruncateQuantiles(0.001, 0.999))\n\nDraw a realization of udata, then interpolate the data values to grid. \n\nTo avoid very large spans of interpolation, the uncertain indices are truncated to some  large quantile range. Values are not truncated. \n\n\n\n\n\n","category":"method"},{"location":"resampling/interpolation/gridded/#Sequential-constraints","page":"Grids","title":"Sequential constraints","text":"","category":"section"},{"location":"resampling/interpolation/gridded/","page":"Grids","title":"Grids","text":"resample(udata::UncertainIndexValueDataset, \n        sequential_constraint::SequentialSamplingConstraint,\n        grid_indices::RegularGrid;\n        trunc::TruncateQuantiles = TruncateQuantiles(0.001, 0.999))","category":"page"},{"location":"resampling/interpolation/gridded/#UncertainData.Resampling.resample-Tuple{UncertainIndexValueDataset, SequentialSamplingConstraint, RegularGrid}","page":"Grids","title":"UncertainData.Resampling.resample","text":"resample(udata::UncertainIndexValueDataset, \n    sequential_constraint::SequentialSamplingConstraint,\n    grid::InterpolationGrid;\n    trunc::TruncateQuantiles = TruncateQuantiles(0.001, 0.999))\n\nDraw a realization of udata, enforcing a sequential_constraint on the indices. Then, interpolate the values of the realization to the provided grid of indices (grid). \n\nTo avoid very large spans of interpolation, the uncertain indices are truncated to some  large quantile range. Values are not truncated.  \n\n\n\n\n\n","category":"method"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"First, load the necessary packages:","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"using UncertainData, Distributions, KernelDensity, Plots","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/#Example-1:-Uncertain-values-defined-by-theoretical-distributions","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_examples/#A-uniformly-distributed-uncertain-value","page":"Example 1: Uncertain values defined by theoretical distributions","title":"A uniformly distributed uncertain value","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"Consider the following contrived example. We've measure a data value with a poor instrument  that tells us that the value lies between -2 and 3. However, we but that we know nothing  more about how the value is distributed on that interval. Then it may be reasonable to  represent that value as a uniform distribution on [-2, 3].","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"To construct an uncertain value following a uniform distribution, we use the constructor  for theoretical distributions with known parameters  (UncertainValue(distribution, params...)). ","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"The uniform distribution is defined by its lower and upper bounds, so we'll provide  these bounds as the parameters.","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"u = UncertainValue(Uniform, 1, 2)\n\n# Plot the estimated density\nbar(u, label = \"\", xlabel = \"value\", ylabel = \"probability density\")","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"(Image: )","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/#A-normally-distributed-uncertain-value","page":"Example 1: Uncertain values defined by theoretical distributions","title":"A normally distributed uncertain value","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"A situation commonly encountered is to want to use someone else's data from a publication.  Usually, these values are reported as the mean or median, with some associated uncertainty.  Say we want to use an uncertain value which is normally distributed with mean 2.1 and  standard deviation 0.3.","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"Normal distributions also have two parameters, so we'll use the two-parameter constructor  as we did above. ","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"u = UncertainValue(Normal, 2.1, 0.3)\n\n# Plot the estimated density\nbar(u, label = \"\", xlabel = \"value\", ylabel = \"probability density\")","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"(Image: )","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/#Other-distributions","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Other distributions","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"You may define uncertain values following any of the  supported distributions. ","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/#Example-2:-Uncertain-values-defined-by-kernel-density-estimated-distributions","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 2: Uncertain values defined by kernel density estimated distributions","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"One may also be given a a distribution of numbers that's not quite normally distributed.  How to represent this uncertainty? Easy: we use a kernel density estimate to the distribution.","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"Let's define a complicated distribution which is a mixture of two different normal  distributions, then draw a sample of numbers from it.","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"M = MixtureModel([Normal(-5, 0.5), Normal(0.2)])\nsome_sample = rand(M, 250)","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"Now, pretend that some_sample is a list of measurements we got from somewhere.  KDE estimates to the distribution can be defined implicitly or explicitly as follows:","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"# If the only argument to `UncertainValue()` is a vector of number, KDE will be triggered.\nu = UncertainValue(rand(M, 250)) \n\n# You may also tell the constructor explicitly that you want KDE. \nu = UncertainValue(UnivariateKDE, rand(M, 250))","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"Now, let's plot the resulting distribution. Note: this is not the original mixture of  Gaussians we started out with, it's the kernel density estimate to that mixture!","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"# Plot the estimated distribution.\nplot(u, xlabel = \"Value\", ylabel = \"Probability density\")","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"(Image: )","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/#Example-3:-Uncertain-values-defined-by-theoretical-distributions-fitted-to-empirical-data","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 3: Uncertain values defined by theoretical distributions fitted to empirical data","text":"","category":"section"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"One may also be given a dataset whose histogram looks a lot like a theoretical distribution. We may then select a theoretical distribution and fit its parameters to the empirical data.","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"Say our data was a sample that looks like it obeys Gamma distribution.","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"# Draw a 2000-point sample from a Gamma distribution with parameters α = 1.7 and θ = 5.5\nsome_sample = rand(Gamma(1.7, 5.5), 2000)","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"To perform a parameter estimation, simply provide the distribution as the first  argument and the sample as the second argument to the UncertainValue constructor.","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"# Take a sample from a Gamma distribution with parameters α = 1.7 and θ = 5.5 and \n# create a histogram of the sample.\nsome_sample = rand(Gamma(1.7, 5.5), 2000)\n\np1 = histogram(some_sample, normalize = true,\n    fc = :black, lc = :black,\n    label = \"\", xlabel = \"value\", ylabel = \"density\")\n\n# For the uncertain value representation, fit a gamma distribution to the sample. \n# Then, compare the histogram obtained from the original distribution to that obtained \n# when resampling the fitted distribution\nuv = UncertainValue(Gamma, some_sample)\n\n# Resample the fitted theoretical distribution\np2 = histogram(resample(uv, 10000), normalize = true,\n    fc = :blue, lc = :blue,\n    label = \"\", xlabel = \"value\", ylabel = \"density\")\n\nplot(p1, p2, layout = (2, 1), link = :x)","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"As expected, the histograms closely match (but are not exact because we estimated the distribution using a limited sample).","category":"page"},{"location":"uncertain_values/uncertainvalues_examples/","page":"Example 1: Uncertain values defined by theoretical distributions","title":"Example 1: Uncertain values defined by theoretical distributions","text":"(Image: )","category":"page"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#applying_resampling_scheme_uncertain_indexvalue_collections","page":"Resampling schemes","title":"Resampling schemes","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/","page":"Resampling schemes","title":"Resampling schemes","text":"For some uncertain collections and datasets, special resampling types are available to make resampling easier.","category":"page"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#Constrained-resampling-schemes","page":"Resampling schemes","title":"Constrained resampling schemes","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#Constrained-resampling","page":"Resampling schemes","title":"Constrained resampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/","page":"Resampling schemes","title":"Resampling schemes","text":"resample(::AbstractUncertainIndexValueDataset, ::ConstrainedIndexValueResampling{2, 1})","category":"page"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.resample-Tuple{AbstractUncertainIndexValueDataset, ConstrainedIndexValueResampling{2, 1}}","page":"Resampling schemes","title":"UncertainData.Resampling.resample","text":"resample(x::AbstractUncertainIndexValueDataset, resampling::ConstrainedIndexValueResampling)\n\nResample x by first constraining the supports of the distributions/populations  furnishing the uncertain indices and values, then drawing samples from the limited supports.\n\nSampling is done without assuming any sequential dependence between the  elements of x, such no that no dependence is introduced in the draws beyond what  is potentially already present in the collection of values.\n\nExample\n\n# Some example data \nN = 50\nx_uncertain = [UncertainValue(Normal, x, rand(Uniform(0.1, 0.8))) for x in rand(N)]\ny_uncertain = [UncertainValue(Normal, y, rand(Uniform(0.1, 0.8))) for y in rand(N)]\nx = UncertainValueDataset(x_uncertain)\ny = UncertainValueDataset(y_uncertain)\n\ntime_uncertain = [UncertainValue(Normal, i, 1) for i = 1:length(x)];\ntime_certain = [CertainValue(i) for i = 1:length(x)];\ntimeinds_x = UncertainIndexDataset(time_uncertain)\ntimeinds_y = UncertainIndexDataset(time_certain)\n\nX = UncertainIndexValueDataset(timeinds_x, x)\nY = UncertainIndexValueDataset(timeinds_y, y);\n\n###########################\n# Define resampling scheme \n###########################\n\n# Truncate each of the indices for x at 0.8 their standard deviation around the mean\nconstraints_x_inds = TruncateStd(0.8)\n\n# Truncate each of the indices for y at 1.5 their standard deviation around the mean\nconstraints_y_inds = TruncateStd(1.5)\n\n# Truncate each of the values of x at the 20th percentile range\nconstraints_x_vals = [TruncateQuantiles(0.4, 0.6) for i = 1:N];\n\n# Truncate each of the values of x at the 80th percentile range\nconstraints_y_vals = [TruncateQuantiles(0.1, 0.9) for i = 1:N];\n\ncs_x = (constraints_x_inds, constraints_x_vals)\ncs_y = (constraints_y_inds, constraints_y_vals)\n\n###########\n# Resample \n###########\nresample(X, ConstrainedIndexValueResampling(cs_x))\nresample(Y, ConstrainedIndexValueResampling(cs_y))\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#Sequential-resampling-schemes","page":"Resampling schemes","title":"Sequential resampling schemes","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#Sequential","page":"Resampling schemes","title":"Sequential","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/","page":"Resampling schemes","title":"Resampling schemes","text":"resample(::AbstractUncertainIndexValueDataset, ::SequentialResampling)","category":"page"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.resample-Tuple{AbstractUncertainIndexValueDataset, SequentialResampling}","page":"Resampling schemes","title":"UncertainData.Resampling.resample","text":"resample(x::AbstractUncertainIndexValueDataset, resampling::SequentialResampling)\n\nResample x according to a sequential resampling constraint. \n\nThis way of resampling introduces some serial dependence between the elements of x -  beyond what might already be present in the dataset. This is because imposing a  sequential constraint (e.g. StrictlyIncreasing) to the i-th value of the dataset  imposes constraints on what is possible to sample from the i+1th value.\n\nExample\n\n# Some example data \nN = 50\nx_uncertain = [UncertainValue(Normal, x, rand(Uniform(0.1, 0.8))) for x in rand(N)]\ny_uncertain = [UncertainValue(Normal, y, rand(Uniform(0.1, 0.8))) for y in rand(N)]\nx = UncertainValueDataset(x_uncertain)\ny = UncertainValueDataset(y_uncertain)\n\ntime_uncertain = [UncertainValue(Normal, i, 1) for i = 1:length(x)];\ntime_certain = [CertainValue(i) for i = 1:length(x)];\ntimeinds_x = UncertainIndexDataset(time_uncertain)\ntimeinds_y = UncertainIndexDataset(time_certain)\n\nX = UncertainIndexValueDataset(timeinds_x, x)\nY = UncertainIndexValueDataset(timeinds_y, y);\n\n# Resample \nseq_resampling = SequentialResampling(StrictlyIncreasing())\nresample(X, seq_resampling)\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#Sequential-and-interpolated","page":"Resampling schemes","title":"Sequential and interpolated","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/","page":"Resampling schemes","title":"Resampling schemes","text":"resample(::AbstractUncertainIndexValueDataset, ::SequentialInterpolatedResampling)","category":"page"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.resample-Tuple{AbstractUncertainIndexValueDataset, SequentialInterpolatedResampling}","page":"Resampling schemes","title":"UncertainData.Resampling.resample","text":"resample(x::AbstractUncertainIndexValueDataset, resampling::SequentialInterpolatedResampling)\n\nResample x according to a sequential resampling constraint, then interpolate the draw(s) to  some specified grid. \n\nThis way of resampling introduces some serial dependence between the elements of x -  beyond what might already be present in the dataset. This is because imposing a  sequential constraint (e.g. StrictlyIncreasing) to the i-th value of the dataset  imposes constraints on what is possible to sample from the i+1th value.\n\nExample\n\n# Some example data \nN = 50\nx_uncertain = [UncertainValue(Normal, x, rand(Uniform(0.1, 0.8))) for x in rand(N)]\ny_uncertain = [UncertainValue(Normal, y, rand(Uniform(0.1, 0.8))) for y in rand(N)]\nx = UncertainValueDataset(x_uncertain)\ny = UncertainValueDataset(y_uncertain)\n\ntime_uncertain = [UncertainValue(Normal, i, 1) for i = 1:length(x)];\ntime_certain = [CertainValue(i) for i = 1:length(x)];\ntimeinds_x = UncertainIndexDataset(time_uncertain)\ntimeinds_y = UncertainIndexDataset(time_certain)\n\nX = UncertainIndexValueDataset(timeinds_x, x)\nY = UncertainIndexValueDataset(timeinds_y, y);\n\n# Resample \nseqintp_resampling = SequentialInterpolatedResampling(StrictlyIncreasing(), RegularGrid(0:2:N))\nresample(X, seqintp_resampling)\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#Binned-resampling-schemes","page":"Resampling schemes","title":"Binned resampling schemes","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#BinnedResampling","page":"Resampling schemes","title":"BinnedResampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/","page":"Resampling schemes","title":"Resampling schemes","text":"resample(::AbstractUncertainIndexValueDataset, ::BinnedResampling)","category":"page"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#BinnedMeanResampling","page":"Resampling schemes","title":"BinnedMeanResampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/","page":"Resampling schemes","title":"Resampling schemes","text":"resample(x::AbstractUncertainIndexValueDataset, resampling::BinnedMeanResampling)","category":"page"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.resample-Tuple{AbstractUncertainIndexValueDataset, BinnedMeanResampling}","page":"Resampling schemes","title":"UncertainData.Resampling.resample","text":"resample(x::AbstractUncertainIndexValueDataset, resampling::BinnedMeanResampling)\n\nTransform index-irregularly spaced uncertain data onto a regular index-grid and  take the mean of the values in each bin. \n\nDistributions in each index bin are obtained by resampling all index values in x  resampling.n times, and mapping those index draws to the bins. Simultaneously, the  values in x are resampled and placed in the corresponding bins. Finally, the mean  in each bin is calculated. In total, length(x)*resampling.n draws are distributed  among the bins to form the final mean estimate.\n\nReturns a vector of mean values, one for each bin.\n\nAssumes that the points in x are independent.\n\nExample\n\nvars = (1, 2)\nnpts, tstep = 100, 10\nd_xind = Uniform(2.5, 15.5)\nd_yind = Uniform(2.5, 15.5)\nd_xval = Uniform(0.01, 0.2)\nd_yval = Uniform(0.01, 0.2)\n\nX, Y = example_uncertain_indexvalue_datasets(ar1_unidir(c_xy = 0.5), npts, vars, tstep = tstep,\n    d_xind = d_xind, d_yind = d_yind,\n    d_xval = d_xval, d_yval = d_yval);\n\nn_draws = 10000 # draws per uncertain value\ntime_grid = 0:50:1000\n\n# Resample both X and Y so that they are both at the same time indices, \n# and take the mean of each bin.\nresampled_dataset = resample(X, BinnedMeanResampling(time_grid, n_draws))\nresampled_dataset = resample(Y, BinnedMeanResampling(time_grid, n_draws))\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#BinnedWeightedResampling","page":"Resampling schemes","title":"BinnedWeightedResampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/","page":"Resampling schemes","title":"Resampling schemes","text":"resample(::AbstractUncertainIndexValueDataset, ::BinnedWeightedResampling)","category":"page"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.resample-Tuple{AbstractUncertainIndexValueDataset, BinnedWeightedResampling}","page":"Resampling schemes","title":"UncertainData.Resampling.resample","text":"resample(x::AbstractUncertainIndexValueDataset, resampling::BinnedWeightedResampling;\n    nan_threshold = 0.0)\n\nTransform index-irregularly spaced uncertain data onto a regular index-grid.\n\nDistributions in each index bin are obtained by resampling all index values  in x resampling.n times, sampled according to probabilities resampling.weights, and mapping those index draws to the bins. Simultaneously, the values in x are  resampled and placed in the corresponding bins. In total, length(x)*resampling.n draws  are distributed among the bins to form the final KDEs. \n\nReturns an UncertainIndexValueDataset. The distribution of values in the i-th bin  is approximated by a kernel density estimate (KDE) over the draws falling in the  i-th bin.\n\nAssumes that the points in x are independent.\n\nExample\n\nvars = (1, 2)\nnpts, tstep = 100, 10\nd_xind = Uniform(2.5, 15.5)\nd_yind = Uniform(2.5, 15.5)\nd_xval = Uniform(0.01, 0.2)\nd_yval = Uniform(0.01, 0.2)\n\nX, Y = example_uncertain_indexvalue_datasets(ar1_unidir(c_xy = 0.5), npts, vars, tstep = tstep,\n    d_xind = d_xind, d_yind = d_yind,\n    d_xval = d_xval, d_yval = d_yval);\n\nleft_bin_edges = 0:50:1000\nn_draws = 10000\nwts = Weights(rand(length(X)))\nresampling = BinnedWeightedResampling(left_bin_edges, wts, 10)\nresampled_dataset = resample(X, resampling)\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#BinnedMeanWeightedResampling","page":"Resampling schemes","title":"BinnedMeanWeightedResampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/","page":"Resampling schemes","title":"Resampling schemes","text":"resample(x::AbstractUncertainIndexValueDataset, resampling::BinnedMeanWeightedResampling)","category":"page"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.resample-Tuple{AbstractUncertainIndexValueDataset, BinnedMeanWeightedResampling}","page":"Resampling schemes","title":"UncertainData.Resampling.resample","text":"resample(x::AbstractUncertainIndexValueDataset, resampling::BinnedMeanWeightedResampling)\n\nTransform index-irregularly spaced uncertain data onto a regular index-grid and  take the mean of the values in each bin. Resamples the data points in x  according to resampling.weights.\n\nDistributions in each index bin are obtained by resampling all index values in x  resampling.n times, in proportions obeying resampling.weights and mapping those  index draws to the bins. Simultaneously, the values in x are resampled and placed  in the corresponding bins. Finally, the mean in each bin is calculated. In total,  length(x)*resampling.n draws are distributed among the bins to form the final mean  estimate.\n\nReturns a vector of mean values, one for each bin.\n\nAssumes that the points in x are independent.\n\nExample\n\nvars = (1, 2)\nnpts, tstep = 100, 10\nd_xind = Uniform(2.5, 15.5)\nd_yind = Uniform(2.5, 15.5)\nd_xval = Uniform(0.01, 0.2)\nd_yval = Uniform(0.01, 0.2)\n\nX, Y = example_uncertain_indexvalue_datasets(ar1_unidir(c_xy = 0.5), npts, vars, tstep = tstep,\nd_xind = d_xind, d_yind = d_yind,\nd_xval = d_xval, d_yval = d_yval);\n\nn_draws = 10000 # draws per uncertain value\ntime_grid = 0:50:1000\nwts = Weights(rand(length(X))) # some random weights\n\n# Resample both X and Y so that they are both at the same time indices, \n# and take the mean of each bin.\nresampled_dataset = resample(X, BinnedMeanWeightedResampling(time_grid, wts, n_draws))\nresampled_dataset = resample(Y, BinnedMeanWeightedResampling(time_grid, wts, n_draws))\n\n\n\n\n\n","category":"method"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#Interpolated-and-binned-resampling","page":"Resampling schemes","title":"Interpolated-and-binned resampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#InterpolateAndBin-resampling","page":"Resampling schemes","title":"InterpolateAndBin resampling","text":"","category":"section"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/","page":"Resampling schemes","title":"Resampling schemes","text":"resample(::AbstractUncertainIndexValueDataset, ::InterpolateAndBin{Linear})","category":"page"},{"location":"resampling/resampling_schemes/resampling_with_schemes_uncertain_indexvalue_collections/#UncertainData.Resampling.resample-Tuple{AbstractUncertainIndexValueDataset, InterpolateAndBin{Linear}}","page":"Resampling schemes","title":"UncertainData.Resampling.resample","text":"resample(udata::AbstractUncertainIndexValueDataset, regularization_scheme::InterpolateAndBin{Linear})\n\nDraw a single realisation of udata and interpolate-and-bin the data according to the  provided regularization scheme. Assumes points in udata are independent and sorts the draw according to the index values before interpolating. See also InterpolateAndBin.\n\nExample\n\nnpts = 50\ny = rand(npts) \n\nN = Normal(0, 1)\n\nfor t in 3:npts\n    y[t,1] = 0.7*y[t-1,1] - 0.35*y[t-2,1] + rand(N)\nend\n\n# Assume data are unevenly spaced \ntime = sample(1.0:npts*5, npts, ordered = true, replace = false)\n\n# Assign some uncertainties to both time indices and values and gather \n# in an UncertainIndexValueDataset\nutime = UncertainValue.(Normal.(time, 2))\nuy = UncertainValue.(Normal.(y, 0.1))\nudata = UncertainIndexValueDataset(utime, uy)\n\n# Interpolation-and-binning scheme. First interpolate to a very fine grid,\n# then gather the points falling in each of the coarser bins and summarise \n# each bin using the mean of the points in each bin.\nleft_bin_edges = 0:10:npts*5\nr = InterpolateAndBin(mean, left_bin_edges, Linear(), 0:0.1:1000, Flat(OnGrid()))\n\n# The binned time axis:\ntime_binned = left_bin_edges[1:end-1] .+ step(left_bin_edges)/2\n\n# Get a set corresponding resampled (interpolated+binned) values\ny_binned = resample(udata, r)\n\n# Plot some interpolated+binned draws\ntime_binned = left_bin_edges[1:end-1] .+ step(left_bin_edges)/2\n\np = plot(xlabel = \"time\", ylabel = \"value\")\nfor i = 1:100\n    plot!(time_binned, resample(udata, r), lw = 0.3, α = 0.2, ms = 0.1, c = :red, \n        marker = stroke(0.1), label = \"\")\nend\nplot!(time, y, c = :black, lw = 1, ms = 2, marker = stroke(2.0, :black), label = \"\")\nplot!(udata, c = :black, lw = 1, ms = 2, marker = stroke(0.1, :black), [0.05, 0.95], [0.05, 0.95])\nvline!(left_bin_edges, c = :black, α = 0.3, lw = 0.3, label = \"\")\n\n\n\n\n\n","category":"method"},{"location":"uncertain_datasets/uncertain_index_dataset/#Uncertain-index-datasets","page":"Uncertain index datasets","title":"Uncertain index datasets","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_index_dataset/#Documentation","page":"Uncertain index datasets","title":"Documentation","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_index_dataset/","page":"Uncertain index datasets","title":"Uncertain index datasets","text":"UncertainIndexDataset","category":"page"},{"location":"uncertain_datasets/uncertain_index_dataset/#UncertainData.UncertainDatasets.UncertainIndexDataset","page":"Uncertain index datasets","title":"UncertainData.UncertainDatasets.UncertainIndexDataset","text":"UncertainIndexDataset\n\nGeneric dataset containing uncertain indices.\n\nFields\n\nindices::AbstractVector{AbstractUncertainValue}: The uncertain values.\n\n\n\n\n\n","category":"type"},{"location":"uncertain_datasets/uncertain_index_dataset/#Description","page":"Uncertain index datasets","title":"Description","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_index_dataset/","page":"Uncertain index datasets","title":"Uncertain index datasets","text":"UncertainIndexDatasets is an uncertain dataset type that represents the indices  corresponding to an UncertainValueDataset.","category":"page"},{"location":"uncertain_datasets/uncertain_index_dataset/","page":"Uncertain index datasets","title":"Uncertain index datasets","text":"It is meant to be used for the indices field in UncertainIndexValueDatasets instances.","category":"page"},{"location":"uncertain_datasets/uncertain_index_dataset/#Defining-uncertain-index-datasets","page":"Uncertain index datasets","title":"Defining uncertain index datasets","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_index_dataset/#Example-1:-increasing-index-uncertainty-through-time","page":"Uncertain index datasets","title":"Example 1: increasing index uncertainty through time","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_index_dataset/#Defining-the-indices","page":"Uncertain index datasets","title":"Defining the indices","text":"","category":"section"},{"location":"uncertain_datasets/uncertain_index_dataset/","page":"Uncertain index datasets","title":"Uncertain index datasets","text":"Say we had a dataset of 20 values for which the uncertainties are normally distributed  with increasing standard deviation through time.","category":"page"},{"location":"uncertain_datasets/uncertain_index_dataset/","page":"Uncertain index datasets","title":"Uncertain index datasets","text":"time_inds = 1:13\nuvals = [UncertainValue(Normal, ind, rand(Uniform()) + (ind / 6)) for ind in time_inds]\ninds = UncertainIndexDataset(uvals)","category":"page"},{"location":"uncertain_datasets/uncertain_index_dataset/","page":"Uncertain index datasets","title":"Uncertain index datasets","text":"That's it. We can also plot the 33rd to 67th percentile range for the indices.","category":"page"},{"location":"uncertain_datasets/uncertain_index_dataset/","page":"Uncertain index datasets","title":"Uncertain index datasets","text":"plot(inds, [0.33, 0.67])","category":"page"},{"location":"uncertain_datasets/uncertain_index_dataset/","page":"Uncertain index datasets","title":"Uncertain index datasets","text":"(Image: )","category":"page"},{"location":"resampling/resampling_inplace/#In-place-resampling","page":"In-place resampling","title":"In-place resampling","text":"","category":"section"},{"location":"resampling/resampling_inplace/","page":"In-place resampling","title":"In-place resampling","text":"resample!","category":"page"},{"location":"resampling/resampling_inplace/#UncertainData.Resampling.resample!","page":"In-place resampling","title":"UncertainData.Resampling.resample!","text":"resample!(v::AbstractArray{T, 1}, x::AbstractUncertainValue)\nresample!(v::MVector{N, T}, x::AbstractUncertainValue) where {N, T}\nresample!(v::FieldVector{N, T}, x::AbstractUncertainValue) where {N, T}\n\nresample!(v::MVector{N, T}, x::Vararg{AbstractUncertainValue, N}) where {N, T}\nresample!(v::FieldVector{N, T}, x::Vararg{AbstractUncertainValue, N}) where {N, T}\n\nresample!(v::AbstractArray{T, 1}, x::UVAL_COLLECTION_TYPES) where T\nresample!(v::AbstractArray{T, 2}, x::UVAL_COLLECTION_TYPES) where T\n\nresample!(idxs::AbstractArray{T, 1}, vals::AbstractArray{T, 1}, \n    x::AbstractUncertainIndexValueDataset) where T\nresample!(idxs::AbstractArray{T, 2}, vals::AbstractArray{T, 2}, \n    x::AbstractUncertainIndexValueDataset) where T\n\nResample a uncertain value x, or a collection of uncertain values x, into a  pre-allocated container v.\n\nUncertain values\n\nIf x is a single uncertain value, and v is vector-like, then fill    v with N draws of x. Works with vectors of length N,    MVector{N, T}s or FieldVector{N, T}s. \n\nUncertain collections\n\nUncertain collections may be a Vector{AbstractUncertainValue} of length N,  an  AbstractUncertainValueDataset, or an NTuple{N, AbstractUncertainValue}. See also UVAL_COLLECTION_TYPES.\n\nIf x is a collection of uncertain values and v is vector-like, then    fill v[i] with a draw of x[i] for i = 1:N. \nIf x is a collection of uncertain values and v is a 2D-array, then    fill the i-th column of v with length(x) draws of the i-th    uncertain value in x.\n\nUncertain index-value collections\n\nIf two mutable vector-like containers, idxs and vals, are provided along    with an uncertain index-value dataset x, then fill idxs[i] with a    random draw from x.indices[i] and fill vals[i] with a random draw    from x.values[i].\nIf two mutable matrix-like containers, idxs and vals are provided along   with an uncertain index-value dataset x (where the number of    columns in both idxs and vals matches length(x)), then fill the    i-th column of idxs with size(idxs, 1) draws from x.indices[i],   and fill the i-th column of vals with size(idxs, 1) draws    from x.values[i].\n\n\n\n\n\n","category":"function"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#point_estimate_statistics","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"These estimators operate on pairs of uncertain values, which can be of any type, , such as populations,  theoretical distributions,  KDE distributions or  fitted distributions. They compute the  statistic in question by drawing independent length-n draws of each of the two uncertain values, then computing the statistic on those draws.","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#syntax_statistics_uncertainvalue_pairs","page":"Pairwise estimates of statistics","title":"Syntax","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"The syntax for computing the statistic f for uncertain values x and y is:","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"f(x::AbstractUncertainValue, y::AbstractUncertainValue, args..., n::Int; kwargs...), which draws independent length-n draws of x and y, then estimates the statistic f for those draws.","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Methods","page":"Pairwise estimates of statistics","title":"Methods","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Covariance","page":"Pairwise estimates of statistics","title":"Covariance","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"cov(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int; corrected::Bool = true)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Statistics.cov-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"Statistics.cov","text":"cov(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int; \n    corrected::Bool = true)\n\nCompute the covariance between two uncertain values by independently  drawing n samples from x and n samples from y , then computing  the covariance between those length-n draws.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Correlation-(Pearson)","page":"Pairwise estimates of statistics","title":"Correlation (Pearson)","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"cor(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Statistics.cor-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"Statistics.cor","text":"cor(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\n\nCompute the Pearson correlation between two uncertain values by independently  drawing n samples from x and n samples from y, then computing  the Pearson correlation between those length-n draws.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Correlation-(Kendall)","page":"Pairwise estimates of statistics","title":"Correlation (Kendall)","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"corkendall(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#StatsBase.corkendall-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"StatsBase.corkendall","text":"corkendall(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\n\nCompute Kendalls's rank correlation coefficient between two uncertain values by  independently drawing n samples from x and n samples from y, then computing  Kendalls's rank correlation coefficient between those length-n draws.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Correlation-(Spearman)","page":"Pairwise estimates of statistics","title":"Correlation (Spearman)","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"corspearman(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#StatsBase.corspearman-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"StatsBase.corspearman","text":"corspearman(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\n\nCompute Spearman's rank correlation coefficient between two uncertain values by  independently drawing n samples from x and n samples from y, then computing  the Spearman's rank correlation coefficient between those length-n draws.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Count-non-equal","page":"Pairwise estimates of statistics","title":"Count non-equal","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"countne(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#StatsBase.countne-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"StatsBase.countne","text":"countne(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\n\nCount the number of indices at which the elements of two independent length-n draws of x and for y are not equal. \n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Count-equal","page":"Pairwise estimates of statistics","title":"Count equal","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"counteq(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#StatsBase.counteq-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"StatsBase.counteq","text":"counteq(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\n\nCount the number of indices at which the elements of two independent length-n draws of x and for y are equal. \n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Maximum-absolute-deviation","page":"Pairwise estimates of statistics","title":"Maximum absolute deviation","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"maxad(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#StatsBase.maxad-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"StatsBase.maxad","text":"maxad(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\n\nCompute the maximum absolute deviation between two uncertain values by independently  drawing n samples from x and n samples from y, then computing the  maximum absolute deviation between those length-n draws.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Mean-absolute-deviation","page":"Pairwise estimates of statistics","title":"Mean absolute deviation","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"meanad(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#StatsBase.meanad-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"StatsBase.meanad","text":"meanad(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\n\nCompute the mean absolute deviation between two uncertain values by independently  drawing n samples from x and n samples from y, then computing the  mean absolute deviation between those length-n draws.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Mean-squared-deviation","page":"Pairwise estimates of statistics","title":"Mean squared deviation","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"msd(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#StatsBase.msd-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"StatsBase.msd","text":"msd(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\n\nCompute the mean squared deviation between two uncertain values by independently  drawing n samples from x and n samples from y, then computing the  mean squared deviation between those length-n draws.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Peak-signal-to-noise-ratio","page":"Pairwise estimates of statistics","title":"Peak signal-to-noise ratio","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"psnr(x::AbstractUncertainValue, y::AbstractUncertainValue, maxv, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#StatsBase.psnr-Tuple{AbstractUncertainValue, AbstractUncertainValue, Any, Int64}","page":"Pairwise estimates of statistics","title":"StatsBase.psnr","text":"psnr(x::AbstractUncertainValue, y::AbstractUncertainValue, maxv, n::Int)\n\nCompute the peak signal-to-noise ratio between two uncertain values by independently  drawing n samples from x and from y, yielding x_draw and y_draw, then  computing the peak signal-to-noise ratio between those length-n draws. \n\nThe PSNR is computed as 10 * log10(maxv^2 / msd(x_draw, y_draw)), where maxv is  the maximum possible value x or y can take\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Root-mean-squared-deviation","page":"Pairwise estimates of statistics","title":"Root mean squared deviation","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"rmsd(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int; normalize = false)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#StatsBase.rmsd-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"StatsBase.rmsd","text":"rmsd(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int, \n    normalize = false)\n\nCompute the root mean squared deviation between two uncertain values by independently  drawing n samples from x and from y, yielding x_draw and y_draw, then  computing the the root mean squared deviation between those length-n draws.  The root mean squared deviation is computed as sqrt(msd(x_draw, y_draw)). Optionally, x_draw and y_draw may be normalised.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Squared-L2-distance","page":"Pairwise estimates of statistics","title":"Squared L2 distance","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"sqL2dist(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#StatsBase.sqL2dist-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"StatsBase.sqL2dist","text":"sqL2dist(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\n\nCompute the squared L2 distance between two uncertain values by independently  drawing n samples from x and from y, then computing the   squared L2 distance between those length-n draws: sum_i=1^n x_i - y_i^2.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Cross-correlation","page":"Pairwise estimates of statistics","title":"Cross correlation","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"crosscor(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int; demean = true)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#StatsBase.crosscor-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"StatsBase.crosscor","text":"crosscor(x::AbstractUncertainValue, y::AbstractUncertainValue, [lags], \n    n::Int; demean = true)\n\nCompute the cross correlation between two uncertain values by independently  drawing n samples from x and n samples from y, x_draw and y_draw, then computing  the cross correlation between those length-n draws. demean specifies whether the respective  means of the x_draw and y_draw should be subtracted from them before computing  their cross correlation.\n\nWhen left unspecified, the lags used are -min(n-1, 10*log10(n)) to min(n, 10*log10(n)).\n\nThe output is normalized by sqrt(var(x_draw)*var(y_draw)). See crosscov for the unnormalized form.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Cross-covariance","page":"Pairwise estimates of statistics","title":"Cross covariance","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"crosscov(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int; demean = true)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#StatsBase.crosscov-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"StatsBase.crosscov","text":"crosscov(x::AbstractUncertainValue, y::AbstractUncertainValue, [lags], \n    n::Int; demean = true)\n\nCompute the cross covariance function (CCF) between two uncertain values by independently  drawing n samples from x and n samples from y, x_draw and y_draw, then computing  the cross correlation between those length-n draws. demean specifies whether the respective  means of the x_draw and y_draw should be subtracted from them before computing  their CCF.\n\nWhen left unspecified, the lags used are -min(n-1, 10*log10(n)) to min(n, 10*log10(n)).\n\nThe output is not normalized. See crosscor for a function with normalization.\n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Generalized-Kullback-Leibler-divergence","page":"Pairwise estimates of statistics","title":"Generalized Kullback-Leibler divergence","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"gkldiv(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#StatsBase.gkldiv-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"StatsBase.gkldiv","text":"gkldiv(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)\n\nCompute the generalized Kullback-Leibler divergence between two uncertain  values by independently drawing n samples from x and n samples from y,  then computing the generalized Kullback-Leibler divergence between those  length-n draws. \n\n\n\n\n\n","category":"method"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#Kullback-Leibler-divergence","page":"Pairwise estimates of statistics","title":"Kullback-Leibler divergence","text":"","category":"section"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/","page":"Pairwise estimates of statistics","title":"Pairwise estimates of statistics","text":"kldivergence(x::AbstractUncertainValue, y::AbstractUncertainValue, n::Int)","category":"page"},{"location":"uncertain_statistics/core_stats/core_statistics_pairwise_estimates/#StatsBase.kldivergence-Tuple{AbstractUncertainValue, AbstractUncertainValue, Int64}","page":"Pairwise estimates of statistics","title":"StatsBase.kldivergence","text":"kldivergence(x::AbstractUncertainValue, y::AbstractUncertainValue, [b], \n    n::Int)\n\nCompute the Kullback-Leibler divergence between two uncertain values by independently  drawing n samples from x and n samples from y, then computing the  Kullback-Leibler divergence between those length-n draws. Optionally a real number  b can be specified such that the divergence is scaled by 1/log(b).\n\n\n\n\n\n","category":"method"}]
}
